<?xml version="1.0" encoding="ISO-8859-1"?>
<MMP version="2.5" platform="DAT" generation_date="2022-03-11 16:01:34">
	<message_format>
		<message_header>
			<element_list count="3" size="3">
				<element order="0" id="mmp_gsxn_t::xid">
					<name>xid</name>
					<size>1</size>
					<description>MMP transaction ID:  0 is the null XID and used for all spontaneous notifies, while 1-255 are used to track requests and their corresponding responses.</description>
					<signed>0</signed>
					<enumeration_list count="3">
						<enumeration id="mmp_xid_sentinel_t::MMP_XID_NULL">
							<name>MMP_XID_NULL</name>
							<value>0</value>
							<description></description>
						</enumeration>
						<enumeration id="mmp_xid_sentinel_t::MMP_XID_FIRST">
							<name>MMP_XID_FIRST</name>
							<value>1</value>
							<description></description>
						</enumeration>
						<enumeration id="mmp_xid_sentinel_t::MMP_XID_LAST">
							<name>MMP_XID_LAST</name>
							<value>255</value>
							<description></description>
						</enumeration>
					</enumeration_list>
				</element>
				<element order="1" id="mmp_gsxn_t::type">
					<name>type</name>
					<size>1</size>
					<description>MMP operation type: get, set, exec, or notify</description>
					<signed>0</signed>
					<enumeration_list count="4">
						<enumeration id="mmp_type_t::MMP_GET">
							<name>MMP_GET</name>
							<value>&apos;g&apos;</value>
							<description>Indicates an MMP GET operation</description>
						</enumeration>
						<enumeration id="mmp_type_t::MMP_SET">
							<name>MMP_SET</name>
							<value>&apos;s&apos;</value>
							<description>Indicates an MMP SET operation</description>
						</enumeration>
						<enumeration id="mmp_type_t::MMP_EXECUTE">
							<name>MMP_EXECUTE</name>
							<value>&apos;x&apos;</value>
							<description>Indicates an MMP EXEC operation</description>
						</enumeration>
						<enumeration id="mmp_type_t::MMP_NOTIFY">
							<name>MMP_NOTIFY</name>
							<value>&apos;n&apos;</value>
							<description>Indicates an MMP NOTIFY operation</description>
						</enumeration>
					</enumeration_list>
				</element>
				<element order="2" id="mmp_gsxn_t::nparms">
					<name>nparms</name>
					<size>1</size>
					<description>The number of parameter groups contained in this MMP message</description>
					<signed>0</signed>
				</element>
			</element_list>
		</message_header>
		<message_body>
			<element_list count="variable" size="variable">
				<parameter_group>
					<parameter_group_header>
						<element_list count="4" size="4">
							<element order="0" id="mmp_sfl_t::subsys">
								<name>subsys</name>
								<size>1</size>
								<description>The subsystem or command section of this parameter group</description>
								<signed>0</signed>
							</element>
							<element order="1" id="mmp_sfl_t::field">
								<name>field</name>
								<size>1</size>
								<description>The field or command within the subsystem/command section of this parameter group</description>
								<signed>0</signed>
							</element>
							<element order="2" id="mmp_sfl_t::len_msb">
								<name>len_msb</name>
								<size>1</size>
								<description>The most significant byte of the body length of this parameter group</description>
								<signed>0</signed>
							</element>
							<element order="3" id="mmp_sfl_t::len_lsb">
								<name>len_lsb</name>
								<size>1</size>
								<description>The least significant byte of the body length of this parameter group</description>
								<signed>0</signed>
							</element>
						</element_list>
					</parameter_group_header>
					<parameter_group_body size="variable">
					</parameter_group_body>
				</parameter_group>
			</element_list>
		</message_body>
	</message_format>
	<parameter_groups count="28">
		<subsys_list count="24">
			<subsys id="IFACE">
				<name>IFACE</name>
				<value>0x00</value>
				<description>MMP interface configuration and control data/notifications</description>
				<field_list count="17">
					<field operations="gn" id="IFACE::MMPSTAT">
						<name>MMPSTAT</name>
						<value>0x00</value>
						<description>Status of MMP subsystem</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_iface_stat_t::stat">
								<name>stat</name>
								<size>2</size>
								<description>MMP interface status</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_iface_stat_status_t::MMP_IFACE_STAT_EXITED">
										<name>MMP_IFACE_STAT_EXITED</name>
										<value>0</value>
										<description>MMP interface exited</description>
									</enumeration>
									<enumeration id="mmp_iface_stat_status_t::MMP_IFACE_STAT_STARTED">
										<name>MMP_IFACE_STAT_STARTED</name>
										<value>1</value>
										<description>MMP interface started</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="IFACE::ERR">
						<name>ERR</name>
						<value>0x01</value>
						<description>MMP error notification</description>
						<subfield_list count="3" size="4">
							<subfield order="0" id="mmp_sfl_err_t::subsys">
								<name>subsys</name>
								<size>1</size>
								<description>Subsystem or Command Section of the request that caused the error</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_sfl_err_t::field">
								<name>field</name>
								<size>1</size>
								<description>Field or Command of the request that caused the error</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_sfl_err_t::err">
								<name>err</name>
								<size>2</size>
								<description>Error code</description>
								<signed>0</signed>
								<enumeration_list count="22">
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_NULL">
										<name>MMP_IFACE_ERR_NULL</name>
										<value>0x00</value>
										<description>Null error code</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_TIMEOUT">
										<name>MMP_IFACE_ERR_TIMEOUT</name>
										<value>0x01</value>
										<description>Operation has timed out</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_BAD_SUBSYS">
										<name>MMP_IFACE_ERR_BAD_SUBSYS</name>
										<value>0x02</value>
										<description>Bad subsystem in GET/SET request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_BAD_FIELD">
										<name>MMP_IFACE_ERR_BAD_FIELD</name>
										<value>0x03</value>
										<description>Bad field in GET/SET request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_BAD_VALUE">
										<name>MMP_IFACE_ERR_BAD_VALUE</name>
										<value>0x04</value>
										<description>Bad value in GET/SET request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_PARSE">
										<name>MMP_IFACE_ERR_PARSE</name>
										<value>0x05</value>
										<description>Error parsing serial stream</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_BAD_CMDSECT">
										<name>MMP_IFACE_ERR_BAD_CMDSECT</name>
										<value>0x06</value>
										<description>Bad command section in EXEC request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_BAD_CMD">
										<name>MMP_IFACE_ERR_BAD_CMD</name>
										<value>0x07</value>
										<description>Bad command in EXEC request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_BAD_CMDARGS">
										<name>MMP_IFACE_ERR_BAD_CMDARGS</name>
										<value>0x08</value>
										<description>Bad arguments to command in EXEC request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_MULTICMD">
										<name>MMP_IFACE_ERR_MULTICMD</name>
										<value>0x09</value>
										<description>More than one EXEC operation in single transaction</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_DEVICE_BUSY">
										<name>MMP_IFACE_ERR_DEVICE_BUSY</name>
										<value>0x0A</value>
										<description>Modem too busy to process request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_NOTIFY_ONLY">
										<name>MMP_IFACE_ERR_NOTIFY_ONLY</name>
										<value>0x0B</value>
										<description>Field not accessible with GET/SET, spontaneous NOTIFY only</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_NO_RESOURCE">
										<name>MMP_IFACE_ERR_NO_RESOURCE</name>
										<value>0x0C</value>
										<description>Resources not available to process request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_UNMODIFIABLE">
										<name>MMP_IFACE_ERR_UNMODIFIABLE</name>
										<value>0x0D</value>
										<description>Value may not be modified with a SET</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_PERMISSION">
										<name>MMP_IFACE_ERR_PERMISSION</name>
										<value>0x0E</value>
										<description>Insufficient permission level to carry out operation</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_INVALID_STATE">
										<name>MMP_IFACE_ERR_INVALID_STATE</name>
										<value>0x0F</value>
										<description>The modem is not in a state that can validly process the request</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_FEAT_NOT_ENABLED">
										<name>MMP_IFACE_ERR_FEAT_NOT_ENABLED</name>
										<value>0x10</value>
										<description>The requested operation requires feature key activation, but the key is not installed</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_NOT_IMPLEMENTED">
										<name>MMP_IFACE_ERR_NOT_IMPLEMENTED</name>
										<value>0x11</value>
										<description>The requested operation is recognized but is not yet implemented in the MMP engine</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_HW_NOT_PRESENT">
										<name>MMP_IFACE_ERR_HW_NOT_PRESENT</name>
										<value>0x12</value>
										<description>The requested operation relies on hardware that is either not present on the board or did not initialize properly</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_DB_LOCKED">
										<name>MMP_IFACE_ERR_DB_LOCKED</name>
										<value>0x13</value>
										<description>An attempt to modify a database (like the configuration) was disallowed because it is in a locked state</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_ACOU_DISALLOWED">
										<name>MMP_IFACE_ERR_ACOU_DISALLOWED</name>
										<value>0x14</value>
										<description>The modification attempt cannot be performed acoustically</description>
									</enumeration>
									<enumeration id="mmp_iface_err_t::MMP_IFACE_ERR_SET_ONLY">
										<name>MMP_IFACE_ERR_SET_ONLY</name>
										<value>0x15</value>
										<description>The field may only be SET, and not queried with a GET operation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="IFACE::VERSION">
						<name>VERSION</name>
						<value>0x02</value>
						<description>Version of MMP protocol running</description>
						<subfield_list count="2" size="4">
							<subfield order="0" id="mmp_version_t::major">
								<name>major</name>
								<size>2</size>
								<description>MMP protocol major revision number</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_version_t::minor">
								<name>minor</name>
								<size>2</size>
								<description>MMP protocol minor revision number</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="IFACE::CMDRESULT">
						<name>CMDRESULT</name>
						<value>0x03</value>
						<description>MMP command (EXECUTE) result notification</description>
						<subfield_list count="4" size="4">
							<subfield order="0" id="mmp_cmd_result_t::cmdsect">
								<name>cmdsect</name>
								<size>1</size>
								<description>CMDSECT of the request this result pertains to</description>
								<signed>0</signed>
								<enumeration_list count="4">
									<enumeration id="mmp_cmdsect_t::NULL">
										<name>NULL</name>
										<value>0x00</value>
										<description>Null command section (unused)</description>
									</enumeration>
									<enumeration id="mmp_cmdsect_t::STD">
										<name>STD</name>
										<value>0x01</value>
										<description>Standard commands and operations supported on most modem-based platforms</description>
									</enumeration>
									<enumeration id="mmp_cmdsect_t::RNGRLS">
										<name>RNGRLS</name>
										<value>0x02</value>
										<description>Ranging and releasing operations</description>
									</enumeration>
									<enumeration id="mmp_cmdsect_t::DATALOG">
										<name>DATALOG</name>
										<value>0x04</value>
										<description>Commands for Data Logger</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cmd_result_t::cmd">
								<name>cmd</name>
								<size>1</size>
								<description>Command of the request this result pertains to</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cmd_result_t::seqno">
								<name>seqno</name>
								<size>1</size>
								<description>Sequence number of the response to the current command - increments for each CMDRESULT NOTIFY associated with a given EXEC request</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_cmd_result_t::message">
								<name>message</name>
								<size>1</size>
								<description>Message/result of the command</description>
								<signed>0</signed>
								<enumeration_list count="10">
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_ERROR">
										<name>MMP_CMDRESULT_ERROR</name>
										<value>0</value>
										<description>An error occurred - clears current execution data</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_CMD_ACK">
										<name>MMP_CMDRESULT_CMD_ACK</name>
										<value>1</value>
										<description>Action completed successfully - clears current execution data</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_CMD_STARTED">
										<name>MMP_CMDRESULT_CMD_STARTED</name>
										<value>2</value>
										<description>Action/mode has started - should be followed by CMD_ENDED and does not automatically clear the current execution data</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_CMD_ENDED">
										<name>MMP_CMDRESULT_CMD_ENDED</name>
										<value>3</value>
										<description>Action/mode has ended - clears current execution data</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_DATA">
										<name>MMP_CMDRESULT_DATA</name>
										<value>4</value>
										<description>Data is being returned from the command.  The standard CMDRESULT header will be followed by a command-specific set of result data.  Clears current execution data.</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_TIMEOUT">
										<name>MMP_CMDRESULT_TIMEOUT</name>
										<value>5</value>
										<description>Command ended with a timeout condition - clears current execution data</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_PROGRESS">
										<name>MMP_CMDRESULT_PROGRESS</name>
										<value>6</value>
										<description>Command is progressing with more messages forthcoming.  Like CMDRESULT_DATA, it may be followed by more information.  Does not automatically clear the current execution data.</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_REMOTE_ERROR">
										<name>MMP_CMDRESULT_REMOTE_ERROR</name>
										<value>7</value>
										<description>Remotely executed MMP operation contains one or more error conditions</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_REMOTE_TIMEOUT">
										<name>MMP_CMDRESULT_REMOTE_TIMEOUT</name>
										<value>8</value>
										<description>Remotely executed MMP operation timed out</description>
									</enumeration>
									<enumeration id="mmp_cmdresult_msg_t::MMP_CMDRESULT_REMOTE_DENIED">
										<name>MMP_CMDRESULT_REMOTE_DENIED</name>
										<value>9</value>
										<description>Remotely executed MMP operation disallowed due to locking, permissions, etc.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::BLOCKNOTIFY">
						<name>BLOCKNOTIFY</name>
						<value>0x04</value>
						<description>Block spontaneous notifications from one or more subsystems.  Used with SET, provide a variable length list of subsystems to block.  Returns a variable-length list of blocked subsystems.  Note that responses will always be received when induced by a direct SET/CMD on an interface even if the subsystem is blocked; this only filters spontaneous notifies. </description>
						<subfield_list count="2" size="variable">
							<subfield order="0" id="mmp_iface_blocknotify_t::numsubsys">
								<name>numsubsys</name>
								<size>2</size>
								<description>The number of subsystems to block/unblock in the list</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_blocknotify_t::subsys">
								<name>subsys</name>
								<size>1</size>
								<description>Variable length array of the subsystems to block/unblock [sizevar=numsubsys]</description>
								<signed>1</signed>
								<array_size varid="mmp_iface_blocknotify_t::numsubsys" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::UNBLOCKNOTIFY">
						<name>UNBLOCKNOTIFY</name>
						<value>0x05</value>
						<description>Allow spontaneous notifications from one or more subsystems.  Used with SET, provide a variable-length list of subsystems to unblock.  Returns a variable-length list of unblocked subsystems. </description>
						<subfield_list count="2" size="variable">
							<subfield order="0" id="mmp_iface_blocknotify_t::numsubsys">
								<name>numsubsys</name>
								<size>2</size>
								<description>The number of subsystems to block/unblock in the list</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_blocknotify_t::subsys">
								<name>subsys</name>
								<size>1</size>
								<description>Variable length array of the subsystems to block/unblock [sizevar=numsubsys]</description>
								<signed>1</signed>
								<array_size varid="mmp_iface_blocknotify_t::numsubsys" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="IFACE::DSP_SW_VERSION">
						<name>DSP_SW_VERSION</name>
						<value>0x06</value>
						<description>DSP firmware version currently running</description>
						<subfield_list count="4" size="8">
							<subfield order="0" id="mmp_iface_dsp_sw_version_t::major">
								<name>major</name>
								<size>1</size>
								<description>DSP firmware major version number</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_dsp_sw_version_t::minor">
								<name>minor</name>
								<size>1</size>
								<description>DSP firmware minor version number</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_iface_dsp_sw_version_t::revision">
								<name>revision</name>
								<size>2</size>
								<description>DSP firmware revision number</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_iface_dsp_sw_version_t::svnver">
								<name>svnver</name>
								<size>4</size>
								<description>Repository version of DSP software build, 32-bit field</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::PRIVLEV">
						<name>PRIVLEV</name>
						<value>0x07</value>
						<description>Privilege level on this MMP interface (requires password only if elevating from current privlev)</description>
						<subfield_list count="3" size="variable">
							<subfield order="0" id="mmp_iface_privlev_t::privlev">
								<name>privlev</name>
								<size>1</size>
								<description>The privilege level the MMP daemon is running at (affects ALL interfaces)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_privlev_t::pwlen">
								<name>pwlen</name>
								<size>1</size>
								<description>Length of the password string (SET only)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_iface_privlev_t::password">
								<name>password</name>
								<size>1</size>
								<description>The password to access the desired interface (SET only).  No password needed if lowering privlev from the current. [sizevar=pwlen]</description>
								<signed>1</signed>
								<array_size varid="mmp_iface_privlev_t::pwlen" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::FEATURE_KEY">
						<name>FEATURE_KEY</name>
						<value>0x09</value>
						<description>temporarily enable a feature key</description>
						<subfield_list count="1" size="16">
							<subfield order="0" id="mmp_iface_featurekey_t::key">
								<name>key</name>
								<size>1</size>
								<description></description>
								<signed>1</signed>
								<array_size>16</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="IFACE::UNIT_SERNO">
						<name>UNIT_SERNO</name>
						<value>0x0A</value>
						<description>Obtain the assembly serial number</description>
						<subfield_list count="1" size="4">
							<subfield order="0" id="mmp_iface_unit_serno_t::serno">
								<name>serno</name>
								<size>4</size>
								<description>Serial number of the assembly, 32-bit field</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::NTFY_COUNT">
						<name>NTFY_COUNT</name>
						<value>0x0B</value>
						<description>Enable, disable, or query the status of appended notification counter (unique on a per-interface basis)</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_iface_flag_enable_t::enable">
								<name>enable</name>
								<size>2</size>
								<description>Status of MMP post-script notification (appended to each notification message, unique per interface)</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::NTFY_CKSUM">
						<name>NTFY_CKSUM</name>
						<value>0x0C</value>
						<description>Enable, disable, or query the status of appended notification XOR checksum</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_iface_flag_enable_t::enable">
								<name>enable</name>
								<size>2</size>
								<description>Status of MMP post-script notification (appended to each notification message, unique per interface)</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="sn" id="IFACE::AES_USER_KEY">
						<name>AES_USER_KEY</name>
						<value>0x0D</value>
						<description>Set an AES user key for use with encrypted code images, along with an optional timeout.  If 0xFFFF is provided for the timeout value, the AES key and auto-clear timeouts are cleared.  An INVALID_STATE error will result if an attempt is made to install a new key over an existing one without first clearing it.</description>
						<subfield_list count="2" size="34">
							<subfield order="0" id="mmp_iface_aes_key_t::timeout_hrs">
								<name>timeout_hrs</name>
								<size>2</size>
								<description>Set to 0 for no expiry of the AES user key, otherwise set to the number of hours (up to 8760) the key should be valid while running an application. If set to 0xFFFF, it acts as a &quot;clear&quot; indicator and causes the user key and auto-reset timer to be cleared.  Other parameters will be ignored when this field is set to 0xFFFF.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_aes_key_t::key">
								<name>key</name>
								<size>2</size>
								<description>The AES user key to set, packed into big-endian 16-bit containers.  Set the first 128, 192, or 256 bits (8, 12, or 16 words) depending on the bit length of the encryption being used.</description>
								<signed>0</signed>
								<array_size>16</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="IFACE::COMPATIBILITY">
						<name>COMPATIBILITY</name>
						<value>0x0E</value>
						<description>A compatibility number used for syncing external controllers (such as ReleaseIT display) with a given range of software version.  This number may vary by platform and is intended primarily for Teledyne use.</description>
						<subfield_list count="2" size="2">
							<subfield order="0" id="mmp_iface_compatibility_t::compat_1">
								<name>compat_1</name>
								<size>1</size>
								<description>Compatibility number 1</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_compatibility_t::compat_2">
								<name>compat_2</name>
								<size>1</size>
								<description>Compatibility number 2</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="IFACE::FEATURE_KEY_INVENTORY">
						<name>FEATURE_KEY_INVENTORY</name>
						<value>0x0F</value>
						<description>Get the inventory of installed feature keys</description>
						<subfield_list count="3" size="variable">
							<subfield order="0" id="mmp_iface_featurekeyinventory_t::numkeys">
								<name>numkeys</name>
								<size>2</size>
								<description>The number of keys contained in this message</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_iface_featurekeyinventory_t::totlen">
								<name>totlen</name>
								<size>2</size>
								<description>The total length of the keys[] field (should be numkeys * 42)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_iface_featurekeyinventory_t::keys">
								<name>keys</name>
								<size>1</size>
								<description>Array containg all keys concatenated together, with each key occupying 41 bytes plus a null separator for a total of 42 bytes. [sizevar=totlen]</description>
								<signed>1</signed>
								<array_size varid="mmp_iface_featurekeyinventory_t::totlen" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="IFACE::GATE_DATA_DIRECTIONAL">
						<name>GATE_DATA_DIRECTIONAL</name>
						<value>0x10</value>
						<description>(DAT ONLY) Suppress output of DATA::DIRECTIONAL notify when vector is below vthesh.</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_iface_flag_enable_t::enable">
								<name>enable</name>
								<size>2</size>
								<description>Status of MMP post-script notification (appended to each notification message, unique per interface)</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="SREG">
				<name>SREG</name>
				<value>0x01</value>
				<description>S-Registers</description>
				<field_list count="23">
					<field operations="gn" id="SREG::VERSION">
						<name>VERSION</name>
						<value>0</value>
						<description>DSP SW version</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::POSACK">
						<name>POSACK</name>
						<value>2</value>
						<description>Positive acknowledgements</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::SERBAUD">
						<name>SERBAUD</name>
						<value>3</value>
						<description>Serial port baud &amp; configuration</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::ACOUBAUD">
						<name>ACOUBAUD</name>
						<value>4</value>
						<description>Acoustic baud rate</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::TXPOWER">
						<name>TXPOWER</name>
						<value>6</value>
						<description>Transmit power</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::RESPTIMEOUT">
						<name>RESPTIMEOUT</name>
						<value>7</value>
						<description>Acoustic response timeout</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::FWDDELAY">
						<name>FWDDELAY</name>
						<value>8</value>
						<description>Packet forwarding delay</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::COPROC">
						<name>COPROC</name>
						<value>9</value>
						<description>PSK coprocessor enable/status</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::LPTIMEOUT">
						<name>LPTIMEOUT</name>
						<value>10</value>
						<description>Low-power idle timeout</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::FLOWCTRL">
						<name>FLOWCTRL</name>
						<value>11</value>
						<description>Serial port flow control</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::TESTMSGLEN">
						<name>TESTMSGLEN</name>
						<value>12</value>
						<description>Acoustic test message length</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::VERBOSITY">
						<name>VERBOSITY</name>
						<value>13</value>
						<description>Console message verbosity</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::REMADDR">
						<name>REMADDR</name>
						<value>14</value>
						<description>Default remote modem address</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::LOCADDR">
						<name>LOCADDR</name>
						<value>18</value>
						<description>Local modem address</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::RXTHRESHOLD">
						<name>RXTHRESHOLD</name>
						<value>21</value>
						<description>Receive sensitivity threshold for transpond pings</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::BAND">
						<name>BAND</name>
						<value>24</value>
						<description>Acoustic band</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::TXPULSEWIDTH">
						<name>TXPULSEWIDTH</name>
						<value>32</value>
						<description>Transpond interrogation ping pulse width</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::RXPULSEWIDTH">
						<name>RXPULSEWIDTH</name>
						<value>33</value>
						<description>Transpond received ping pulse width</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::TAT">
						<name>TAT</name>
						<value>40</value>
						<description>Transponder/ranging turn-around time</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::PPSSYNC">
						<name>PPSSYNC</name>
						<value>49</value>
						<description>Internal/external 1 PPS time sync mode</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::RXFREQ">
						<name>RXFREQ</name>
						<value>53</value>
						<description>Transpond ping receive frequency (only for units that can&apos;t receive multiple frequencies)</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::XPNDLOCKOUT">
						<name>XPNDLOCKOUT</name>
						<value>55</value>
						<description>Transpond ping lockout time</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_sreg_fld_val_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<enumeration_list count="44">
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_LF">
										<name>MMP_SREG_BAND_LF</name>
										<value>56</value>
										<description>LF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_MF">
										<name>MMP_SREG_BAND_MF</name>
										<value>100</value>
										<description>MF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_C">
										<name>MMP_SREG_BAND_C</name>
										<value>141</value>
										<description>C band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_BAND_HF">
										<name>MMP_SREG_BAND_HF</name>
										<value>156</value>
										<description>HF band</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_8">
										<name>MMP_SREG_TESTMSGLEN_8</name>
										<value>0</value>
										<description>8 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_32">
										<name>MMP_SREG_TESTMSGLEN_32</name>
										<value>1</value>
										<description>32 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_128">
										<name>MMP_SREG_TESTMSGLEN_128</name>
										<value>2</value>
										<description>128 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_256">
										<name>MMP_SREG_TESTMSGLEN_256</name>
										<value>3</value>
										<description>256 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_512">
										<name>MMP_SREG_TESTMSGLEN_512</name>
										<value>4</value>
										<description>512 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_1024">
										<name>MMP_SREG_TESTMSGLEN_1024</name>
										<value>5</value>
										<description>1024 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_2048">
										<name>MMP_SREG_TESTMSGLEN_2048</name>
										<value>6</value>
										<description>2048 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MMP_SREG_TESTMSGLEN_4096">
										<name>MMP_SREG_TESTMSGLEN_4096</name>
										<value>7</value>
										<description>4096 byte test message</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_0DB">
										<name>TXATTEN_0DB</name>
										<value>0</value>
										<description>Full transmit power</description>
									</enumeration>
									<enumeration id="mmp_sreg_band_t::TXATTEN_24DB">
										<name>TXATTEN_24DB</name>
										<value>1</value>
										<description>(approximately) 24 dB attenuation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="SREG::ALL">
						<name>ALL</name>
						<value>255</value>
						<description>Use to SET/GET all S-registers at once</description>
						<subfield_list count="1" size="120">
							<subfield order="0" id="mmp_sreg_fld_val_all_t::val">
								<name>val</name>
								<size>2</size>
								<description>S-register value</description>
								<signed>0</signed>
								<array_size>60</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="DECKBOX">
				<name>DECKBOX</name>
				<value>0x02</value>
				<description>Deck box-specific data/notifications</description>
				<field_list count="7">
					<field operations="gsn" id="DECKBOX::SPKRVOL">
						<name>SPKRVOL</name>
						<value>0x00</value>
						<description>Speaker volume</description>
						<subfield_list count="2" size="2">
							<subfield order="0" id="mmp_spkr_phones_vol_t::volume">
								<name>volume</name>
								<size>1</size>
								<description>Volume of audio device</description>
								<signed>0</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_u8_bit_range_t::val_8_bit">
										<name>val_8_bit</name>
										<value>0</value>
										<description>0 to 255</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_spkr_phones_vol_t::mute">
								<name>mute</name>
								<size>1</size>
								<description>True if audio device muted</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="DECKBOX::PHONESVOL">
						<name>PHONESVOL</name>
						<value>0x01</value>
						<description>Headphones volume</description>
						<subfield_list count="2" size="2">
							<subfield order="0" id="mmp_spkr_phones_vol_t::volume">
								<name>volume</name>
								<size>1</size>
								<description>Volume of audio device</description>
								<signed>0</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_u8_bit_range_t::val_8_bit">
										<name>val_8_bit</name>
										<value>0</value>
										<description>0 to 255</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_spkr_phones_vol_t::mute">
								<name>mute</name>
								<size>1</size>
								<description>True if audio device muted</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DECKBOX::PWRSENSE">
						<name>PWRSENSE</name>
						<value>0x02</value>
						<description>Power source information</description>
						<subfield_list count="3" size="4">
							<subfield order="0" id="mmp_pwrsense_t::device">
								<name>device</name>
								<size>2</size>
								<description>Power source currently in use on deck box</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_deckbox_pwrsense_device_t::MMP_DECKBOX_PWRSENSE_DEVICE_BATT">
										<name>MMP_DECKBOX_PWRSENSE_DEVICE_BATT</name>
										<value>0</value>
										<description>Using internal batteries</description>
									</enumeration>
									<enumeration id="mmp_deckbox_pwrsense_device_t::MMP_DECKBOX_PWRSENSE_DEVICE_AC">
										<name>MMP_DECKBOX_PWRSENSE_DEVICE_AC</name>
										<value>1</value>
										<description>Using external AC power</description>
									</enumeration>
									<enumeration id="mmp_deckbox_pwrsense_device_t::MMP_DECKBOX_PWRSENSE_DEVICE_AUXDC">
										<name>MMP_DECKBOX_PWRSENSE_DEVICE_AUXDC</name>
										<value>2</value>
										<description>Using external DC power</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_pwrsense_t::charge">
								<name>charge</name>
								<size>1</size>
								<description>Coarse internal battery charge level while charging</description>
								<signed>0</signed>
								<enumeration_list count="4">
									<enumeration id="mmp_deckbox_pwrsense_charge_t::MMP_DECKBOX_PWRSENSE_CHARGE_LT80">
										<name>MMP_DECKBOX_PWRSENSE_CHARGE_LT80</name>
										<value>2</value>
										<description>Battery less than 80% charge </description>
									</enumeration>
									<enumeration id="mmp_deckbox_pwrsense_charge_t::MMP_DECKBOX_PWRSENSE_CHARGE_GE80">
										<name>MMP_DECKBOX_PWRSENSE_CHARGE_GE80</name>
										<value>4</value>
										<description>Battery at least 80% charged</description>
									</enumeration>
									<enumeration id="mmp_deckbox_pwrsense_charge_t::MMP_DECKBOX_PWRSENSE_CHARGE_FULL">
										<name>MMP_DECKBOX_PWRSENSE_CHARGE_FULL</name>
										<value>5</value>
										<description>Battery fully charged</description>
									</enumeration>
									<enumeration id="mmp_deckbox_pwrsense_charge_t::MMP_DECKBOX_PWRSENSE_CHARGE_OFFSET">
										<name>MMP_DECKBOX_PWRSENSE_CHARGE_OFFSET</name>
										<value>20</value>
										<description>For use with smart batteries that can report to 1% accuracy: if the charge percentage is equal to or above this value, then subtract the offset and use the number directly.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_pwrsense_t::charging">
								<name>charging</name>
								<size>1</size>
								<description>True if internal batteries are charging</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DECKBOX::BATTLEV">
						<name>BATTLEV</name>
						<value>0x03</value>
						<description>Internal battery level (rough percentage); a &quot;critical&quot; battery level will trigger a spontaneous MMP notification</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_battlev_t::charge">
								<name>charge</name>
								<size>2</size>
								<description>Coarse internal battery charge level remaining</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_0">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_0</name>
										<value>0</value>
										<description>Battery completely drained</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_20">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_20</name>
										<value>1</value>
										<description>Battery 20% charge remaining</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_40">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_40</name>
										<value>2</value>
										<description>Battery 40% charge remaining</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_60">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_60</name>
										<value>3</value>
										<description>Battery 60% charge remaining</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_80">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_80</name>
										<value>4</value>
										<description>Battery 80% charge remaining</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_100">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_100</name>
										<value>5</value>
										<description>Battery fully charged</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_CRITICAL">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_CRITICAL</name>
										<value>6</value>
										<description>Battery critically low, auto-shut-down impending (triggers spontaneous MMP notification)</description>
									</enumeration>
									<enumeration id="mmp_deckbox_battlev_charge_t::MMP_DECKBOX_BATTLEV_CHARGE_OFFSET">
										<name>MMP_DECKBOX_BATTLEV_CHARGE_OFFSET</name>
										<value>20</value>
										<description>For use with smart batteries that can report to 1% accuracy: if the charge percentage is equal to or above this value, then subtract the offset and use the number directly.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DECKBOX::BATTVOLT">
						<name>BATTVOLT</name>
						<value>0x04</value>
						<description>Internal battery voltage</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_battvolt_t::volts_x_100">
								<name>volts_x_100</name>
								<size>2</size>
								<description>Internal battery voltage in 1/100 volt units</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DECKBOX::MODEL">
						<name>MODEL</name>
						<value>0x05</value>
						<description>Deck box model</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_udb_model_t::model">
								<name>model</name>
								<size>2</size>
								<description>Identifies the deck box model variant</description>
								<signed>0</signed>
								<enumeration_list count="14">
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_UNKNOWN">
										<name>MMP_DECKBOX_MODEL_UNKNOWN</name>
										<value>0</value>
										<description>Unknown deck box model</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM">
										<name>MMP_DECKBOX_MODEL_MODEM</name>
										<value>1</value>
										<description>UTS/UDB M variant, fully featured</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_RELEASE">
										<name>MMP_DECKBOX_MODEL_RELEASE</name>
										<value>2</value>
										<description>UTS/UDB A variant, acoustic releases only</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_L3">
										<name>MMP_DECKBOX_MODEL_MODEM_L3</name>
										<value>3</value>
										<description>UDB-9000L3 special</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_SW">
										<name>MMP_DECKBOX_MODEL_MODEM_SW</name>
										<value>4</value>
										<description>UDB-9000SW special</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_EXPORT">
										<name>MMP_DECKBOX_MODEL_MODEM_EXPORT</name>
										<value>5</value>
										<description>UTS/UDB E variant export model (no multi-frequency transpond receive)</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_BONITO">
										<name>MMP_DECKBOX_MODEL_MODEM_BONITO</name>
										<value>6</value>
										<description>UTS/UDB-9400BN modem-enabled with BONITO Open Network Interface to Off-board systems (BONITO)</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_DR">
										<name>MMP_DECKBOX_MODEL_MODEM_DR</name>
										<value>7</value>
										<description>UDB-9000DR modem-enabled with Data Recorder (OBSOLETE)</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_NR">
										<name>MMP_DECKBOX_MODEL_MODEM_NR</name>
										<value>8</value>
										<description>UDB-9000NR modem-enabled with NUWC Ranging</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_BN">
										<name>MMP_DECKBOX_MODEL_MODEM_BN</name>
										<value>9</value>
										<description>UDB-9400BN modem enabled with Benthonet networking</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_LITE">
										<name>MMP_DECKBOX_MODEL_MODEM_LITE</name>
										<value>10</value>
										<description>UTS ML variant, fully featured with &quot;lite&quot; UI</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_MODEM_EXPORT_LITE">
										<name>MMP_DECKBOX_MODEL_MODEM_EXPORT_LITE</name>
										<value>11</value>
										<description>UTS EL variant, export model with &quot;lite&quot; UI (no multi-frequency transpond receive)</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_RELEASE_LITE">
										<name>MMP_DECKBOX_MODEL_RELEASE_LITE</name>
										<value>12</value>
										<description>UTS AL variant, acoustic release only with &quot;lite&quot; UI</description>
									</enumeration>
									<enumeration id="mmp_deckbox_model_t::MMP_DECKBOX_MODEL_ROPELESS_FISHING">
										<name>MMP_DECKBOX_MODEL_ROPELESS_FISHING</name>
										<value>13</value>
										<description>UTS RF variant, for ropeless fishing applications</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="DECKBOX::GPS_RELAY">
						<name>GPS_RELAY</name>
						<value>0x06</value>
						<description>GPS pass-through mode on display module (for tunneling external GPS time sync data through to modem - disables most display functions, only supported on some hardware configurations)</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_gps_relay_t::status">
								<name>status</name>
								<size>2</size>
								<description>Flag indicating GPS pass-through mode status</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_gps_relay_mode_t::MMP_DECKBOX_GPS_RELAY_DISABLED">
										<name>MMP_DECKBOX_GPS_RELAY_DISABLED</name>
										<value>0</value>
										<description></description>
									</enumeration>
									<enumeration id="mmp_gps_relay_mode_t::MMP_DECKBOX_GPS_RELAY_ENABLED">
										<name>MMP_DECKBOX_GPS_RELAY_ENABLED</name>
										<value>1</value>
										<description></description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="DATA">
				<name>DATA</name>
				<value>0x04</value>
				<description>Data packets and other general notifications</description>
				<field_list count="31">
					<field operations="n" id="DATA::ACK">
						<name>ACK</name>
						<value>0x00</value>
						<description>Data ACK from remote modem received</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_data_ack_t::ack">
								<name>ack</name>
								<size>2</size>
								<description>Type of acknowledgement</description>
								<signed>0</signed>
								<enumeration_list count="19">
									<enumeration id="ack_code_t::OK">
										<name>OK</name>
										<value>0</value>
										<description>Operation successful</description>
									</enumeration>
									<enumeration id="ack_code_t::BUFFER_EMPTY">
										<name>BUFFER_EMPTY</name>
										<value>1</value>
										<description>Nothing in data logger</description>
									</enumeration>
									<enumeration id="ack_code_t::BLOCK_EMPTY">
										<name>BLOCK_EMPTY</name>
										<value>2</value>
										<description>Nothing in requested block of data logger</description>
									</enumeration>
									<enumeration id="ack_code_t::INVALID_SETTING">
										<name>INVALID_SETTING</name>
										<value>3</value>
										<description>Invalid setting</description>
									</enumeration>
									<enumeration id="ack_code_t::INVALID_RELEASE_CODE">
										<name>INVALID_RELEASE_CODE</name>
										<value>4</value>
										<description>Invalid release code</description>
									</enumeration>
									<enumeration id="ack_code_t::GOOD_RELEASE">
										<name>GOOD_RELEASE</name>
										<value>5</value>
										<description>Mechanical release successful</description>
									</enumeration>
									<enumeration id="ack_code_t::VALID_RELEASE_CODE">
										<name>VALID_RELEASE_CODE</name>
										<value>6</value>
										<description>Received valid release code, activating motor</description>
									</enumeration>
									<enumeration id="ack_code_t::NOT_RELEASED">
										<name>NOT_RELEASED</name>
										<value>7</value>
										<description>Unit not released</description>
									</enumeration>
									<enumeration id="ack_code_t::BUSY">
										<name>BUSY</name>
										<value>8</value>
										<description>Unit busy</description>
									</enumeration>
									<enumeration id="ack_code_t::VALID_RELEASE_CODE_BURN">
										<name>VALID_RELEASE_CODE_BURN</name>
										<value>9</value>
										<description>Received valid release code, beginning burn wire burn cycle</description>
									</enumeration>
									<enumeration id="ack_code_t::GOOD_BURN_RELEASE">
										<name>GOOD_BURN_RELEASE</name>
										<value>10</value>
										<description>Burn wire burn cycle completed successfully</description>
									</enumeration>
									<enumeration id="ack_code_t::BURN_RELEASE_TIMEOUT">
										<name>BURN_RELEASE_TIMEOUT</name>
										<value>11</value>
										<description>Burn wire burn cycle stopped due to timeout, no tilt detected</description>
									</enumeration>
									<enumeration id="ack_code_t::SREG_SAVED">
										<name>SREG_SAVED</name>
										<value>12</value>
										<description>Remote S-register saved</description>
									</enumeration>
									<enumeration id="ack_code_t::DATALOG_NOT_SUPPORTED">
										<name>DATALOG_NOT_SUPPORTED</name>
										<value>13</value>
										<description>Datalogger not supported on this unit</description>
									</enumeration>
									<enumeration id="ack_code_t::DATALOG_ERASE_STARTED">
										<name>DATALOG_ERASE_STARTED</name>
										<value>14</value>
										<description>Datalogger erase started</description>
									</enumeration>
									<enumeration id="ack_code_t::INVALID_ACOUSTIC_TRIGGER_CODE">
										<name>INVALID_ACOUSTIC_TRIGGER_CODE</name>
										<value>15</value>
										<description>Invalid trigger code</description>
									</enumeration>
									<enumeration id="ack_code_t::VALID_ACOUSTIC_TRIGGER_CODE">
										<name>VALID_ACOUSTIC_TRIGGER_CODE</name>
										<value>16</value>
										<description>Received valid acoustic trigger code, asserting signal</description>
									</enumeration>
									<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_CONFIRMED">
										<name>ACOUSTIC_TRIGGER_CONFIRMED</name>
										<value>17</value>
										<description>Acoustic trigger confirmed (signal may or may not be de-asserted depending on configuration)</description>
									</enumeration>
									<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_TIMEOUT">
										<name>ACOUSTIC_TRIGGER_TIMEOUT</name>
										<value>18</value>
										<description>Acoustic trigger timed out with no confirmation, signal de-asserted</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::REMOTE_DATA">
						<name>REMOTE_DATA</name>
						<value>0x01</value>
						<description>Data packet from remote modem received</description>
						<subfield_list count="5" size="variable">
							<subfield order="0" id="mmp_remote_data_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of sending modem</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_remote_data_t::transport">
								<name>transport</name>
								<size>2</size>
								<description>Transport address, if any</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_remote_data_t::invalid_blks">
								<name>invalid_blks</name>
								<size>2</size>
								<description>Raised bits in this field correspond to corrupted 256-byte subblocks of the transfer</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_remote_data_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data in bytes</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_remote_data_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field containing received data [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_remote_data_t::len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::XMIT_OVERTEMP">
						<name>XMIT_OVERTEMP</name>
						<value>0x02</value>
						<description>Overtemp condition on transmit</description>
						<subfield_list count="2" size="4">
							<subfield order="0" id="mmp_data_xmit_overtemp_t::sensor">
								<name>sensor</name>
								<size>2</size>
								<description>Which temperature sensor triggered the alert (only sensor 0 present on ATM and Compact board sets, while both 0 and 1 are available on UTS/UDB platforms)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_data_xmit_overtemp_t::setpoint_x_100">
								<name>setpoint_x_100</name>
								<size>2</size>
								<description>The setpoint in degrees C x 100 that was exceeded</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::BURN_COMPLETE">
						<name>BURN_COMPLETE</name>
						<value>0x03</value>
						<description>Release burn-wire burn cycle active, tilt detected (unit release)</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_burn_complete_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of the modem that has completed the burn cycle</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DATA::TRRC_STATUS">
						<name>TRRC_STATUS</name>
						<value>0x04</value>
						<description>Information on T/R board and RCV module</description>
						<subfield_list count="4" size="8">
							<subfield order="0" id="mmp_data_trrc_status_t::tr_read_fail">
								<name>tr_read_fail</name>
								<size>2</size>
								<description>Transmit/Receive EEPROM could not be read</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_data_trrc_status_t::rc_read_fail">
								<name>rc_read_fail</name>
								<size>2</size>
								<description>Receive module EEPROM could not be read</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_data_trrc_status_t::tr_band_fail">
								<name>tr_band_fail</name>
								<size>2</size>
								<description>Configured band does not match T/R&apos;s EEPROM data</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_data_trrc_status_t::rc_band_fail">
								<name>rc_band_fail</name>
								<size>2</size>
								<description>Configured band does not match receive module EEPROM data</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DATA::FEAT_KEY_STATUS">
						<name>FEAT_KEY_STATUS</name>
						<value>0x05</value>
						<description>Information on feature authorization keys</description>
						<subfield_list count="4" size="16">
							<subfield order="0" id="mmp_data_feat_key_status_t::available_features">
								<name>available_features</name>
								<size>4</size>
								<description>Bit flag of key-activatable features available on this platform</description>
								<signed>0</signed>
								<enumeration_list count="9">
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MODEM_DATA">
										<name>FEAT_FLAG_MODEM_DATA</name>
										<value>0x01</value>
										<description>Bit flag for Modem Data feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MULTI_XPND_RX">
										<name>FEAT_FLAG_MULTI_XPND_RX</name>
										<value>0x02</value>
										<description>Bit flag for multi ping transpond receive feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DAT_BEARING">
										<name>FEAT_FLAG_DAT_BEARING</name>
										<value>0x04</value>
										<description>Bit flag for DAT Bearing feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_WAVE_PLAY">
										<name>FEAT_FLAG_WAVE_PLAY</name>
										<value>0x08</value>
										<description>Bit flag for arbitrary waveform play feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DUAL_UART">
										<name>FEAT_FLAG_DUAL_UART</name>
										<value>0x10</value>
										<description>Bit flag for dual serial port input feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_INBAND_RECORD">
										<name>FEAT_FLAG_INBAND_RECORD</name>
										<value>0x20</value>
										<description>Bit flag for inband recorder feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_LOW_OUTPUT_PWR">
										<name>FEAT_FLAG_LOW_OUTPUT_PWR</name>
										<value>0x200</value>
										<description>Bit flag for enabling -24 dB attenuation mode on transmit</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_UTS_GNSS_SUPPORT">
										<name>FEAT_FLAG_UTS_GNSS_SUPPORT</name>
										<value>0x400</value>
										<description>Bit flag for enabling external GNSS devices on the UTS platforms that can support it</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_GAPS_EMULATION">
										<name>FEAT_FLAG_GAPS_EMULATION</name>
										<value>0x800</value>
										<description>Bit flag for enabling GAPS emulation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_data_feat_key_status_t::expected_features">
								<name>expected_features</name>
								<size>4</size>
								<description>Bit flag of feature keys expected on this platform</description>
								<signed>0</signed>
								<enumeration_list count="9">
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MODEM_DATA">
										<name>FEAT_FLAG_MODEM_DATA</name>
										<value>0x01</value>
										<description>Bit flag for Modem Data feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MULTI_XPND_RX">
										<name>FEAT_FLAG_MULTI_XPND_RX</name>
										<value>0x02</value>
										<description>Bit flag for multi ping transpond receive feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DAT_BEARING">
										<name>FEAT_FLAG_DAT_BEARING</name>
										<value>0x04</value>
										<description>Bit flag for DAT Bearing feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_WAVE_PLAY">
										<name>FEAT_FLAG_WAVE_PLAY</name>
										<value>0x08</value>
										<description>Bit flag for arbitrary waveform play feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DUAL_UART">
										<name>FEAT_FLAG_DUAL_UART</name>
										<value>0x10</value>
										<description>Bit flag for dual serial port input feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_INBAND_RECORD">
										<name>FEAT_FLAG_INBAND_RECORD</name>
										<value>0x20</value>
										<description>Bit flag for inband recorder feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_LOW_OUTPUT_PWR">
										<name>FEAT_FLAG_LOW_OUTPUT_PWR</name>
										<value>0x200</value>
										<description>Bit flag for enabling -24 dB attenuation mode on transmit</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_UTS_GNSS_SUPPORT">
										<name>FEAT_FLAG_UTS_GNSS_SUPPORT</name>
										<value>0x400</value>
										<description>Bit flag for enabling external GNSS devices on the UTS platforms that can support it</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_GAPS_EMULATION">
										<name>FEAT_FLAG_GAPS_EMULATION</name>
										<value>0x800</value>
										<description>Bit flag for enabling GAPS emulation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_data_feat_key_status_t::enabled_features">
								<name>enabled_features</name>
								<size>4</size>
								<description>Bit flag of all features with valid authorization keys installed, irrespective of available_features</description>
								<signed>0</signed>
								<enumeration_list count="9">
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MODEM_DATA">
										<name>FEAT_FLAG_MODEM_DATA</name>
										<value>0x01</value>
										<description>Bit flag for Modem Data feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MULTI_XPND_RX">
										<name>FEAT_FLAG_MULTI_XPND_RX</name>
										<value>0x02</value>
										<description>Bit flag for multi ping transpond receive feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DAT_BEARING">
										<name>FEAT_FLAG_DAT_BEARING</name>
										<value>0x04</value>
										<description>Bit flag for DAT Bearing feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_WAVE_PLAY">
										<name>FEAT_FLAG_WAVE_PLAY</name>
										<value>0x08</value>
										<description>Bit flag for arbitrary waveform play feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DUAL_UART">
										<name>FEAT_FLAG_DUAL_UART</name>
										<value>0x10</value>
										<description>Bit flag for dual serial port input feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_INBAND_RECORD">
										<name>FEAT_FLAG_INBAND_RECORD</name>
										<value>0x20</value>
										<description>Bit flag for inband recorder feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_LOW_OUTPUT_PWR">
										<name>FEAT_FLAG_LOW_OUTPUT_PWR</name>
										<value>0x200</value>
										<description>Bit flag for enabling -24 dB attenuation mode on transmit</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_UTS_GNSS_SUPPORT">
										<name>FEAT_FLAG_UTS_GNSS_SUPPORT</name>
										<value>0x400</value>
										<description>Bit flag for enabling external GNSS devices on the UTS platforms that can support it</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_GAPS_EMULATION">
										<name>FEAT_FLAG_GAPS_EMULATION</name>
										<value>0x800</value>
										<description>Bit flag for enabling GAPS emulation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_data_feat_key_status_t::unauthorized_features">
								<name>unauthorized_features</name>
								<size>4</size>
								<description>Bit flag of EXPECTED (not all) features with no authorization keys</description>
								<signed>0</signed>
								<enumeration_list count="9">
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MODEM_DATA">
										<name>FEAT_FLAG_MODEM_DATA</name>
										<value>0x01</value>
										<description>Bit flag for Modem Data feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_MULTI_XPND_RX">
										<name>FEAT_FLAG_MULTI_XPND_RX</name>
										<value>0x02</value>
										<description>Bit flag for multi ping transpond receive feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DAT_BEARING">
										<name>FEAT_FLAG_DAT_BEARING</name>
										<value>0x04</value>
										<description>Bit flag for DAT Bearing feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_WAVE_PLAY">
										<name>FEAT_FLAG_WAVE_PLAY</name>
										<value>0x08</value>
										<description>Bit flag for arbitrary waveform play feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_DUAL_UART">
										<name>FEAT_FLAG_DUAL_UART</name>
										<value>0x10</value>
										<description>Bit flag for dual serial port input feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_INBAND_RECORD">
										<name>FEAT_FLAG_INBAND_RECORD</name>
										<value>0x20</value>
										<description>Bit flag for inband recorder feature</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_LOW_OUTPUT_PWR">
										<name>FEAT_FLAG_LOW_OUTPUT_PWR</name>
										<value>0x200</value>
										<description>Bit flag for enabling -24 dB attenuation mode on transmit</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_UTS_GNSS_SUPPORT">
										<name>FEAT_FLAG_UTS_GNSS_SUPPORT</name>
										<value>0x400</value>
										<description>Bit flag for enabling external GNSS devices on the UTS platforms that can support it</description>
									</enumeration>
									<enumeration id="modem_feature_bitflag_t::FEAT_FLAG_GAPS_EMULATION">
										<name>FEAT_FLAG_GAPS_EMULATION</name>
										<value>0x800</value>
										<description>Bit flag for enabling GAPS emulation</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::REMOTE_HEADER">
						<name>REMOTE_HEADER</name>
						<value>0x06</value>
						<description>Header information on packets received</description>
						<subfield_list count="8" size="8">
							<subfield order="0" id="mmp_data_remote_header_t::type">
								<name>type</name>
								<size>1</size>
								<description>1 0x0F for data  : 0x00 for command</description>
								<signed>0</signed>
								<enumeration_list count="16">
									<enumeration id="std_layer2_command_t::L2CMD_875C">
										<name>L2CMD_875C</name>
										<value>0</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED1">
										<name>L2CMD_UNUSED1</name>
										<value>1</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED2">
										<name>L2CMD_UNUSED2</name>
										<value>2</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_NUWC_RNG">
										<name>L2CMD_NUWC_RNG</name>
										<value>3</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_BRG_DATA">
										<name>L2CMD_BRG_DATA</name>
										<value>4</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_875D_TRANSPORT">
										<name>L2CMD_875D_TRANSPORT</name>
										<value>5</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED6">
										<name>L2CMD_UNUSED6</name>
										<value>6</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED7">
										<name>L2CMD_UNUSED7</name>
										<value>7</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED8">
										<name>L2CMD_UNUSED8</name>
										<value>8</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED9">
										<name>L2CMD_UNUSED9</name>
										<value>9</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_UNUSED10">
										<name>L2CMD_UNUSED10</name>
										<value>10</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_SRQ">
										<name>L2CMD_SRQ</name>
										<value>11</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_FHC">
										<name>L2CMD_FHC</name>
										<value>12</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_FHD">
										<name>L2CMD_FHD</name>
										<value>13</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_DATA">
										<name>L2CMD_DATA</name>
										<value>14</value>
										<description></description>
									</enumeration>
									<enumeration id="std_layer2_command_t::L2CMD_875D">
										<name>L2CMD_875D</name>
										<value>15</value>
										<description></description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_data_remote_header_t::extension">
								<name>extension</name>
								<size>1</size>
								<description>2 MSB of modspec : command type</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_data_remote_header_t::parm1">
								<name>parm1</name>
								<size>1</size>
								<description>3 LSB of modspec : p1</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_data_remote_header_t::parm2">
								<name>parm2</name>
								<size>1</size>
								<description>4 MSB of length  : p2</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_data_remote_header_t::parm3">
								<name>parm3</name>
								<size>1</size>
								<description>5 MSB of length  : p3</description>
								<signed>0</signed>
							</subfield>
							<subfield order="5" id="mmp_data_remote_header_t::Rx_addr">
								<name>Rx_addr</name>
								<size>1</size>
								<description>6 destination address</description>
								<signed>0</signed>
							</subfield>
							<subfield order="6" id="mmp_data_remote_header_t::Tx_addr">
								<name>Tx_addr</name>
								<size>1</size>
								<description>7 source address</description>
								<signed>0</signed>
							</subfield>
							<subfield order="7" id="mmp_data_remote_header_t::CRC">
								<name>CRC</name>
								<size>1</size>
								<description>8 cyclic redundacy check</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::TIMESTAMP">
						<name>TIMESTAMP</name>
						<value>0x07</value>
						<description>Timestamp notification for a rx or tx event</description>
						<subfield_list count="5" size="10">
							<subfield order="0" id="mmp_data_timestamp_t::event">
								<name>event</name>
								<size>2</size>
								<description>event type</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_timestamp_event_t::MMP_TIMESTAMP_EVENT_TX">
										<name>MMP_TIMESTAMP_EVENT_TX</name>
										<value>0</value>
										<description>TX</description>
									</enumeration>
									<enumeration id="mmp_timestamp_event_t::MMP_TIMESTAMP_EVENT_RX">
										<name>MMP_TIMESTAMP_EVENT_RX</name>
										<value>1</value>
										<description>RX</description>
									</enumeration>
									<enumeration id="mmp_timestamp_event_t::MMP_TIMESTAMP_EVENT_TX_SYNC">
										<name>MMP_TIMESTAMP_EVENT_TX_SYNC</name>
										<value>2</value>
										<description>Captured timestamp of external Tx Sync signal</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_data_timestamp_t::hour">
								<name>hour</name>
								<size>2</size>
								<description>hours</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_data_timestamp_t::min">
								<name>min</name>
								<size>2</size>
								<description>minutes</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_data_timestamp_t::sec">
								<name>sec</name>
								<size>2</size>
								<description>seconds</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_data_timestamp_t::msec10">
								<name>msec10</name>
								<size>2</size>
								<description>10ths of milliseconds</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::DOPPLER">
						<name>DOPPLER</name>
						<value>0x08</value>
						<description>Doppler speed information from tones</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_data_doppler_t::speed">
								<name>speed</name>
								<size>2</size>
								<description>Doppler speed in 1/10 knots</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::BURN_TIMEOUT">
						<name>BURN_TIMEOUT</name>
						<value>0x09</value>
						<description>Release burn-wire cycle timed out with no tilt</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_burn_complete_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of the modem that has completed the burn cycle</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::DIRECTIONAL">
						<name>DIRECTIONAL</name>
						<value>0x0A</value>
						<description>(DAT ONLY) Information locally from a DAT</description>
						<subfield_list count="12" size="28">
							<subfield order="0" id="mmp_data_directional_t::raw_bearing">
								<name>raw_bearing</name>
								<size>2</size>
								<description>raw bearing from transducer in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_data_directional_t::raw_elevation">
								<name>raw_elevation</name>
								<size>2</size>
								<description>raw elevation from transducer in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_data_directional_t::cal_bearing">
								<name>cal_bearing</name>
								<size>2</size>
								<description>vehicle relative bearing in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="3" id="mmp_data_directional_t::cal_elevation">
								<name>cal_elevation</name>
								<size>2</size>
								<description>vehicle relative elevation in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="4" id="mmp_data_directional_t::bearing">
								<name>bearing</name>
								<size>2</size>
								<description>fully corrected bearing in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="5" id="mmp_data_directional_t::elevation">
								<name>elevation</name>
								<size>2</size>
								<description>fully corrected elevation in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="6" id="mmp_data_directional_t::range">
								<name>range</name>
								<size>2</size>
								<description>one way range in tenths of a meter</description>
								<signed>0</signed>
							</subfield>
							<subfield order="7" id="mmp_data_directional_t::compass">
								<name>compass</name>
								<size>2</size>
								<description>compass heading in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="8" id="mmp_data_directional_t::pitch">
								<name>pitch</name>
								<size>2</size>
								<description>compass pitch in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="9" id="mmp_data_directional_t::roll">
								<name>roll</name>
								<size>2</size>
								<description>compass roll in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="10" id="mmp_data_directional_t::latitude">
								<name>latitude</name>
								<size>4</size>
								<description>GPS latitude in millionths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="11" id="mmp_data_directional_t::longitude">
								<name>longitude</name>
								<size>4</size>
								<description>GPS latitude in millionths of a degree</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::FPM_VERSION">
						<name>FPM_VERSION</name>
						<value>0x0B</value>
						<description>Floating point co-processor module version</description>
						<subfield_list count="2" size="2">
							<subfield order="0" id="mmp_data_fpm_version_t::ver_major">
								<name>ver_major</name>
								<size>1</size>
								<description>Major revision number</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_data_fpm_version_t::ver_minor">
								<name>ver_minor</name>
								<size>1</size>
								<description>Minor revision number</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::PSK_PKT_NO_COPROC">
						<name>PSK_PKT_NO_COPROC</name>
						<value>0x0C</value>
						<description>Notification that a PSK packet was received but FPM coprocessor is not present/enabled.</description>
					</field>
					<field operations="n" id="DATA::LOW_POWER">
						<name>LOW_POWER</name>
						<value>0x0D</value>
						<description>Notification of the modem entering or exiting low power mode</description>
						<subfield_list count="3" size="8">
							<subfield order="0" id="mmp_data_lowpower_t::lpstat">
								<name>lpstat</name>
								<size>2</size>
								<description>Low power status (enter/exit)</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_lowpower_lpstat_t::MMP_LOWPOWER_LPSTAT_EXIT">
										<name>MMP_LOWPOWER_LPSTAT_EXIT</name>
										<value>0</value>
										<description>Signifies exiting low power mode</description>
									</enumeration>
									<enumeration id="mmp_lowpower_lpstat_t::MMP_LOWPOWER_LPSTAT_ENTER">
										<name>MMP_LOWPOWER_LPSTAT_ENTER</name>
										<value>1</value>
										<description>Signifies entering low power mode</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_data_lowpower_t::waketype">
								<name>waketype</name>
								<size>2</size>
								<description>Wake type that cause low power mode to end (only valid when exiting LP mode)</description>
								<signed>0</signed>
								<enumeration_list count="7">
									<enumeration id="wake_type_t::WAKE_TYPE_NULL">
										<name>WAKE_TYPE_NULL</name>
										<value>0</value>
										<description>No wakeup</description>
									</enumeration>
									<enumeration id="wake_type_t::WAKE_TYPE_UART">
										<name>WAKE_TYPE_UART</name>
										<value>1</value>
										<description>Wake up from UART input</description>
									</enumeration>
									<enumeration id="wake_type_t::WAKE_TYPE_TIME">
										<name>WAKE_TYPE_TIME</name>
										<value>2</value>
										<description>Wake up due to expiry of pre-set timer</description>
									</enumeration>
									<enumeration id="wake_type_t::WAKE_TYPE_ACOU">
										<name>WAKE_TYPE_ACOU</name>
										<value>3</value>
										<description>Wake up due to acoustic wake tones</description>
									</enumeration>
									<enumeration id="wake_type_t::WAKE_TYPE_ALARM">
										<name>WAKE_TYPE_ALARM</name>
										<value>4</value>
										<description>Wake up due RTC alarm</description>
									</enumeration>
									<enumeration id="wake_type_t::WAKE_TYPE_BATTLIFE">
										<name>WAKE_TYPE_BATTLIFE</name>
										<value>5</value>
										<description>Wake up to update battery life monitoring</description>
									</enumeration>
									<enumeration id="wake_type_t::WAKE_TYPE_NO_SLEEP">
										<name>WAKE_TYPE_NO_SLEEP</name>
										<value>6</value>
										<description>Sleep mode not defined - did not sleep</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_data_lowpower_t::sleep_secs">
								<name>sleep_secs</name>
								<size>4</size>
								<description>Number of seconds modem was in low power mode (on exit) or the number of seconds the modem will sleep for (if entering low power mode with timed wakeup)</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::ACSTATS">
						<name>ACSTATS</name>
						<value>0x0E</value>
						<description>Acoustic statistics for the packet being received</description>
						<subfield_list count="14" size="28">
							<subfield order="0" id="mmp_data_acstats_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of remote modem sending data</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_data_acstats_t::mod_spec">
								<name>mod_spec</name>
								<size>2</size>
								<description>Modulation specification</description>
								<signed>0</signed>
								<enumeration_list count="20">
									<enumeration id="modspec_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_data_acstats_t::speedx10">
								<name>speedx10</name>
								<size>2</size>
								<description>Estimated speed (doppler) in 1/10 knots units    </description>
								<signed>1</signed>
							</subfield>
							<subfield order="3" id="mmp_data_acstats_t::acq_SNRx10">
								<name>acq_SNRx10</name>
								<size>2</size>
								<description>Acquisition SNR x 10 (factory use only)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="4" id="mmp_data_acstats_t::acq_MPDx10">
								<name>acq_MPDx10</name>
								<size>2</size>
								<description>Acquisition multipath delay in 1/10 ms units</description>
								<signed>0</signed>
							</subfield>
							<subfield order="5" id="mmp_data_acstats_t::acq_RCT">
								<name>acq_RCT</name>
								<size>2</size>
								<description>Received chirp threshold (factory use only)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="6" id="mmp_data_acstats_t::acq_FSNR">
								<name>acq_FSNR</name>
								<size>2</size>
								<description>First SNR (factory use only)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="7" id="mmp_data_acstats_t::hdr_SNRx10">
								<name>hdr_SNRx10</name>
								<size>2</size>
								<description>Header SNR x 10</description>
								<signed>1</signed>
							</subfield>
							<subfield order="8" id="mmp_data_acstats_t::hdr_CCERR">
								<name>hdr_CCERR</name>
								<size>2</size>
								<description>Soft decision metric for convolutional decoder (factory use only)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="9" id="mmp_data_acstats_t::msg_ERR">
								<name>msg_ERR</name>
								<size>2</size>
								<description>Bit errors in message body - Only applies to test messages from ATX or ATY</description>
								<signed>0</signed>
							</subfield>
							<subfield order="10" id="mmp_data_acstats_t::msg_SNRx10">
								<name>msg_SNRx10</name>
								<size>2</size>
								<description>Message body SNR x 10 (factory use only)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="11" id="mmp_data_acstats_t::msg_AGC">
								<name>msg_AGC</name>
								<size>2</size>
								<description>AGC value at message receive</description>
								<signed>0</signed>
							</subfield>
							<subfield order="12" id="mmp_data_acstats_t::msg_CCERR">
								<name>msg_CCERR</name>
								<size>2</size>
								<description>Soft decision metric for convolutional decoder in the message body (factory use only)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="13" id="mmp_data_acstats_t::msg_CRC">
								<name>msg_CRC</name>
								<size>2</size>
								<description>The CRC of the incoming message</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::REMOTE_DLOGBLK">
						<name>REMOTE_DLOGBLK</name>
						<value>0x0F</value>
						<description>Data packet from remote modem containing data logger data, with CRC flags</description>
						<subfield_list count="5" size="variable">
							<subfield order="0" id="mmp_remote_data_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of sending modem</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_remote_data_t::transport">
								<name>transport</name>
								<size>2</size>
								<description>Transport address, if any</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_remote_data_t::invalid_blks">
								<name>invalid_blks</name>
								<size>2</size>
								<description>Raised bits in this field correspond to corrupted 256-byte subblocks of the transfer</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_remote_data_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data in bytes</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_remote_data_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field containing received data [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_remote_data_t::len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::HEADER_ERROR">
						<name>HEADER_ERROR</name>
						<value>0x10</value>
						<description>Header received from remote modem with errors; contains acoustic statistics if header decoded, or sentinel value to indicate low SNR acquisition detected</description>
						<subfield_list count="7" size="14">
							<subfield order="0" id="mmp_data_hdrerr_t::speedx10">
								<name>speedx10</name>
								<size>2</size>
								<description>Estimated speed (doppler) in 1/10 knots units    </description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_data_hdrerr_t::acq_SNRx10">
								<name>acq_SNRx10</name>
								<size>2</size>
								<description>Acquisition SNR x 10 (factory use only)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_data_hdrerr_t::acq_MPDx10">
								<name>acq_MPDx10</name>
								<size>2</size>
								<description>Acquisition multipath delay in 1/10 ms units</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_data_hdrerr_t::acq_RCT">
								<name>acq_RCT</name>
								<size>2</size>
								<description>Received chirp threshold (factory use only)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_data_hdrerr_t::acq_FSNR">
								<name>acq_FSNR</name>
								<size>2</size>
								<description>First SNR (factory use only)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="5" id="mmp_data_hdrerr_t::hdr_SNRx10">
								<name>hdr_SNRx10</name>
								<size>2</size>
								<description>Header SNR x 10; 0x7FFF (MMP_HDRERR_LOWSNRACQ) signifies low SNR acquisition and no header decode (rest of fields zeroed)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="6" id="mmp_data_hdrerr_t::hdr_CCERR">
								<name>hdr_CCERR</name>
								<size>2</size>
								<description>Soft decision metric for convolutional decoder (factory use only)</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DATA::NAV_STATUS">
						<name>NAV_STATUS</name>
						<value>0x11</value>
						<description>Status of navigation sources (location, heading, attitude)</description>
						<subfield_list count="3" size="6">
							<subfield order="0" id="mmp_data_nav_status_t::location">
								<name>location</name>
								<size>2</size>
								<description>status of location information</description>
								<signed>1</signed>
								<enumeration_list count="3">
									<enumeration id="nav_validity_t::NAV_NOT_VALID">
										<name>NAV_NOT_VALID</name>
										<value>0</value>
										<description>data from stored values</description>
									</enumeration>
									<enumeration id="nav_validity_t::NAV_INT_VALID">
										<name>NAV_INT_VALID</name>
										<value>1</value>
										<description>data from internal source</description>
									</enumeration>
									<enumeration id="nav_validity_t::NAV_EXT_VALID">
										<name>NAV_EXT_VALID</name>
										<value>2</value>
										<description>data from external source</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_data_nav_status_t::heading">
								<name>heading</name>
								<size>2</size>
								<description>status of heading information</description>
								<signed>1</signed>
								<enumeration_list count="3">
									<enumeration id="nav_validity_t::NAV_NOT_VALID">
										<name>NAV_NOT_VALID</name>
										<value>0</value>
										<description>data from stored values</description>
									</enumeration>
									<enumeration id="nav_validity_t::NAV_INT_VALID">
										<name>NAV_INT_VALID</name>
										<value>1</value>
										<description>data from internal source</description>
									</enumeration>
									<enumeration id="nav_validity_t::NAV_EXT_VALID">
										<name>NAV_EXT_VALID</name>
										<value>2</value>
										<description>data from external source</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_data_nav_status_t::attitude">
								<name>attitude</name>
								<size>2</size>
								<description>status of attitude information</description>
								<signed>1</signed>
								<enumeration_list count="3">
									<enumeration id="nav_validity_t::NAV_NOT_VALID">
										<name>NAV_NOT_VALID</name>
										<value>0</value>
										<description>data from stored values</description>
									</enumeration>
									<enumeration id="nav_validity_t::NAV_INT_VALID">
										<name>NAV_INT_VALID</name>
										<value>1</value>
										<description>data from internal source</description>
									</enumeration>
									<enumeration id="nav_validity_t::NAV_EXT_VALID">
										<name>NAV_EXT_VALID</name>
										<value>2</value>
										<description>data from external source</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::RANGE_UPDATE">
						<name>RANGE_UPDATE</name>
						<value>0x12</value>
						<description>Updated range to a remote node determined via acoustic communication  </description>
						<subfield_list count="4" size="12">
							<subfield order="0" id="mmp_data_rangeupdate_t::node">
								<name>node</name>
								<size>2</size>
								<description>Node address to which the range update applies</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_data_rangeupdate_t::range_type">
								<name>range_type</name>
								<size>2</size>
								<description>Type of range update</description>
								<signed>1</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_rangeupdate_range_type_t::MMP_RANGEUPDATE_TYPE_NULL">
										<name>MMP_RANGEUPDATE_TYPE_NULL</name>
										<value>0</value>
										<description>Null/Unknown range update type</description>
									</enumeration>
									<enumeration id="mmp_rangeupdate_range_type_t::MMP_RANGEUPDATE_TYPE_ONEWAY">
										<name>MMP_RANGEUPDATE_TYPE_ONEWAY</name>
										<value>1</value>
										<description>One-way range, calculated via scheduled transmission from time-synchronized remote modem </description>
									</enumeration>
									<enumeration id="mmp_rangeupdate_range_type_t::MMP_RANGEUPDATE_TYPE_TWOWAY">
										<name>MMP_RANGEUPDATE_TYPE_TWOWAY</name>
										<value>2</value>
										<description>Two-way range, calculated via round-trip packet exchange between two modems </description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_data_rangeupdate_t::range_x10">
								<name>range_x10</name>
								<size>4</size>
								<description>Range to remote node in 1/10 meter units</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_data_rangeupdate_t::propdly_x10">
								<name>propdly_x10</name>
								<size>4</size>
								<description>Acoustic propagation delay to remote node in 1/10 ms units</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DATA::FPM_BOOT_FAIL">
						<name>FPM_BOOT_FAIL</name>
						<value>0x13</value>
						<description>Indication of whether a floating point coprocessor that was configured to be present at boot time failed to initialize.  Will always return 0 on platforms that don&apos;t support FPM coprocessors.</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_data_fpm_boot_failure_t::failure">
								<name>failure</name>
								<size>2</size>
								<description></description>
								<signed>1</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="DATA::RCV_GAIN">
						<name>RCV_GAIN</name>
						<value>0x14</value>
						<description>Gives the RCV module attenuator steps and total gain</description>
						<subfield_list count="3" size="6">
							<subfield order="0" id="mmp_data_rcv_gain_t::rc_atten_step1">
								<name>rc_atten_step1</name>
								<size>2</size>
								<description></description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_data_rcv_gain_t::rc_atten_step2">
								<name>rc_atten_step2</name>
								<size>2</size>
								<description></description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_data_rcv_gain_t::rc_total_gain">
								<name>rc_total_gain</name>
								<size>2</size>
								<description></description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::SPECTRUM_STATUS">
						<name>SPECTRUM_STATUS</name>
						<value>0x15</value>
						<description>Indicates activation or deactivation of the spectrum mode, along with some parameters</description>
						<subfield_list count="5" size="12">
							<subfield order="0" id="mmp_spectrum_stat_t::stat">
								<name>stat</name>
								<size>1</size>
								<description>Status of spectrum mode.  0 if disabled, 1 if enabled.</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_spectrum_stat_status_t::MMP_SPECTRUM_STAT_OFF">
										<name>MMP_SPECTRUM_STAT_OFF</name>
										<value>0</value>
										<description>MMP interface exited</description>
									</enumeration>
									<enumeration id="mmp_spectrum_stat_status_t::MMP_SPECTRUM_STAT_ON">
										<name>MMP_SPECTRUM_STAT_ON</name>
										<value>1</value>
										<description>MMP interface started</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_spectrum_stat_t::bins">
								<name>bins</name>
								<size>1</size>
								<description>The number of frequency bins the band will be divided into (may be different than requested)</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_spectrum_stat_t::step">
								<name>step</name>
								<size>2</size>
								<description>Step size of the frequency bins, in Hz</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_spectrum_stat_t::freq_low">
								<name>freq_low</name>
								<size>4</size>
								<description>Frequency of the lowest bin</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_spectrum_stat_t::freq_high">
								<name>freq_high</name>
								<size>4</size>
								<description>Frequency of the highest bin</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::SPECTRUM_DATA">
						<name>SPECTRUM_DATA</name>
						<value>0x16</value>
						<description>Energy levels for frequency bins calculated during spectrum mode</description>
						<subfield_list count="3" size="variable">
							<subfield order="0" id="mmp_spectrum_data_t::AGC">
								<name>AGC</name>
								<size>2</size>
								<description>The current AGC value at the time the spectrum sample was collected</description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_spectrum_data_t::bins">
								<name>bins</name>
								<size>2</size>
								<description>Number of bins of spectrum data (corresponding to size of the data[] array in bytes)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_spectrum_data_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field containing spectrum data [sizevar=bins]</description>
								<signed>1</signed>
								<array_size varid="mmp_spectrum_data_t::bins" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::DIRECTIONAL_DEBUG">
						<name>DIRECTIONAL_DEBUG</name>
						<value>0x17</value>
						<description>(DAT ONLY) Additional debug information locally from a DAT</description>
						<subfield_list count="8" size="16">
							<subfield order="0" id="mmp_data_directional_debug_t::cal_bearing">
								<name>cal_bearing</name>
								<size>2</size>
								<description>calibration table bearing in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_data_directional_debug_t::cal_elevation">
								<name>cal_elevation</name>
								<size>2</size>
								<description>calibration table elevation in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_data_directional_debug_t::AGC">
								<name>AGC</name>
								<size>2</size>
								<description>Gain setting at time of detection</description>
								<signed>1</signed>
							</subfield>
							<subfield order="3" id="mmp_data_directional_debug_t::vector">
								<name>vector</name>
								<size>2</size>
								<description>vector quality indicator * 1000</description>
								<signed>1</signed>
							</subfield>
							<subfield order="4" id="mmp_data_directional_debug_t::level_1">
								<name>level_1</name>
								<size>2</size>
								<description>detect level in phone 1 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="5" id="mmp_data_directional_debug_t::level_2">
								<name>level_2</name>
								<size>2</size>
								<description>detect level in phone 2 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="6" id="mmp_data_directional_debug_t::level_3">
								<name>level_3</name>
								<size>2</size>
								<description>detect level in phone 3 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="7" id="mmp_data_directional_debug_t::level_4">
								<name>level_4</name>
								<size>2</size>
								<description>detect level in phone 4 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::TONAL_LOCATOR">
						<name>TONAL_LOCATOR</name>
						<value>0x18</value>
						<description>(DAT ONLY) information pertaining to ELP locator</description>
						<subfield_list count="9" size="18">
							<subfield order="0" id="mmp_data_locator_t::bearing">
								<name>bearing</name>
								<size>2</size>
								<description>vehicle relative bearing in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_data_locator_t::elevation">
								<name>elevation</name>
								<size>2</size>
								<description>vehicle relative elevation in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_data_locator_t::vector">
								<name>vector</name>
								<size>2</size>
								<description>vector quality indicator * 1000</description>
								<signed>1</signed>
							</subfield>
							<subfield order="3" id="mmp_data_locator_t::AGC">
								<name>AGC</name>
								<size>2</size>
								<description>Gain setting at time of detection</description>
								<signed>1</signed>
							</subfield>
							<subfield order="4" id="mmp_data_locator_t::frequency">
								<name>frequency</name>
								<size>2</size>
								<description>frequency of detected tone in Hetrz</description>
								<signed>0</signed>
							</subfield>
							<subfield order="5" id="mmp_data_locator_t::hour">
								<name>hour</name>
								<size>2</size>
								<description>hours</description>
								<signed>0</signed>
							</subfield>
							<subfield order="6" id="mmp_data_locator_t::min">
								<name>min</name>
								<size>2</size>
								<description>minutes</description>
								<signed>0</signed>
							</subfield>
							<subfield order="7" id="mmp_data_locator_t::sec">
								<name>sec</name>
								<size>2</size>
								<description>seconds</description>
								<signed>0</signed>
							</subfield>
							<subfield order="8" id="mmp_data_locator_t::msec10">
								<name>msec10</name>
								<size>2</size>
								<description>10ths of milliseconds</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::DIRECTIONAL_LOCDEBUG">
						<name>DIRECTIONAL_LOCDEBUG</name>
						<value>0x1A</value>
						<description>(DAT ONLY) Additional debug information locally from a DAT pertaining to ELP locator</description>
						<subfield_list count="8" size="16">
							<subfield order="0" id="mmp_data_directional_locdebug_t::compass">
								<name>compass</name>
								<size>2</size>
								<description>compass heading in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="1" id="mmp_data_directional_locdebug_t::pitch">
								<name>pitch</name>
								<size>2</size>
								<description>compass pitch in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="2" id="mmp_data_directional_locdebug_t::roll">
								<name>roll</name>
								<size>2</size>
								<description>compass roll in tenths of a degree</description>
								<signed>1</signed>
							</subfield>
							<subfield order="3" id="mmp_data_directional_locdebug_t::vector">
								<name>vector</name>
								<size>2</size>
								<description>vector quality indicator * 1000</description>
								<signed>1</signed>
							</subfield>
							<subfield order="4" id="mmp_data_directional_locdebug_t::level_1">
								<name>level_1</name>
								<size>2</size>
								<description>detect level in phone 1 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="5" id="mmp_data_directional_locdebug_t::level_2">
								<name>level_2</name>
								<size>2</size>
								<description>detect level in phone 2 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="6" id="mmp_data_directional_locdebug_t::level_3">
								<name>level_3</name>
								<size>2</size>
								<description>detect level in phone 3 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="7" id="mmp_data_directional_locdebug_t::level_4">
								<name>level_4</name>
								<size>2</size>
								<description>detect level in phone 4 (ADC counts)</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::JANUS_PACKET">
						<name>JANUS_PACKET</name>
						<value>0x1B</value>
						<description>JANUS data packet received</description>
						<subfield_list count="11" size="variable">
							<subfield order="0" id="mmp_data_janus_packet_t::version">
								<name>version</name>
								<size>1</size>
								<description>JANUS format version of the packet.  Ignored on transmits, as modem inserts version into outbound packet automatically.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_data_janus_packet_t::mobility_flag">
								<name>mobility_flag</name>
								<size>1</size>
								<description>Set high if packet originates from a mobile node.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_data_janus_packet_t::txrx_flag">
								<name>txrx_flag</name>
								<size>1</size>
								<description>Set high if packet originates from a node capable of both transmitting and receiving.  If low, node can transmit only.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_data_janus_packet_t::forwarding_flag">
								<name>forwarding_flag</name>
								<size>1</size>
								<description>Set high if packet originates from a node capable of packet forwarding (for routing and delay-tolerant processing).</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_data_janus_packet_t::class_userid">
								<name>class_userid</name>
								<size>1</size>
								<description>The JANUS class user ID of the packet</description>
								<signed>0</signed>
								<enumeration_list count="84">
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_EMERGENCY">
										<name>JANUS_CLASSID_EMERGENCY</name>
										<value>0</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_UWGPS">
										<name>JANUS_CLASSID_UWGPS</name>
										<value>1</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_UWAIS">
										<name>JANUS_CLASSID_UWAIS</name>
										<value>2</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_PINGER">
										<name>JANUS_CLASSID_PINGER</name>
										<value>3</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_FIXEDVMOORING">
										<name>JANUS_CLASSID_FIXEDVMOORING</name>
										<value>4</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_RIGIDVSTRUCTURE">
										<name>JANUS_CLASSID_RIGIDVSTRUCTURE</name>
										<value>5</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_HAZARDMARKER">
										<name>JANUS_CLASSID_HAZARDMARKER</name>
										<value>6</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CHANNELMARKER">
										<name>JANUS_CLASSID_CHANNELMARKER</name>
										<value>7</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_WINDGENERATOR">
										<name>JANUS_CLASSID_WINDGENERATOR</name>
										<value>8</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_WAVEGENERATOR">
										<name>JANUS_CLASSID_WAVEGENERATOR</name>
										<value>9</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_SOLARGENERATOR">
										<name>JANUS_CLASSID_SOLARGENERATOR</name>
										<value>10</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CAPABILITIES">
										<name>JANUS_CLASSID_CAPABILITIES</name>
										<value>15</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_NATOREF">
										<name>JANUS_CLASSID_NATOREF</name>
										<value>16</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_VENILIA">
										<name>JANUS_CLASSID_VENILIA</name>
										<value>17</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MONGOLIA">
										<name>JANUS_CLASSID_CC_MONGOLIA</name>
										<value>187</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_NEWZEALAND">
										<name>JANUS_CLASSID_CC_NEWZEALAND</name>
										<value>188</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_REPUBLICOFKOREA">
										<name>JANUS_CLASSID_CC_REPUBLICOFKOREA</name>
										<value>189</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_PAKISTAN">
										<name>JANUS_CLASSID_CC_PAKISTAN</name>
										<value>190</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_JAPAN">
										<name>JANUS_CLASSID_CC_JAPAN</name>
										<value>191</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_IRAQ">
										<name>JANUS_CLASSID_CC_IRAQ</name>
										<value>192</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AUSTRALIA">
										<name>JANUS_CLASSID_CC_AUSTRALIA</name>
										<value>193</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AFGHANISTAN">
										<name>JANUS_CLASSID_CC_AFGHANISTAN</name>
										<value>194</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UNITEDARABEMIRATES">
										<name>JANUS_CLASSID_CC_UNITEDARABEMIRATES</name>
										<value>195</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_KUWAIT">
										<name>JANUS_CLASSID_CC_KUWAIT</name>
										<value>196</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_QATAR">
										<name>JANUS_CLASSID_CC_QATAR</name>
										<value>197</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BAHRAIN">
										<name>JANUS_CLASSID_CC_BAHRAIN</name>
										<value>198</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TUNISIA">
										<name>JANUS_CLASSID_CC_TUNISIA</name>
										<value>199</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MOROCCO">
										<name>JANUS_CLASSID_CC_MOROCCO</name>
										<value>200</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MAURITANIA">
										<name>JANUS_CLASSID_CC_MAURITANIA</name>
										<value>201</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_JORDAN">
										<name>JANUS_CLASSID_CC_JORDAN</name>
										<value>202</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ISRAEL">
										<name>JANUS_CLASSID_CC_ISRAEL</name>
										<value>203</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_EGYPT">
										<name>JANUS_CLASSID_CC_EGYPT</name>
										<value>204</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ALGERIA">
										<name>JANUS_CLASSID_CC_ALGERIA</name>
										<value>205</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UZBEKISTAN">
										<name>JANUS_CLASSID_CC_UZBEKISTAN</name>
										<value>206</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UKRAINE">
										<name>JANUS_CLASSID_CC_UKRAINE</name>
										<value>207</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TURKMENISTAN">
										<name>JANUS_CLASSID_CC_TURKMENISTAN</name>
										<value>208</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MACEDONIA">
										<name>JANUS_CLASSID_CC_MACEDONIA</name>
										<value>209</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TAJIKISTAN">
										<name>JANUS_CLASSID_CC_TAJIKISTAN</name>
										<value>210</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SWITZERLAND">
										<name>JANUS_CLASSID_CC_SWITZERLAND</name>
										<value>211</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SWEDEN">
										<name>JANUS_CLASSID_CC_SWEDEN</name>
										<value>212</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SERBIA">
										<name>JANUS_CLASSID_CC_SERBIA</name>
										<value>213</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MONTENEGRO">
										<name>JANUS_CLASSID_CC_MONTENEGRO</name>
										<value>214</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MOLDOVA">
										<name>JANUS_CLASSID_CC_MOLDOVA</name>
										<value>215</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MALTA">
										<name>JANUS_CLASSID_CC_MALTA</name>
										<value>216</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_KYRGYZREPUBLIC">
										<name>JANUS_CLASSID_CC_KYRGYZREPUBLIC</name>
										<value>217</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_KAZAKHSTAN">
										<name>JANUS_CLASSID_CC_KAZAKHSTAN</name>
										<value>218</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_IRELAND">
										<name>JANUS_CLASSID_CC_IRELAND</name>
										<value>219</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_GEORGIA">
										<name>JANUS_CLASSID_CC_GEORGIA</name>
										<value>220</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_FINLAND">
										<name>JANUS_CLASSID_CC_FINLAND</name>
										<value>221</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BOSNIAHERZEGOVINA">
										<name>JANUS_CLASSID_CC_BOSNIAHERZEGOVINA</name>
										<value>222</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BELARUS">
										<name>JANUS_CLASSID_CC_BELARUS</name>
										<value>223</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AZERBAIJAN">
										<name>JANUS_CLASSID_CC_AZERBAIJAN</name>
										<value>224</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AUSTRIA">
										<name>JANUS_CLASSID_CC_AUSTRIA</name>
										<value>225</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ARMENIA">
										<name>JANUS_CLASSID_CC_ARMENIA</name>
										<value>226</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UNITEDSTATES">
										<name>JANUS_CLASSID_CC_UNITEDSTATES</name>
										<value>227</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UNITEDKINGDOM">
										<name>JANUS_CLASSID_CC_UNITEDKINGDOM</name>
										<value>228</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TURKEY">
										<name>JANUS_CLASSID_CC_TURKEY</name>
										<value>229</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SPAIN">
										<name>JANUS_CLASSID_CC_SPAIN</name>
										<value>230</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SLOVENIA">
										<name>JANUS_CLASSID_CC_SLOVENIA</name>
										<value>231</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SLOVAKIA">
										<name>JANUS_CLASSID_CC_SLOVAKIA</name>
										<value>232</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ROMANIA">
										<name>JANUS_CLASSID_CC_ROMANIA</name>
										<value>233</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_PORTUGAL">
										<name>JANUS_CLASSID_CC_PORTUGAL</name>
										<value>234</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_POLAND">
										<name>JANUS_CLASSID_CC_POLAND</name>
										<value>235</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_NORWAY">
										<name>JANUS_CLASSID_CC_NORWAY</name>
										<value>236</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_NETHERLANDS">
										<name>JANUS_CLASSID_CC_NETHERLANDS</name>
										<value>237</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_LUXEMBOURG">
										<name>JANUS_CLASSID_CC_LUXEMBOURG</name>
										<value>238</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_LITHUANIA">
										<name>JANUS_CLASSID_CC_LITHUANIA</name>
										<value>239</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_LATVIA">
										<name>JANUS_CLASSID_CC_LATVIA</name>
										<value>240</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ITALY">
										<name>JANUS_CLASSID_CC_ITALY</name>
										<value>241</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ICELAND">
										<name>JANUS_CLASSID_CC_ICELAND</name>
										<value>242</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_HUNGARY">
										<name>JANUS_CLASSID_CC_HUNGARY</name>
										<value>243</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_GREECE">
										<name>JANUS_CLASSID_CC_GREECE</name>
										<value>244</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_GERMANY">
										<name>JANUS_CLASSID_CC_GERMANY</name>
										<value>245</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_FRANCE">
										<name>JANUS_CLASSID_CC_FRANCE</name>
										<value>246</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ESTONIA">
										<name>JANUS_CLASSID_CC_ESTONIA</name>
										<value>247</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_DENMARK">
										<name>JANUS_CLASSID_CC_DENMARK</name>
										<value>248</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_CZECHREPUBLIC">
										<name>JANUS_CLASSID_CC_CZECHREPUBLIC</name>
										<value>249</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_CROATIA">
										<name>JANUS_CLASSID_CC_CROATIA</name>
										<value>250</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_CANADA">
										<name>JANUS_CLASSID_CC_CANADA</name>
										<value>251</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BULGARIA">
										<name>JANUS_CLASSID_CC_BULGARIA</name>
										<value>252</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BELGIUM">
										<name>JANUS_CLASSID_CC_BELGIUM</name>
										<value>253</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ALBANIA">
										<name>JANUS_CLASSID_CC_ALBANIA</name>
										<value>254</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_JANUSSPECIAL">
										<name>JANUS_CLASSID_JANUSSPECIAL</name>
										<value>255</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_NUM_CLASSIDS">
										<name>JANUS_NUM_CLASSIDS</name>
										<value>256</value>
										<description></description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="5" id="mmp_data_janus_packet_t::app_type">
								<name>app_type</name>
								<size>1</size>
								<description>The JANUS application type (within the specified class user ID) of the packet.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="6" id="mmp_data_janus_packet_t::schedule_type">
								<name>schedule_type</name>
								<size>1</size>
								<description>The type of scheduling in this JANUS packet: none, reserved, or repeat.  If reserved or repeat, schedule_index_adb_upper will contain the schedule lookup index.</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_janus_schedule_type_t::MMP_JANUS_SCHEDULE_NONE">
										<name>MMP_JANUS_SCHEDULE_NONE</name>
										<value>0</value>
										<description>No scheduling present, all 34 bits may be used in the ADB.</description>
									</enumeration>
									<enumeration id="mmp_janus_schedule_type_t::MMP_JANUS_SCHEDULE_RESERVE">
										<name>MMP_JANUS_SCHEDULE_RESERVE</name>
										<value>1</value>
										<description>A reserve interval is being specified according to Annex B of ANEP-87.  Up to 26 bits of ADB data are present.</description>
									</enumeration>
									<enumeration id="mmp_janus_schedule_type_t::MMP_JANUS_SCHEDULE_REPEAT">
										<name>MMP_JANUS_SCHEDULE_REPEAT</name>
										<value>2</value>
										<description>A repeat interval is being specified according to Annec C of ANEP-87.  Up to 26 bits of ADB data are present.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="7" id="mmp_data_janus_packet_t::schedule_index_adb_upper">
								<name>schedule_index_adb_upper</name>
								<size>1</size>
								<description>If schedule_type is either reserved or repeat, this field contains the table lookup index for the appropriate scheduling scheme (with high order bit masked off, as it is represented in schedule_type).  If schedule_type is none, then the lowermost two bits of this field contains the uppermost two bits of the application data block (ADB).</description>
								<signed>0</signed>
							</subfield>
							<subfield order="8" id="mmp_data_janus_packet_t::adb_lower">
								<name>adb_lower</name>
								<size>4</size>
								<description>If schedule_type is none, this field contains the lowermost 32 bits of the application data block (ADB).  Otherwise, this field contains the lowermost 26 bits of the ADB, with the upper 8 scheduling bits represented in schedule_type and schedule_index_adb_upper.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="9" id="mmp_data_janus_packet_t::cargo_len">
								<name>cargo_len</name>
								<size>2</size>
								<description>The length of the cargo in bytes.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="10" id="mmp_data_janus_packet_t::cargo">
								<name>cargo</name>
								<size>1</size>
								<description>The optional cargo bytes for the packet. [sizevar=cargo_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_data_janus_packet_t::cargo_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::ACOUTRIG_COMPLETE">
						<name>ACOUTRIG_COMPLETE</name>
						<value>0x1C</value>
						<description>Acoustic trigger cycle completion with confirmation</description>
						<subfield_list count="2" size="4">
							<subfield order="0" id="mmp_acoutrig_complete_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of the modem that has completed the acoustic trigger assertion cycle</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_acoutrig_complete_t::assert_state">
								<name>assert_state</name>
								<size>2</size>
								<description>1 if signal still asserted, 0 if de-asserted</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::ACOUTRIG_TIMEOUT">
						<name>ACOUTRIG_TIMEOUT</name>
						<value>0x1D</value>
						<description>Acoustic trigger cycle complete with no confirmation (timeout)</description>
						<subfield_list count="2" size="4">
							<subfield order="0" id="mmp_acoutrig_complete_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of the modem that has completed the acoustic trigger assertion cycle</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_acoutrig_complete_t::assert_state">
								<name>assert_state</name>
								<size>2</size>
								<description>1 if signal still asserted, 0 if de-asserted</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="DATA::RNGBRG_UPDATE">
						<name>RNGBRG_UPDATE</name>
						<value>0x1F</value>
						<description>Updated range and bearing to a remote node</description>
						<subfield_list count="5" size="14">
							<subfield order="0" id="mmp_data_rngbrg_update_t::range">
								<name>range</name>
								<size>4</size>
								<description>Range to remote node in 1/10 meter units</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_data_rngbrg_update_t::propdly_x10">
								<name>propdly_x10</name>
								<size>4</size>
								<description>Acoustic propagation delay to remote node in 1/10 ms units</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_data_rngbrg_update_t::node">
								<name>node</name>
								<size>2</size>
								<description>Node address to which the range update applies</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_data_rngbrg_update_t::azimuth">
								<name>azimuth</name>
								<size>2</size>
								<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
								<signed>1</signed>
							</subfield>
							<subfield order="4" id="mmp_data_rngbrg_update_t::elevation">
								<name>elevation</name>
								<size>2</size>
								<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="TRANSPOND">
				<name>TRANSPOND</name>
				<value>0x05</value>
				<description>Transponding and ranging data/notifications</description>
				<field_list count="44">
					<field operations="gn" id="TRANSPOND::STAT">
						<name>STAT</name>
						<value>0x00</value>
						<description>Transpond mode status</description>
						<subfield_list count="2" size="4">
							<subfield order="0" id="mmp_transpond_stat_t::stat">
								<name>stat</name>
								<size>2</size>
								<description>Status of transpond mode</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_transpond_stat_status_t::MMP_TRANSPOND_STAT_IDLE">
										<name>MMP_TRANSPOND_STAT_IDLE</name>
										<value>0</value>
										<description>Modem is not listening for transpond pings</description>
									</enumeration>
									<enumeration id="mmp_transpond_stat_status_t::MMP_TRANSPOND_STAT_ACTIVE">
										<name>MMP_TRANSPOND_STAT_ACTIVE</name>
										<value>1</value>
										<description>Modem is listening for transpond receive pings for a finite period of time</description>
									</enumeration>
									<enumeration id="mmp_transpond_stat_status_t::MMP_TRANSPOND_STAT_CONTINUOUS">
										<name>MMP_TRANSPOND_STAT_CONTINUOUS</name>
										<value>2</value>
										<description>Modem is continually listening for transpond receive pings</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_transpond_stat_t::timeout">
								<name>timeout</name>
								<size>2</size>
								<description>Time of transpond mode, rounded up to next second</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="n" id="TRANSPOND::PINGRCVD">
						<name>PINGRCVD</name>
						<value>0x01</value>
						<description>Transpond ping received</description>
						<subfield_list count="4" size="14">
							<subfield order="0" id="mmp_transpond_pingrcvd_t::freq">
								<name>freq</name>
								<size>4</size>
								<description>Frequency of received ping, in Hz</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_transpond_pingrcvd_t::rt_time">
								<name>rt_time</name>
								<size>4</size>
								<description>Round trip time of received ping measured from interrogation</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_transpond_pingrcvd_t::detect_lev">
								<name>detect_lev</name>
								<size>4</size>
								<description>Detect level of received ping in std. deviations above mean noise level</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_transpond_pingrcvd_t::flags">
								<name>flags</name>
								<size>2</size>
								<description>Flags denoting special attributes of the ping event</description>
								<signed>0</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_transpond_pingrcvd_flag_t::MMP_TRANSPOND_PINGRCVD_FLAG_RESIDUAL">
										<name>MMP_TRANSPOND_PINGRCVD_FLAG_RESIDUAL</name>
										<value>0x01</value>
										<description>This ping is measured against an earlier interrogation and not a new one about to depart.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_0">
						<name>CHNLRXADJ_0</name>
						<value>0x02</value>
						<description>Receive sensitivity adjustment for channel 0</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_1">
						<name>CHNLRXADJ_1</name>
						<value>0x03</value>
						<description>Receive sensitivity adjustment for channel 1</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_2">
						<name>CHNLRXADJ_2</name>
						<value>0x04</value>
						<description>Receive sensitivity adjustment for channel 2</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_3">
						<name>CHNLRXADJ_3</name>
						<value>0x05</value>
						<description>Receive sensitivity adjustment for channel 3</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_4">
						<name>CHNLRXADJ_4</name>
						<value>0x06</value>
						<description>Receive sensitivity adjustment for channel 4</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_5">
						<name>CHNLRXADJ_5</name>
						<value>0x07</value>
						<description>Receive sensitivity adjustment for channel 5</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_6">
						<name>CHNLRXADJ_6</name>
						<value>0x08</value>
						<description>Receive sensitivity adjustment for channel 6</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_7">
						<name>CHNLRXADJ_7</name>
						<value>0x09</value>
						<description>Receive sensitivity adjustment for channel 7</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_8">
						<name>CHNLRXADJ_8</name>
						<value>0x0A</value>
						<description>Receive sensitivity adjustment for channel 8</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_9">
						<name>CHNLRXADJ_9</name>
						<value>0x0B</value>
						<description>Receive sensitivity adjustment for channel 9</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_10">
						<name>CHNLRXADJ_10</name>
						<value>0x0C</value>
						<description>Receive sensitivity adjustment for channel 10</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_11">
						<name>CHNLRXADJ_11</name>
						<value>0x0D</value>
						<description>Receive sensitivity adjustment for channel 11</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_12">
						<name>CHNLRXADJ_12</name>
						<value>0x0E</value>
						<description>Receive sensitivity adjustment for channel 12</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_13">
						<name>CHNLRXADJ_13</name>
						<value>0x0F</value>
						<description>Receive sensitivity adjustment for channel 13</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_14">
						<name>CHNLRXADJ_14</name>
						<value>0x10</value>
						<description>Receive sensitivity adjustment for channel 14</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_15">
						<name>CHNLRXADJ_15</name>
						<value>0x11</value>
						<description>Receive sensitivity adjustment for channel 15</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_16">
						<name>CHNLRXADJ_16</name>
						<value>0x12</value>
						<description>Receive sensitivity adjustment for channel 16</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_17">
						<name>CHNLRXADJ_17</name>
						<value>0x13</value>
						<description>Receive sensitivity adjustment for channel 17</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_18">
						<name>CHNLRXADJ_18</name>
						<value>0x14</value>
						<description>Receive sensitivity adjustment for channel 18</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_19">
						<name>CHNLRXADJ_19</name>
						<value>0x15</value>
						<description>Receive sensitivity adjustment for channel 19</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_20">
						<name>CHNLRXADJ_20</name>
						<value>0x16</value>
						<description>Receive sensitivity adjustment for channel 20</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_21">
						<name>CHNLRXADJ_21</name>
						<value>0x17</value>
						<description>Receive sensitivity adjustment for channel 21</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_22">
						<name>CHNLRXADJ_22</name>
						<value>0x18</value>
						<description>Receive sensitivity adjustment for channel 22</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_23">
						<name>CHNLRXADJ_23</name>
						<value>0x19</value>
						<description>Receive sensitivity adjustment for channel 23</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_24">
						<name>CHNLRXADJ_24</name>
						<value>0x1A</value>
						<description>Receive sensitivity adjustment for channel 24</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_25">
						<name>CHNLRXADJ_25</name>
						<value>0x1B</value>
						<description>Receive sensitivity adjustment for channel 25</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_26">
						<name>CHNLRXADJ_26</name>
						<value>0x1C</value>
						<description>Receive sensitivity adjustment for channel 26</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_27">
						<name>CHNLRXADJ_27</name>
						<value>0x1D</value>
						<description>Receive sensitivity adjustment for channel 27</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_28">
						<name>CHNLRXADJ_28</name>
						<value>0x1E</value>
						<description>Receive sensitivity adjustment for channel 28</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_29">
						<name>CHNLRXADJ_29</name>
						<value>0x1F</value>
						<description>Receive sensitivity adjustment for channel 29</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_30">
						<name>CHNLRXADJ_30</name>
						<value>0x20</value>
						<description>Receive sensitivity adjustment for channel 30</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_31">
						<name>CHNLRXADJ_31</name>
						<value>0x21</value>
						<description>Receive sensitivity adjustment for channel 31</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_32">
						<name>CHNLRXADJ_32</name>
						<value>0x22</value>
						<description>Receive sensitivity adjustment for channel 32</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_33">
						<name>CHNLRXADJ_33</name>
						<value>0x23</value>
						<description>Receive sensitivity adjustment for channel 33</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_34">
						<name>CHNLRXADJ_34</name>
						<value>0x24</value>
						<description>Receive sensitivity adjustment for channel 34</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_35">
						<name>CHNLRXADJ_35</name>
						<value>0x25</value>
						<description>Receive sensitivity adjustment for channel 35</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_36">
						<name>CHNLRXADJ_36</name>
						<value>0x26</value>
						<description>Receive sensitivity adjustment for channel 36</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_37">
						<name>CHNLRXADJ_37</name>
						<value>0x27</value>
						<description>Receive sensitivity adjustment for channel 37</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_38">
						<name>CHNLRXADJ_38</name>
						<value>0x28</value>
						<description>Receive sensitivity adjustment for channel 38</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_39">
						<name>CHNLRXADJ_39</name>
						<value>0x29</value>
						<description>Receive sensitivity adjustment for channel 39</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_40">
						<name>CHNLRXADJ_40</name>
						<value>0x2A</value>
						<description>Receive sensitivity adjustment for channel 40</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_transpond_rxadj_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of the channel, from -100 to +100</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TRANSPOND::CHNLRXADJ_ALL">
						<name>CHNLRXADJ_ALL</name>
						<value>0x2B</value>
						<description>Set or get all receive channel sensitivity adjustments at once</description>
						<subfield_list count="1" size="82">
							<subfield order="0" id="mmp_transpond_rxadjall_t::adjustment">
								<name>adjustment</name>
								<size>2</size>
								<description>Receive sensitivity adjustment of all channels, from -100 to +100, laid out as 41 consecutive 16-bit values corresponding to the channels 0-40.</description>
								<signed>1</signed>
								<array_size>41</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="TIME">
				<name>TIME</name>
				<value>0x06</value>
				<description>Time- and date-related data/notifications</description>
				<field_list count="5">
					<field operations="n" id="TIME::1PPS_PULSE">
						<name>1PPS_PULSE</name>
						<value>0x00</value>
						<description>(currently unsupported) Arrival of 1 PPS synchronization pulse</description>
					</field>
					<field operations="gsn" id="TIME::TIMEDATE">
						<name>TIMEDATE</name>
						<value>0x01</value>
						<description>The time and date on the modem&apos;s clock</description>
						<subfield_list count="8" size="10">
							<subfield order="0" id="mmp_time_t::isdst">
								<name>isdst</name>
								<size>1</size>
								<description>True if local daylight savings time is in effect</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_time_t::hh">
								<name>hh</name>
								<size>1</size>
								<description>Hour</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_time_t::mm">
								<name>mm</name>
								<size>1</size>
								<description>Minute</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_time_t::ss">
								<name>ss</name>
								<size>1</size>
								<description>Second</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_time_t::mo">
								<name>mo</name>
								<size>1</size>
								<description>Month</description>
								<signed>0</signed>
							</subfield>
							<subfield order="5" id="mmp_time_t::da">
								<name>da</name>
								<size>1</size>
								<description>Day of month</description>
								<signed>0</signed>
							</subfield>
							<subfield order="6" id="mmp_time_t::yr">
								<name>yr</name>
								<size>2</size>
								<description>Year</description>
								<signed>0</signed>
							</subfield>
							<subfield order="7" id="mmp_time_t::tz">
								<name>tz</name>
								<size>2</size>
								<description>Time zone +/- UTC in minutes</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="TIME::DSTPARMS">
						<name>DSTPARMS</name>
						<value>0x02</value>
						<description>(currently unsupported) Parameters governing Daylight Savings Time adjustments of local time</description>
						<subfield_list count="8" size="8">
							<subfield order="0" id="mmp_dst_t::fwd_hr">
								<name>fwd_hr</name>
								<size>1</size>
								<description>Hour of day when jump forward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="1" id="mmp_dst_t::fwd_mo">
								<name>fwd_mo</name>
								<size>1</size>
								<description>Month when jump forward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_dst_t::fwd_wk">
								<name>fwd_wk</name>
								<size>1</size>
								<description>Week of month when jump forward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="3" id="mmp_dst_t::fwd_dotw">
								<name>fwd_dotw</name>
								<size>1</size>
								<description>Day of the week when jump forward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="4" id="mmp_dst_t::back_hr">
								<name>back_hr</name>
								<size>1</size>
								<description>Hour of day when fall backward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="5" id="mmp_dst_t::back_mo">
								<name>back_mo</name>
								<size>1</size>
								<description>Month when fall backward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="6" id="mmp_dst_t::back_wk">
								<name>back_wk</name>
								<size>1</size>
								<description>Week of month when fall backward occurs</description>
								<signed>0</signed>
							</subfield>
							<subfield order="7" id="mmp_dst_t::back_dotw">
								<name>back_dotw</name>
								<size>1</size>
								<description>Day of the week when fall backward occurs</description>
								<signed>0</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="TIME::RTCBATT">
						<name>RTCBATT</name>
						<value>0x03</value>
						<description>Battery level on modem&apos;s clock</description>
						<subfield_list count="1" size="2">
							<subfield order="0" id="mmp_rtcbatt_t::rtcbatt_x100">
								<name>rtcbatt_x100</name>
								<size>2</size>
								<description>Real Time Clock battery voltage in units of 1/100 volt</description>
								<signed>1</signed>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="TIME::SYNCINFO">
						<name>SYNCINFO</name>
						<value>0x04</value>
						<description>Synchronization status of the modem to an accurate 1PPS reference (internal or external) and timestamping information (e.g., $GPZDA messages)</description>
						<subfield_list count="4" size="4">
							<subfield order="0" id="mmp_time_syncinfo_t::pps_state">
								<name>pps_state</name>
								<size>1</size>
								<description>The current synchronization state of the modem with a high accuracy internal or external source</description>
								<signed>0</signed>
								<enumeration_list count="4">
									<enumeration id="pps_sync_state_t::PPS_NO_SYNC">
										<name>PPS_NO_SYNC</name>
										<value>0</value>
										<description>Not synchronized to a 1PPS source, awaiting qualification of a source</description>
									</enumeration>
									<enumeration id="pps_sync_state_t::PPS_PULSE_SYNC">
										<name>PPS_PULSE_SYNC</name>
										<value>1</value>
										<description>Locked to a 1PPS source following qualification</description>
									</enumeration>
									<enumeration id="pps_sync_state_t::PPS_COAST_MODE">
										<name>PPS_COAST_MODE</name>
										<value>2</value>
										<description>Coasting based on compiled statistics after having been locked to an erstwhile 1PPS source</description>
									</enumeration>
									<enumeration id="pps_sync_state_t::PPS_DISABLED_SYNC">
										<name>PPS_DISABLED_SYNC</name>
										<value>3</value>
										<description>Synchronization to a 1PPS source has been manually disabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_time_syncinfo_t::qualifying">
								<name>qualifying</name>
								<size>1</size>
								<description>When set, indicates the modem has detected a 1PPS source that falls within its pull-in range and is attempting to lock to it; this should only be the case when in COAST or NO_SYNC state</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="2" id="mmp_time_syncinfo_t::time_sync">
								<name>time_sync</name>
								<size>1</size>
								<description>When set, indicates the modem has been provisioned with a date and time (either internally or externally)</description>
								<signed>0</signed>
								<enumeration_list count="5">
									<enumeration id="tss_state_t::TSS_OUT_OF_SYNC">
										<name>TSS_OUT_OF_SYNC</name>
										<value>0</value>
										<description>Time has not been set</description>
									</enumeration>
									<enumeration id="tss_state_t::TSS_NORM_IN_SYNC">
										<name>TSS_NORM_IN_SYNC</name>
										<value>1</value>
										<description>Time is set</description>
									</enumeration>
									<enumeration id="tss_state_t::TSS_EXT_READY_TIME_UPDATE">
										<name>TSS_EXT_READY_TIME_UPDATE</name>
										<value>2</value>
										<description>Waiting to receive an external timestamp (non-standard applications only)</description>
									</enumeration>
									<enumeration id="tss_state_t::TSS_EXT_TIME_RECEIVED">
										<name>TSS_EXT_TIME_RECEIVED</name>
										<value>3</value>
										<description>External timetstamp received (non-standard applications only)</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_time_syncinfo_t::ext_time">
								<name>ext_time</name>
								<size>1</size>
								<description>True if an external timestamp has been received</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_ALL">
				<name>CFG_ALL</name>
				<value>0x3F</value>
				<description>Special subsystem for retrieving all values in a config section: set the field with the CFG section number to get or MMP_SUBSYS_CFG_ALL to get all sections.  If used with a SET operation and MMP_SUBSYS_CFG_ALL is used for both the the subsys and field, the configuration database will be written to flash.</description>
				<field_list count="0">
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_COPROC">
				<name>CFG_SECT_COPROC</name>
				<value>0x40</value>
				<description>Co-processor board</description>
				<field_list count="3">
					<field operations="gsn" id="CFG_SECT_COPROC::CFG_COPROC_CPBOARD">
						<name>CFG_COPROC_CPBOARD</name>
						<value>0</value>
						<description>Indicate power mode of coprocessor board</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_COPROC::CFG_COPROC_FDFWDTAPS">
						<name>CFG_COPROC_FDFWDTAPS</name>
						<value>1</value>
						<description>PSK number of forward taps</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_COPROC::CFG_COPROC_FDBCKTAPS">
						<name>CFG_COPROC_FDBCKTAPS</name>
						<value>2</value>
						<description>PSK number of backward taps</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_DATALOG">
				<name>CFG_SECT_DATALOG</name>
				<value>0x41</value>
				<description>On-board datalogger</description>
				<field_list count="8">
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_ACDATA">
						<name>CFG_DATALOG_ACDATA</name>
						<value>0</value>
						<description>Log acoustically received data to datalogger</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_ACSTATS">
						<name>CFG_DATALOG_ACSTATS</name>
						<value>1</value>
						<description>Log acoustic statistics to datalogger</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_RINGBUF">
						<name>CFG_DATALOG_RINGBUF</name>
						<value>2</value>
						<description>Configure datalogger as flat (stop when full) or circular (oldest records discarded for newer)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_LOGMODE">
						<name>CFG_DATALOG_LOGMODE</name>
						<value>4</value>
						<description>The record-partitioning mode for the data logger: time, character, or size based.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_SENTINEL">
						<name>CFG_DATALOG_SENTINEL</name>
						<value>5</value>
						<description>The ASCII value of a sentinel character that will trigger closure of a discrete record in the data logger</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_CHRCOUNT">
						<name>CFG_DATALOG_CHRCOUNT</name>
						<value>6</value>
						<description>The number of characters that must be reached in order to trigger closure of a discrete record in the data logger</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DATALOG::CFG_DATALOG_LOGSTORE">
						<name>CFG_DATALOG_LOGSTORE</name>
						<value>7</value>
						<description>Indicates which storage medium the data logger points to (internal or external SDHC)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_MODEM">
				<name>CFG_SECT_MODEM</name>
				<value>0x42</value>
				<description>Modem functionality</description>
				<field_list count="32">
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_DATARETRY">
						<name>CFG_MODEM_DATARETRY</name>
						<value>0</value>
						<description>Acoustic data retry mode</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_ACRSPTMOUT">
						<name>CFG_MODEM_ACRSPTMOUT</name>
						<value>1</value>
						<description>Acoustic response timeout</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_OPMODE">
						<name>CFG_MODEM_OPMODE</name>
						<value>2</value>
						<description>Operation mode</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_DEVENABLE">
						<name>CFG_MODEM_DEVENABLE</name>
						<value>3</value>
						<description>Device enable line behavior</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_FWDDELAY">
						<name>CFG_MODEM_FWDDELAY</name>
						<value>5</value>
						<description>Data packet forwarding delay</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_LOCALADDR">
						<name>CFG_MODEM_LOCALADDR</name>
						<value>7</value>
						<description>Modem local address</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_PRNTHEX">
						<name>CFG_MODEM_PRNTHEX</name>
						<value>8</value>
						<description>Print modem data hexadecimal</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_REMOTEADDR">
						<name>CFG_MODEM_REMOTEADDR</name>
						<value>9</value>
						<description>Modem default remote address</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_RXPKTTYPE">
						<name>CFG_MODEM_RXPKTTYPE</name>
						<value>10</value>
						<description>Receive packet type</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_SHOWBADDATA">
						<name>CFG_MODEM_SHOWBADDATA</name>
						<value>11</value>
						<description>Determine whether to process or discard data with bit errors</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_STARTTONES">
						<name>CFG_MODEM_STARTTONES</name>
						<value>12</value>
						<description>Control playing of startup tones upon boot</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_TXRATE">
						<name>CFG_MODEM_TXRATE</name>
						<value>13</value>
						<description>Acoustic transmit bitrate of data</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_TXPOWER">
						<name>CFG_MODEM_TXPOWER</name>
						<value>14</value>
						<description>Acoustic transmit power level</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_WAKETONES">
						<name>CFG_MODEM_WAKETONES</name>
						<value>15</value>
						<description>Control sending of wakeup preamble tones.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_RSVD1">
						<name>CFG_MODEM_RSVD1</name>
						<value>16</value>
						<description>Unused</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_INPUTMODE">
						<name>CFG_MODEM_INPUTMODE</name>
						<value>17</value>
						<description>Select the UART input mode for data transfer and data logging (single, dual)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_SMARTRETRY">
						<name>CFG_MODEM_SMARTRETRY</name>
						<value>18</value>
						<description>Control use of SmartRetry functionality for corrupted packet transmissions when data retries are enabled</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_L2PROTOCOL">
						<name>CFG_MODEM_L2PROTOCOL</name>
						<value>19</value>
						<description>Layer 2 Protocol selector</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_HEADERRATE">
						<name>CFG_MODEM_HEADERRATE</name>
						<value>20</value>
						<description>Acoustic transmit bitrate rate of header</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_DOMAINKEY">
						<name>CFG_MODEM_DOMAINKEY</name>
						<value>21</value>
						<description>Domain key that is used to create comms exclusivity groups</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_AUTODETECTHDR">
						<name>CFG_MODEM_AUTODETECTHDR</name>
						<value>22</value>
						<description>Determine whether to enable auto detect of header or use setting in HeaderRate parm</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_CHIRP_THRESHOLD">
						<name>CFG_MODEM_CHIRP_THRESHOLD</name>
						<value>23</value>
						<description>threshold adjustment for chirp detection</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_TXATTEN">
						<name>CFG_MODEM_TXATTEN</name>
						<value>24</value>
						<description>Sets the maximum acoustic SPL output; the @TxPower parameter range is scaled according to this parameter.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_MODEM::CFG_MODEM_ADDRGROUP">
						<name>CFG_MODEM_ADDRGROUP</name>
						<value>25</value>
						<description>Moves LocalAddr to another group</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_RELEASE">
				<name>CFG_SECT_RELEASE</name>
				<value>0x44</value>
				<description>Release functionality</description>
				<field_list count="9">
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_FSKRLSDUR">
						<name>CFG_RELEASE_FSKRLSDUR</name>
						<value>0</value>
						<description>Duration (seconds) to play Benthos FSK release tones</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_LSTCOMMSCNT">
						<name>CFG_RELEASE_LSTCOMMSCNT</name>
						<value>1</value>
						<description>Lost communication count (15 second increments)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_RLSCODE">
						<name>CFG_RELEASE_RLSCODE</name>
						<value>2</value>
						<description>Release code to trigger this release (valid on release models only)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_TIMEDRELEASE">
						<name>CFG_RELEASE_TIMEDRELEASE</name>
						<value>4</value>
						<description>Timeout count for timed releases</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_MOTORTYPE">
						<name>CFG_RELEASE_MOTORTYPE</name>
						<value>5</value>
						<description>Type of motor used in this release; only valid for releases which can support differing motor type</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_RLSMINENATIME">
						<name>CFG_RELEASE_RLSMINENATIME</name>
						<value>6</value>
						<description>Minimum on time for Release Enable</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_RLSMAXENATIME">
						<name>CFG_RELEASE_RLSMAXENATIME</name>
						<value>7</value>
						<description>Maximum on time for Release Enable</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RELEASE::CFG_RELEASE_ACOUTRIGTERM">
						<name>CFG_RELEASE_ACOUTRIGTERM</name>
						<value>8</value>
						<description>Terminating conditions for acoustic triggers</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_SERIAL">
				<name>CFG_SECT_SERIAL</name>
				<value>0x46</value>
				<description>UART paramters</description>
				<field_list count="19">
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1BAUD">
						<name>CFG_SERIAL_P1BAUD</name>
						<value>0</value>
						<description>Port 1 baud rate</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1ECHOCHAR">
						<name>CFG_SERIAL_P1ECHOCHAR</name>
						<value>1</value>
						<description>Port 1 echo (full/half duplex)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1FLOWCTL">
						<name>CFG_SERIAL_P1FLOWCTL</name>
						<value>2</value>
						<description>Port 1 flow control</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1IDLEPOL">
						<name>CFG_SERIAL_P1IDLEPOL</name>
						<value>3</value>
						<description>Port 1 idle polarity</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1PROTOCOL">
						<name>CFG_SERIAL_P1PROTOCOL</name>
						<value>4</value>
						<description>Port 1 comms protocol</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1STRIPB7">
						<name>CFG_SERIAL_P1STRIPB7</name>
						<value>5</value>
						<description>Port 1 strip bit 7</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1NOSLEEP">
						<name>CFG_SERIAL_P1NOSLEEP</name>
						<value>6</value>
						<description>Port 1 not counted towards activity for sleep</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2BAUD">
						<name>CFG_SERIAL_P2BAUD</name>
						<value>7</value>
						<description>Port 2 baud rate</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2ECHOCHAR">
						<name>CFG_SERIAL_P2ECHOCHAR</name>
						<value>8</value>
						<description>Port 2 echo (full/half duplex)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2FLOWCTL">
						<name>CFG_SERIAL_P2FLOWCTL</name>
						<value>9</value>
						<description>Port 2 flow control</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2IDLEPOL">
						<name>CFG_SERIAL_P2IDLEPOL</name>
						<value>10</value>
						<description>Port 2 idle polarity</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2STRIPB7">
						<name>CFG_SERIAL_P2STRIPB7</name>
						<value>11</value>
						<description>Port 2 strip bit 7</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2NOSLEEP">
						<name>CFG_SERIAL_P2NOSLEEP</name>
						<value>12</value>
						<description>Port 2 not counted towards activity for sleep</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1MODE">
						<name>CFG_SERIAL_P1MODE</name>
						<value>13</value>
						<description>Port 1 cooking mode</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2MODE">
						<name>CFG_SERIAL_P2MODE</name>
						<value>14</value>
						<description>Port 2 cooking mode</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2PROTOCOL">
						<name>CFG_SERIAL_P2PROTOCOL</name>
						<value>15</value>
						<description>Port 2 on RS232 or CMOS</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_LPFLOWCTL">
						<name>CFG_SERIAL_LPFLOWCTL</name>
						<value>16</value>
						<description>allow RTS lines to be off on lowpower, follow HW flow control or remain on</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P1PROMPT">
						<name>CFG_SERIAL_P1PROMPT</name>
						<value>17</value>
						<description>control prompt display level on Port 1</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SERIAL::CFG_SERIAL_P2PROMPT">
						<name>CFG_SERIAL_P2PROMPT</name>
						<value>18</value>
						<description>control prompt display level on Port 2</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_SYSTEM">
				<name>CFG_SECT_SYSTEM</name>
				<value>0x47</value>
				<description>System parameters</description>
				<field_list count="36">
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_AUXINP">
						<name>CFG_SYSTEM_AUXINP</name>
						<value>0</value>
						<description>Enable auxiliary acoustic input</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_ASCIIBIN">
						<name>CFG_SYSTEM_ASCIIBIN</name>
						<value>1</value>
						<description>Received data output in standard ASCII or as a hex byte dump</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_BANDWIDTH">
						<name>CFG_SYSTEM_BANDWIDTH</name>
						<value>2</value>
						<description></description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_CARRFREQ">
						<name>CFG_SYSTEM_CARRFREQ</name>
						<value>3</value>
						<description>Center carrier frequency (sets acoustic band)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_COMPMDMRST">
						<name>CFG_SYSTEM_COMPMDMRST</name>
						<value>4</value>
						<description>Compact modem reset: </description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_CMWAKEHIB">
						<name>CFG_SYSTEM_CMWAKEHIB</name>
						<value>5</value>
						<description>Compact modem wakeup hibernate time (formerly last digit of S-10 when &gt;300)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_CMWAKELISTEN">
						<name>CFG_SYSTEM_CMWAKELISTEN</name>
						<value>6</value>
						<description>Compact modem wakeup active listen time (formerly middle digit of S-10 when &gt;400)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_HALFBW">
						<name>CFG_SYSTEM_HALFBW</name>
						<value>7</value>
						<description>Half bandwidth modulation: 1 = Normal, 2 = half bandwidth</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_FHTHRESH">
						<name>CFG_SYSTEM_FHTHRESH</name>
						<value>8</value>
						<description>Frequency Hop receive threshold</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_RLSTYPE">
						<name>CFG_SYSTEM_RLSTYPE</name>
						<value>9</value>
						<description>Configuration of release type (factory-set)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_SYNCPPS">
						<name>CFG_SYSTEM_SYNCPPS</name>
						<value>10</value>
						<description>Mode for 1 PPS clock signal syncing</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_VERBOSE">
						<name>CFG_SYSTEM_VERBOSE</name>
						<value>11</value>
						<description>console status verbosity</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_WAKETHRESH">
						<name>CFG_SYSTEM_WAKETHRESH</name>
						<value>12</value>
						<description></description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_AUXOUT">
						<name>CFG_SYSTEM_AUXOUT</name>
						<value>13</value>
						<description>Control behavior of auxiliary acoustic output: either default behavior (speaker/phones for UDB, copies of samples for others), or force copies of outbound samples to aux port.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_VOLCONT">
						<name>CFG_SYSTEM_VOLCONT</name>
						<value>15</value>
						<description>Use an analog linear pot on EXT_SENSE1_ADC to control speaker and headphone volume</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_CMFASTWAKE">
						<name>CFG_SYSTEM_CMFASTWAKE</name>
						<value>16</value>
						<description>Enables fast wake from hibernate ability on compact modem (receiving side) and UDB (sending side).</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_IDLETIMER">
						<name>CFG_SYSTEM_IDLETIMER</name>
						<value>18</value>
						<description>Low-power idle timer</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_SYNCOUT">
						<name>CFG_SYSTEM_SYNCOUT</name>
						<value>20</value>
						<description>copy RTC PPS out on BIN_OUT_0</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_PULLUP0">
						<name>CFG_SYSTEM_PULLUP0</name>
						<value>21</value>
						<description>BIN_IN_0 pullup </description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_PULLUP1">
						<name>CFG_SYSTEM_PULLUP1</name>
						<value>22</value>
						<description>BIN_IN_1 pullup</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_MINOPVOLT">
						<name>CFG_SYSTEM_MINOPVOLT</name>
						<value>23</value>
						<description>The operating voltage threshold below which transmissions will be automatically reduced in power to prevent brown-out resets </description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_BATTERYTYPE">
						<name>CFG_SYSTEM_BATTERYTYPE</name>
						<value>24</value>
						<description>The type of battery being used to power the modem (Standard alkaline, Smart Li+, Lithium primary, etc.)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_BATTERYCAPACITY">
						<name>CFG_SYSTEM_BATTERYCAPACITY</name>
						<value>25</value>
						<description>The capacity of the installed battery pack in watt-hours.  Only for certain release products with battery monitoring capability.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_BATTERYMFGDATE">
						<name>CFG_SYSTEM_BATTERYMFGDATE</name>
						<value>26</value>
						<description>Manufacture date of the battery specifying month and year. Only for certain release products with battery monitoring capability.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_TILTAXIS">
						<name>CFG_SYSTEM_TILTAXIS</name>
						<value>27</value>
						<description>The axis of the built-in accelerometer to be used as the tilt/pitch reference</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_PWRONTIMER">
						<name>CFG_SYSTEM_PWRONTIMER</name>
						<value>28</value>
						<description>The Power On Timer used for Releases</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_AWAKETIMER">
						<name>CFG_SYSTEM_AWAKETIMER</name>
						<value>29</value>
						<description>The Awake Timer used for Releases</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_ARWAKEHIB">
						<name>CFG_SYSTEM_ARWAKEHIB</name>
						<value>30</value>
						<description>The Acoustic Release Hibernate Sleep period</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_RXSENS">
						<name>CFG_SYSTEM_RXSENS</name>
						<value>31</value>
						<description>hydrophone sensitivity in dB (uPa) for reference only</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_AWAKEPOWER">
						<name>CFG_SYSTEM_AWAKEPOWER</name>
						<value>32</value>
						<description>keep TR board 12V and 3.3V on when in active receive</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_TXSENS">
						<name>CFG_SYSTEM_TXSENS</name>
						<value>33</value>
						<description>Transmt Voltage Response, SPL in dB(uPa) at 1m at full power</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_TXINTERP">
						<name>CFG_SYSTEM_TXINTERP</name>
						<value>34</value>
						<description>Used for the Tx interpolation</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_SYSTEM::CFG_SYSTEM_IOMODE0">
						<name>CFG_SYSTEM_IOMODE0</name>
						<value>35</value>
						<description>Set behavior of external IO expansion signal 0 (UCT only)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_TEST">
				<name>CFG_SECT_TEST</name>
				<value>0x48</value>
				<description>Test functionality</description>
				<field_list count="9">
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_DBGLVL">
						<name>CFG_TEST_DBGLVL</name>
						<value>0</value>
						<description>Test debug level</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_RCVALL">
						<name>CFG_TEST_RCVALL</name>
						<value>1</value>
						<description>Receive all packets (sniffer mode)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_RSPDELAY">
						<name>CFG_TEST_RSPDELAY</name>
						<value>2</value>
						<description>Test response delay</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_PKTECHO">
						<name>CFG_TEST_PKTECHO</name>
						<value>3</value>
						<description>Test packet echo</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_PKTSIZE">
						<name>CFG_TEST_PKTSIZE</name>
						<value>4</value>
						<description>Test packet size</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_SIMACDLY">
						<name>CFG_TEST_SIMACDLY</name>
						<value>6</value>
						<description>Simulated variable acoustic delay, in milliseconds</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TEST::CFG_TEST_TXSATURATE">
						<name>CFG_TEST_TXSATURATE</name>
						<value>7</value>
						<description>Special test mode for enabling saturation on transmit</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_VERSION">
				<name>CFG_SECT_VERSION</name>
				<value>0x49</value>
				<description>Version information</description>
				<field_list count="3">
					<field operations="gn" id="CFG_SECT_VERSION::CFG_VERSION_SWAPPNAME">
						<name>CFG_VERSION_SWAPPNAME</name>
						<value>0</value>
						<description>Software application name string</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="CFG_SECT_VERSION::CFG_VERSION_SWVERSION">
						<name>CFG_VERSION_SWVERSION</name>
						<value>1</value>
						<description>Software version string</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gn" id="CFG_SECT_VERSION::CFG_VERSION_DBVERSION">
						<name>CFG_VERSION_DBVERSION</name>
						<value>2</value>
						<description>Configuration database version string</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_XPND">
				<name>CFG_SECT_XPND</name>
				<value>0x4A</value>
				<description>Transpond control</description>
				<field_list count="19">
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_RXFREQ">
						<name>CFG_XPND_RXFREQ</name>
						<value>0</value>
						<description>Frequency to listen for response pings (applicable only to platforms without Multi-Rx capability)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_RXLOCKOUT">
						<name>CFG_XPND_RXLOCKOUT</name>
						<value>1</value>
						<description>Ping response lockout, in milliseconds</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_RXTONEDUR">
						<name>CFG_XPND_RXTONEDUR</name>
						<value>2</value>
						<description>Receive pulse width (enumerated: 0 = 12.5 ms, 1 = 6.25 ms, 5 = 5 ms ... 15 = 15 ms)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_TAT">
						<name>CFG_XPND_TAT</name>
						<value>3</value>
						<description>Transpond turn-around time at remote node, in tenths of a millisecond</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_TXTONEDUR">
						<name>CFG_XPND_TXTONEDUR</name>
						<value>4</value>
						<description>Interrogation pulse width (enumerated: 0 = 12.5 ms, 1 = 6.25 ms, 5 = 5 ms ... 15 = 15 ms)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_RXTHRESH">
						<name>CFG_XPND_RXTHRESH</name>
						<value>5</value>
						<description>Receive detection threshold for transponder pings, in standard deviations above mean noise level</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_AGCREF">
						<name>CFG_XPND_AGCREF</name>
						<value>6</value>
						<description>The AGC level that should be set when the avg. background noise energy in the center of the band is at 1.  Lower values lower the noise floor allowing for more signal head-room; higher values raise it allowing more resolution for detecting weak signals.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_RESPFREQ">
						<name>CFG_XPND_RESPFREQ</name>
						<value>7</value>
						<description>Response tone sent on reception of tone set by CFG_XPND_RXFREQ after delay of CFG_XPND_TAT.</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_LBLMODE">
						<name>CFG_XPND_LBLMODE</name>
						<value>8</value>
						<description>Defines the action taken on the reception of a downward HFM chirp</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_XPNDEMUTAT">
						<name>CFG_XPND_XPNDEMUTAT</name>
						<value>9</value>
						<description>Transponder emulator response turn-around time in tenths of a millisecond</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_XPNDEMUMODE">
						<name>CFG_XPND_XPNDEMUMODE</name>
						<value>10</value>
						<description>Transponder emulator mode</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_HPR400CHAN">
						<name>CFG_XPND_HPR400CHAN</name>
						<value>11</value>
						<description>Set the HPR400 channel</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_RESPONDER">
						<name>CFG_XPND_RESPONDER</name>
						<value>12</value>
						<description>Enable Pulse responder mode</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_CHIRP_RESP">
						<name>CFG_XPND_CHIRP_RESP</name>
						<value>13</value>
						<description>Define response to be requested as a reply to at%rr command</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_BANDWIDTH">
						<name>CFG_XPND_BANDWIDTH</name>
						<value>14</value>
						<description>Set bandwidth for processing</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_LOGRESULTS">
						<name>CFG_XPND_LOGRESULTS</name>
						<value>15</value>
						<description>Enable logging to data logger</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_GAPSRX">
						<name>CFG_XPND_GAPSRX</name>
						<value>16</value>
						<description>Gaps family C code to recieve</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_GAPSTX">
						<name>CFG_XPND_GAPSTX</name>
						<value>17</value>
						<description>Gaps family C code to respond with</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_XPND::CFG_XPND_GAPSWAKE">
						<name>CFG_XPND_GAPSWAKE</name>
						<value>18</value>
						<description>Gaps family C code to respond with</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_DAT">
				<name>CFG_SECT_DAT</name>
				<value>0x4B</value>
				<description>(DAT ONLY) Directional Acoustic Transponder configuration</description>
				<field_list count="16">
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_PREGAIN">
						<name>CFG_DAT_PREGAIN</name>
						<value>0</value>
						<description>gain for DAT channels relative to main, in dB</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_ROTATION">
						<name>CFG_DAT_ROTATION</name>
						<value>1</value>
						<description>offset of acoustic zero to vehicle center line</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_VERBOSE">
						<name>CFG_DAT_VERBOSE</name>
						<value>2</value>
						<description>bits defining DAT report fields </description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_RXONDAT">
						<name>CFG_DAT_RXONDAT</name>
						<value>3</value>
						<description>main receiver uses DAT hydrophone</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_WRAPRANGE">
						<name>CFG_DAT_WRAPRANGE</name>
						<value>4</value>
						<description>for one way flight times of multiple seconds </description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_ORIENTATION">
						<name>CFG_DAT_ORIENTATION</name>
						<value>5</value>
						<description>transducer points up or down</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_PHASEA">
						<name>CFG_DAT_PHASEA</name>
						<value>6</value>
						<description>phase offset for reciever module A</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_PHASEB">
						<name>CFG_DAT_PHASEB</name>
						<value>7</value>
						<description>phase offset for reciever module B</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_PHASEC">
						<name>CFG_DAT_PHASEC</name>
						<value>8</value>
						<description>phase offset for reciever module C</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_PHASED">
						<name>CFG_DAT_PHASED</name>
						<value>9</value>
						<description>phase offset for reciever module D</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_BEARINGRESP">
						<name>CFG_DAT_BEARINGRESP</name>
						<value>10</value>
						<description>bearing response type</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_VTHRESH">
						<name>CFG_DAT_VTHRESH</name>
						<value>11</value>
						<description>vector quality threshold</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_MIN_ELEV">
						<name>CFG_DAT_MIN_ELEV</name>
						<value>12</value>
						<description>minimum acceptable elevation</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_MAX_ELEV">
						<name>CFG_DAT_MAX_ELEV</name>
						<value>13</value>
						<description>maximum acceptable elevation</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_PHASEREF">
						<name>CFG_DAT_PHASEREF</name>
						<value>14</value>
						<description>replica to use as reference for phase offset detection</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_DAT::CFG_DAT_ARRIVAL">
						<name>CFG_DAT_ARRIVAL</name>
						<value>15</value>
						<description>Special test mode DAT for first or peak arrival</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_NAV">
				<name>CFG_SECT_NAV</name>
				<value>0x4C</value>
				<description>Navigation and Positioning</description>
				<field_list count="15">
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_LATITUDE">
						<name>CFG_NAV_LATITUDE</name>
						<value>0</value>
						<description>Latitude  in millionths of a degree</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_LONGITUDE">
						<name>CFG_NAV_LONGITUDE</name>
						<value>1</value>
						<description>Longitude in millionths of a degree</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_GPSALT">
						<name>CFG_NAV_GPSALT</name>
						<value>2</value>
						<description>absolute altitude relative to WGS84</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_ALTITUDE">
						<name>CFG_NAV_ALTITUDE</name>
						<value>3</value>
						<description>altitude above sea floor in meters</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_DEPTH">
						<name>CFG_NAV_DEPTH</name>
						<value>4</value>
						<description>depth below sea level in meters</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_COMPASS">
						<name>CFG_NAV_COMPASS</name>
						<value>5</value>
						<description>compass bearing in degrees</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_PITCH">
						<name>CFG_NAV_PITCH</name>
						<value>6</value>
						<description>pitch in degrees</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_ROLL">
						<name>CFG_NAV_ROLL</name>
						<value>7</value>
						<description>roll in degrees</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_CSOUND">
						<name>CFG_NAV_CSOUND</name>
						<value>8</value>
						<description>speed of sound in m/s</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_REPLY_DATA">
						<name>CFG_NAV_REPLY_DATA</name>
						<value>9</value>
						<description>additional data fields for position information</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_HEADOFFSET">
						<name>CFG_NAV_HEADOFFSET</name>
						<value>10</value>
						<description>offset of compass heading to vehicle center line</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_SYNCRANGING">
						<name>CFG_NAV_SYNCRANGING</name>
						<value>11</value>
						<description>Enable one-way ranging on data transmissions when sychronized to external 1PPS sources</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_PITCHOFFSET">
						<name>CFG_NAV_PITCHOFFSET</name>
						<value>12</value>
						<description>offset of AHRS pitch to transducer plane</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_ROLLOFFSET">
						<name>CFG_NAV_ROLLOFFSET</name>
						<value>13</value>
						<description>offset of AHRS roll to transducer plane</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_NAV::CFG_NAV_GPSSYNCMSG">
						<name>CFG_NAV_GPSSYNCMSG</name>
						<value>14</value>
						<description>The type of GPS sentence, if any, that may be used to adjust the modem&apos;s system clock</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_RECORDER">
				<name>CFG_SECT_RECORDER</name>
				<value>0x4D</value>
				<description>In-band acoustic data recorder configuration</description>
				<field_list count="5">
					<field operations="gsn" id="CFG_SECT_RECORDER::CFG_RECORDER_RECMODE">
						<name>CFG_RECORDER_RECMODE</name>
						<value>1</value>
						<description>recording mode for automatic recording</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_RECORDER::CFG_RECORDER_NAMEFORMAT">
						<name>CFG_RECORDER_NAMEFORMAT</name>
						<value>3</value>
						<description>format of names for recorded audio files</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_TRANSPORT">
				<name>CFG_SECT_TRANSPORT</name>
				<value>0x50</value>
				<description>Transport layer routing/tagging information</description>
				<field_list count="8">
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_L4ENB">
						<name>CFG_TRANSPORT_L4ENB</name>
						<value>0</value>
						<description>Global enable or disable for transport layer activity</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_TPMODE">
						<name>CFG_TRANSPORT_TPMODE</name>
						<value>1</value>
						<description>Enable mode for transport layer addressing information (force always on or track with InputMode)</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_SRCP1">
						<name>CFG_TRANSPORT_SRCP1</name>
						<value>2</value>
						<description>Transport address to be applied to transmitted packets originating on UART 0</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_SRCP2">
						<name>CFG_TRANSPORT_SRCP2</name>
						<value>3</value>
						<description>Transport address to be applied to transmitted packets originating on UART 1</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_DST1">
						<name>CFG_TRANSPORT_DST1</name>
						<value>16</value>
						<description>Delivery destination for received packets tagged with transport address 1</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_DST2">
						<name>CFG_TRANSPORT_DST2</name>
						<value>17</value>
						<description>Delivery destination for received packets tagged with transport address 2</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_DST3">
						<name>CFG_TRANSPORT_DST3</name>
						<value>18</value>
						<description>Delivery destination for received packets tagged with transport address 3</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_TRANSPORT::CFG_TRANSPORT_DST4">
						<name>CFG_TRANSPORT_DST4</name>
						<value>19</value>
						<description>Delivery destination for received packets tagged with transport address 4</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_AIN">
				<name>CFG_SECT_AIN</name>
				<value>0x52</value>
				<description>!NODOC Analog Input Option</description>
				<field_list count="21">
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_POLLRATE">
						<name>CFG_AIN_POLLRATE</name>
						<value>0</value>
						<description>time interval for automated polling</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_1NMEAS">
						<name>CFG_AIN_1NMEAS</name>
						<value>1</value>
						<description>number of measurements on chan 1</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_1STRTDLY">
						<name>CFG_AIN_1STRTDLY</name>
						<value>2</value>
						<description>delay in 1st reading after turn-on (ch1)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_1RPTDLY">
						<name>CFG_AIN_1RPTDLY</name>
						<value>3</value>
						<description>delay in each additional reading (ch1)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_1TYPE">
						<name>CFG_AIN_1TYPE</name>
						<value>4</value>
						<description>type of sensor on chan 1</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_2NMEAS">
						<name>CFG_AIN_2NMEAS</name>
						<value>5</value>
						<description>number of measurements on chan 2</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_2STRTDLY">
						<name>CFG_AIN_2STRTDLY</name>
						<value>6</value>
						<description>delay in 1st reading after turn-on (ch2)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_2RPTDLY">
						<name>CFG_AIN_2RPTDLY</name>
						<value>7</value>
						<description>delay in each additional reading (ch2)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_2TYPE">
						<name>CFG_AIN_2TYPE</name>
						<value>8</value>
						<description>type of sensor on chan 2</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_3NMEAS">
						<name>CFG_AIN_3NMEAS</name>
						<value>9</value>
						<description>number of measurements on chan 3</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_3STRTDLY">
						<name>CFG_AIN_3STRTDLY</name>
						<value>10</value>
						<description>delay in 1st reading after turn-on (ch3)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_3RPTDLY">
						<name>CFG_AIN_3RPTDLY</name>
						<value>11</value>
						<description>delay in each additional reading (ch3)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_4NMEAS">
						<name>CFG_AIN_4NMEAS</name>
						<value>12</value>
						<description>number of measurements on chan 4</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_4STRTDLY">
						<name>CFG_AIN_4STRTDLY</name>
						<value>13</value>
						<description>delay in 1st reading after turn-on (ch4)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_4RPTDLY">
						<name>CFG_AIN_4RPTDLY</name>
						<value>14</value>
						<description>delay in each additional reading (ch4)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_5NMEAS">
						<name>CFG_AIN_5NMEAS</name>
						<value>15</value>
						<description>number of measurements on chan 5</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_5STRTDLY">
						<name>CFG_AIN_5STRTDLY</name>
						<value>16</value>
						<description>delay in 1st reading after turn-on (ch5)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_5RPTDLY">
						<name>CFG_AIN_5RPTDLY</name>
						<value>17</value>
						<description>delay in each additional reading (ch5)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_6NMEAS">
						<name>CFG_AIN_6NMEAS</name>
						<value>18</value>
						<description>number of measurements on chan 6</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_6STRTDLY">
						<name>CFG_AIN_6STRTDLY</name>
						<value>19</value>
						<description>delay in 1st reading after turn-on (ch6)</description>
					</field>
					<field operations="gsn" id="CFG_SECT_AIN::CFG_AIN_6RPTDLY">
						<name>CFG_AIN_6RPTDLY</name>
						<value>20</value>
						<description>delay in each additional reading (ch6)</description>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_PRESSURE">
				<name>CFG_SECT_PRESSURE</name>
				<value>0x53</value>
				<description>!NODOC Pressure gauge options (requires analog input)</description>
				<field_list count="4">
					<field operations="gsn" id="CFG_SECT_PRESSURE::CFG_PRESSURE_AINCHNL">
						<name>CFG_PRESSURE_AINCHNL</name>
						<value>0</value>
						<description>Analog input channel where the pressure transducer is connected, or 0 if none</description>
					</field>
					<field operations="gsn" id="CFG_SECT_PRESSURE::CFG_PRESSURE_METERSPERPSI">
						<name>CFG_PRESSURE_METERSPERPSI</name>
						<value>1</value>
						<description>Conversion factor for pressure, number of meters per psi</description>
					</field>
					<field operations="gsn" id="CFG_SECT_PRESSURE::CFG_PRESSURE_ATMOFFSET">
						<name>CFG_PRESSURE_ATMOFFSET</name>
						<value>2</value>
						<description>Atmospheric pressure in PSI to be subtracted from pressure reading when converting to depth below sea level</description>
					</field>
					<field operations="gsn" id="CFG_SECT_PRESSURE::CFG_PRESSURE_PSI">
						<name>CFG_PRESSURE_PSI</name>
						<value>3</value>
						<description>The pressure in pounds per square inch (psi) as set by user or updated from pressure gauge</description>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_USBL">
				<name>CFG_SECT_USBL</name>
				<value>0x54</value>
				<description>(DAT ONLY) USBL control section</description>
				<field_list count="6">
					<field operations="gsn" id="CFG_SECT_USBL::CFG_USBL_FORMAT">
						<name>CFG_USBL_FORMAT</name>
						<value>0</value>
						<description>USBL bearing reporting format</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_USBL::CFG_USBL_DEPTH_QUERY">
						<name>CFG_USBL_DEPTH_QUERY</name>
						<value>1</value>
						<description>enable to query depth on every USBL cycle</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_USBL::CFG_USBL_REPEAT_QUERY">
						<name>CFG_USBL_REPEAT_QUERY</name>
						<value>2</value>
						<description>number of rapid range in every USBL cycle</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_USBL::CFG_USBL_AUTO_QUERY">
						<name>CFG_USBL_AUTO_QUERY</name>
						<value>3</value>
						<description>set to start acoustic of pulse cycles on boot</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_USBL::CFG_USBL_AUTO_DELAY">
						<name>CFG_USBL_AUTO_DELAY</name>
						<value>4</value>
						<description>delay between cycles in seconds</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
					<field operations="gsn" id="CFG_SECT_USBL::CFG_USBL_XDCER_DEPTH">
						<name>CFG_USBL_XDCER_DEPTH</name>
						<value>5</value>
						<description>depth of USBL head below surface in tenths of a meter</description>
						<subfield_list count="4" size="variable">
							<subfield order="0" id="mmp_cfg_paramval_t::val_or_len">
								<name>val_or_len</name>
								<size>4</size>
								<description>Value for 32-bit types, or length of variable length types (CFG_STR, CFG_CSTM)</description>
								<signed>1</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_various_t::various_values">
										<name>various_values</name>
										<value>0</value>
										<description>Values here should be appropriate for the subsystem::field being set/gotten.</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="1" id="mmp_cfg_paramval_t::places">
								<name>places</name>
								<size>1</size>
								<description>For GET operations, the number of places to format the number as.  If type is CFG_NUM32 and places is non-zero, then the val_or_len value must be divided appropriately to provide the correct number of decimal places.</description>
								<signed>0</signed>
							</subfield>
							<subfield order="2" id="mmp_cfg_paramval_t::type">
								<name>type</name>
								<size>1</size>
								<description>Type of the config parameter (GET only, ignored on SET)</description>
								<signed>0</signed>
								<enumeration_list count="8">
									<enumeration id="cfg_param_type_t::CFG_NUM16">
										<name>CFG_NUM16</name>
										<value>0</value>
										<description>A signed 16-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_NUM32">
										<name>CFG_NUM32</name>
										<value>1</value>
										<description>A signed 32-bit integer</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_STR">
										<name>CFG_STR</name>
										<value>2</value>
										<description>A variable length character string</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BOOL">
										<name>CFG_BOOL</name>
										<value>3</value>
										<description>A Boolean value (0 for false, 1 for true)</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_FIXED">
										<name>CFG_FIXED</name>
										<value>4</value>
										<description>A 32-bit integer representing a fractional number with 0.0001 precision.  Divide this integer value by 10000 to obtain the true fractional value it represents.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_ENUM">
										<name>CFG_ENUM</name>
										<value>5</value>
										<description>A 32-bit signed enumerated value.  This config parameter is restricted to a finite set of pre-defined values dependent on which configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_CSTM">
										<name>CFG_CSTM</name>
										<value>6</value>
										<description>A custom format with layout dependent on the configuration field it applies to.</description>
									</enumeration>
									<enumeration id="cfg_param_type_t::CFG_BITMASK">
										<name>CFG_BITMASK</name>
										<value>7</value>
										<description>A format allowing the sum of valid values</description>
									</enumeration>
								</enumeration_list>
							</subfield>
							<subfield order="3" id="mmp_cfg_paramval_t::buf">
								<name>buf</name>
								<size>1</size>
								<description>Variable length buffer to contain value of config parameter if it is not a standard 32-bit type [sizevar=val_or_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_cfg_paramval_t::val_or_len" multiplier="1">variable</array_size>
							</subfield>
						</subfield_list>
					</field>
				</field_list>
			</subsys>
			<subsys id="CFG_SECT_JANUS">
				<name>CFG_SECT_JANUS</name>
				<value>0x56</value>
				<description>JANUS configuration parameters</description>
				<field_list count="3">
					<field operations="gsn" id="CFG_SECT_JANUS::CFG_JANUS_CLASSUSERID">
						<name>CFG_JANUS_CLASSUSERID</name>
						<value>0</value>
						<description>DPSK board enable - control for the feature</description>
					</field>
					<field operations="gsn" id="CFG_SECT_JANUS::CFG_JANUS_APPTYPE">
						<name>CFG_JANUS_APPTYPE</name>
						<value>1</value>
						<description>Logging of DPSK Data</description>
					</field>
					<field operations="gsn" id="CFG_SECT_JANUS::CFG_JANUS_MACTHRESH">
						<name>CFG_JANUS_MACTHRESH</name>
						<value>2</value>
						<description>DPSK Acoustic Ouput Format</description>
					</field>
				</field_list>
			</subsys>
		</subsys_list>
		<cmdsect_list count="4">
			<cmdsect id="NULL">
				<name>NULL</name>
				<value>0x00</value>
				<description>Null command section (unused)</description>
				<cmd_list count="0">
				</cmd_list>
			</cmdsect>
			<cmdsect id="STD">
				<name>STD</name>
				<value>0x01</value>
				<description>Standard commands and operations supported on most modem-based platforms</description>
				<cmd_list count="41">
					<cmd operations="x" id="STD::INFO">
						<name>INFO</name>
						<value>0x00</value>
						<description>Obtain modem build info (similar to ATI shell command)</description>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_MMPREQ">
						<name>REMOTE_MMPREQ</name>
						<value>0x01</value>
						<description>Initiate an acoustic MMP request to another modem.  Remote MMP request should be embedded in the data field (no @ sentinel needed). Not implemented on networking builds.</description>
						<parameter_list count="4" size="variable">
							<parameter order="0" id="mmp_remote_request_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of modem to send remote request to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_request_t::flags">
								<name>flags</name>
								<size>2</size>
								<description>Contains a number of flags controlling various aspects of the acoustic request</description>
								<signed>0</signed>
								<enumeration_list count="1">
									<enumeration id="mmp_remote_request_flag_t::REMOTE_MMP_FLAG_ACKONLY">
										<name>REMOTE_MMP_FLAG_ACKONLY</name>
										<value>0x01</value>
										<description>REMOTE_MMPREQ ONLY: requests a simple ACK/NACK from the remote instead of a fully-formed MMP response</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="2" id="mmp_remote_request_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data in bytes</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_remote_request_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field, length should match len parameter [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_remote_request_t::len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="3" size="variable">
								<result order="0" id="mmp_remote_mmpresp_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>The address of the remote modem from which the MMP string was received</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_mmpresp_t::len">
									<name>len</name>
									<size>2</size>
									<description>The length of the MMP response string from the remote modem</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_remote_mmpresp_t::data">
									<name>data</name>
									<size>1</size>
									<description>The MMP response string from the remote modem [sizevar=len]</description>
									<signed>1</signed>
									<array_size varid="mmp_remote_mmpresp_t::len" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::FLASH_SREGS">
						<name>FLASH_SREGS</name>
						<value>0x02</value>
						<description>Save S-registers to flash (soon to be deprecated)</description>
					</cmd>
					<cmd operations="x" id="STD::RESET_SREGS">
						<name>RESET_SREGS</name>
						<value>0x03</value>
						<description>Reset S-registers to factory defaults (soon to be deprecated)</description>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_SETACOUBAUD">
						<name>REMOTE_SETACOUBAUD</name>
						<value>0x04</value>
						<description>Set acoustic baud rate on remote modem</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_remote_setacoubaud_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of remote modem to modify acoustic baud rate of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_setacoubaud_t::modspec">
								<name>modspec</name>
								<size>2</size>
								<description>New acoustic baud rate (maps to Sreg-4)</description>
								<signed>0</signed>
								<enumeration_list count="20">
									<enumeration id="modspec_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_SETTXPOWER">
						<name>REMOTE_SETTXPOWER</name>
						<value>0x05</value>
						<description>Set transmit power on remote modem</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_remote_settxpower_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of remote modem to modify power level of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_settxpower_t::txpower">
								<name>txpower</name>
								<size>2</size>
								<description>New acoustic transmit power level (maps to Sreg-6)</description>
								<signed>0</signed>
								<enumeration_list count="10">
									<enumeration id="txpower_t::TXPOWER_21DB">
										<name>TXPOWER_21DB</name>
										<value>1</value>
										<description>-21 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_18DB">
										<name>TXPOWER_18DB</name>
										<value>2</value>
										<description>-18 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_15DB">
										<name>TXPOWER_15DB</name>
										<value>3</value>
										<description>-15 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_12DB">
										<name>TXPOWER_12DB</name>
										<value>4</value>
										<description>-12 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_9DB">
										<name>TXPOWER_9DB</name>
										<value>5</value>
										<description>-9 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_6DB">
										<name>TXPOWER_6DB</name>
										<value>6</value>
										<description>-6 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_3DB">
										<name>TXPOWER_3DB</name>
										<value>7</value>
										<description>-3 dB</description>
									</enumeration>
									<enumeration id="txpower_t::TXPOWER_MAX">
										<name>TXPOWER_MAX</name>
										<value>8</value>
										<description>0 dB (full transmit power)</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_GETSREGS">
						<name>REMOTE_GETSREGS</name>
						<value>0x06</value>
						<description>Get S-registers from remote modem (soon to be deprecated)</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="44">
								<result order="0" id="mmp_remote_sregisters_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of remote node which the S-register data is from</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_sregisters_t::sregs">
									<name>sregs</name>
									<size>2</size>
									<description>Array of remote S-register data</description>
									<signed>0</signed>
									<array_size>21</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_SENDDATA">
						<name>REMOTE_SENDDATA</name>
						<value>0x07</value>
						<description>Send data packet to remote modem</description>
						<parameter_list count="4" size="variable">
							<parameter order="0" id="mmp_remote_senddata_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of modem to send data to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_senddata_t::transport">
								<name>transport</name>
								<size>2</size>
								<description>The transport address to route data to on the far end (SENDDATA &amp; SENDBREAK only)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_remote_senddata_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data in bytes (always 0 for SENDBREAK)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_remote_senddata_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field, length should match len parameter [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_remote_senddata_t::len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_TESTLINK">
						<name>REMOTE_TESTLINK</name>
						<value>0x08</value>
						<description>Test acoustic link with remote modem</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="14" size="28">
								<result order="0" id="mmp_remote_testmsgstats_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of remote link to test</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_testmsgstats_t::mod_spec">
									<name>mod_spec</name>
									<size>2</size>
									<description>Modulation specification</description>
									<signed>0</signed>
									<enumeration_list count="20">
										<enumeration id="modspec_t::MODSPEC_NULL">
											<name>MODSPEC_NULL</name>
											<value>0</value>
											<description>Null modspec value</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_80_STDFH">
											<name>MODSPEC_80_STDFH</name>
											<value>1</value>
											<description>80 bps FH</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_140_MFSK">
											<name>MODSPEC_140_MFSK</name>
											<value>2</value>
											<description>140 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_300_MFSK">
											<name>MODSPEC_300_MFSK</name>
											<value>3</value>
											<description>300 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_600_MFSK">
											<name>MODSPEC_600_MFSK</name>
											<value>4</value>
											<description>600 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_800_MFSK">
											<name>MODSPEC_800_MFSK</name>
											<value>5</value>
											<description>800 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_1066_MFSK">
											<name>MODSPEC_1066_MFSK</name>
											<value>6</value>
											<description>1066 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_1200_MFSK">
											<name>MODSPEC_1200_MFSK</name>
											<value>7</value>
											<description>1200 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_2400_MFSK">
											<name>MODSPEC_2400_MFSK</name>
											<value>8</value>
											<description>2400 bps MFSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_2560_PSK">
											<name>MODSPEC_2560_PSK</name>
											<value>9</value>
											<description>2560 bps PSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_5120_PSK">
											<name>MODSPEC_5120_PSK</name>
											<value>10</value>
											<description>5120 bps PSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_7680_PSK">
											<name>MODSPEC_7680_PSK</name>
											<value>11</value>
											<description>7680 bps PSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_10240_PSK">
											<name>MODSPEC_10240_PSK</name>
											<value>12</value>
											<description>10240 bps PSK</description>
										</enumeration>
										<enumeration id="modspec_t::MODSPEC_15360_PSK">
											<name>MODSPEC_15360_PSK</name>
											<value>13</value>
											<description>15360 bps PSK</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="2" id="mmp_remote_testmsgstats_t::speedx10">
									<name>speedx10</name>
									<size>2</size>
									<description>Estimated speed (doppler) in 1/10 knots units	</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_remote_testmsgstats_t::acq_SNRx10">
									<name>acq_SNRx10</name>
									<size>2</size>
									<description>Acquisition SNR x 10 (factory use only)</description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_remote_testmsgstats_t::acq_MPDx10">
									<name>acq_MPDx10</name>
									<size>2</size>
									<description>Acquisition multipath delay in 1/10 ms units</description>
									<signed>0</signed>
								</result>
								<result order="5" id="mmp_remote_testmsgstats_t::acq_RCT">
									<name>acq_RCT</name>
									<size>2</size>
									<description>Received chirp threshold (factory use only)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="mmp_remote_testmsgstats_t::acq_FSNR">
									<name>acq_FSNR</name>
									<size>2</size>
									<description>First SNR (factory use only)</description>
									<signed>1</signed>
								</result>
								<result order="7" id="mmp_remote_testmsgstats_t::hdr_SNRx10">
									<name>hdr_SNRx10</name>
									<size>2</size>
									<description>Header SNR x 10</description>
									<signed>1</signed>
								</result>
								<result order="8" id="mmp_remote_testmsgstats_t::hdr_CCERR">
									<name>hdr_CCERR</name>
									<size>2</size>
									<description>Soft decision metric for convolutional decoder (factory use only)</description>
									<signed>0</signed>
								</result>
								<result order="9" id="mmp_remote_testmsgstats_t::msg_ERR">
									<name>msg_ERR</name>
									<size>2</size>
									<description>Bit errors in message body</description>
									<signed>0</signed>
								</result>
								<result order="10" id="mmp_remote_testmsgstats_t::msg_SNRx10">
									<name>msg_SNRx10</name>
									<size>2</size>
									<description>Message body SNR x 10 (factory use only)</description>
									<signed>1</signed>
								</result>
								<result order="11" id="mmp_remote_testmsgstats_t::msg_AGC">
									<name>msg_AGC</name>
									<size>2</size>
									<description>AGC value at message receive</description>
									<signed>0</signed>
								</result>
								<result order="12" id="mmp_remote_testmsgstats_t::msg_CCERR">
									<name>msg_CCERR</name>
									<size>2</size>
									<description>Soft decision metric for convolutional decoder in the message body (factory use only)</description>
									<signed>0</signed>
								</result>
								<result order="13" id="mmp_remote_testmsgstats_t::remote_txpwr">
									<name>remote_txpwr</name>
									<size>2</size>
									<description>Transmit power of remote unit (if available, 0x7FFF if unknown)</description>
									<signed>1</signed>
									<enumeration_list count="18">
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_UNAVAIL">
											<name>TXPOWER_UNAVAIL</name>
											<value>0x7FFF</value>
											<description>No power level available</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_0DB">
											<name>TXPOWER_REDUCED_0DB</name>
											<value>0</value>
											<description>Reduced output 0 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_3DB">
											<name>TXPOWER_REDUCED_3DB</name>
											<value>-1</value>
											<description>Reduced output -3 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_6DB">
											<name>TXPOWER_REDUCED_6DB</name>
											<value>-2</value>
											<description>Reduced output -6 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_9DB">
											<name>TXPOWER_REDUCED_9DB</name>
											<value>-3</value>
											<description>Reduced output -9 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_12DB">
											<name>TXPOWER_REDUCED_12DB</name>
											<value>-4</value>
											<description>Reduced output -12 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_15dB">
											<name>TXPOWER_REDUCED_15dB</name>
											<value>-5</value>
											<description>Reduced output -15 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_REDUCED_18dB">
											<name>TXPOWER_REDUCED_18dB</name>
											<value>-6</value>
											<description>Reduced output -18 dB (non-standard)</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_21DB">
											<name>TXPOWER_21DB</name>
											<value>1</value>
											<description>-21 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_18DB">
											<name>TXPOWER_18DB</name>
											<value>2</value>
											<description>-18 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_15DB">
											<name>TXPOWER_15DB</name>
											<value>3</value>
											<description>-15 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_12DB">
											<name>TXPOWER_12DB</name>
											<value>4</value>
											<description>-12 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_9DB">
											<name>TXPOWER_9DB</name>
											<value>5</value>
											<description>-9 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_6DB">
											<name>TXPOWER_6DB</name>
											<value>6</value>
											<description>-6 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_3DB">
											<name>TXPOWER_3DB</name>
											<value>7</value>
											<description>-3 dB</description>
										</enumeration>
										<enumeration id="mmp_remote_testmsgstats_txpwr_t::TXPOWER_MAX">
											<name>TXPOWER_MAX</name>
											<value>8</value>
											<description>0 dB (full transmit power)</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::UPDATE_FIRMWARE">
						<name>UPDATE_FIRMWARE</name>
						<value>0x09</value>
						<description>Begin firmware update cycle</description>
						<parameter_list count="1" size="4">
							<parameter order="0" id="mmp_update_firmware_t::addr">
								<name>addr</name>
								<size>4</size>
								<description>Identifier specifying which firmware image to update: 0x200000 = boot, 0x220000 = modem, 0x260000 = diag</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::RESET">
						<name>RESET</name>
						<value>0x0A</value>
						<description>Reboot the modem</description>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_GETBATT">
						<name>REMOTE_GETBATT</name>
						<value>0x0B</value>
						<description>Get battery levels on remote modem</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="3" size="6">
								<result order="0" id="mmp_remote_battvoltage_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of remote modem to get battery voltage from	</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_battvoltage_t::batt_voltage">
									<name>batt_voltage</name>
									<size>2</size>
									<description>Remote modem battery voltage, in tenths of a volt</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_remote_battvoltage_t::aux_voltage">
									<name>aux_voltage</name>
									<size>2</size>
									<description>Remote modem auxiliary voltage, in tenths of a volt</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_CMWAKEUP">
						<name>REMOTE_CMWAKEUP</name>
						<value>0x0C</value>
						<description>Issue a compact modem wakeup sequence to a remote compact modem</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_remote_cmwakeup_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of compact modem to awaken (may be broadcast or group)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_cmwakeup_t::stay_awake_mins">
								<name>stay_awake_mins</name>
								<size>2</size>
								<description>Number of minutes for remote compact modem to stay awake before being allowed to idle into hibernate.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_GETAGCHIST">
						<name>REMOTE_GETAGCHIST</name>
						<value>0x0D</value>
						<description>Obtain the AGC history for the last 10 seconds from a remote modem</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="22">
								<result order="0" id="mmp_remote_agchist_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of remote modem to get 10 second AGC history from</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_agchist_t::rem_agc">
									<name>rem_agc</name>
									<size>2</size>
									<description>AGC history of remote modem; 8-bit packed so hi/lo values share each index</description>
									<signed>0</signed>
									<array_size>10</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_AUTOBAUD">
						<name>REMOTE_AUTOBAUD</name>
						<value>0x0E</value>
						<description>Initiate an auto-baud sequence to a remote modem to set an optimal acoustic baud rate between them</description>
						<parameter_list count="5" size="10">
							<parameter order="0" id="mmp_remote_autobaud_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of the remote modem to conduct the auto baud handshake with</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_autobaud_t::max_modspec">
								<name>max_modspec</name>
								<size>2</size>
								<description>The maximum modspec/bitrate to begin testing at (max of MODSPEC_15360_PSK if coprocessor installed, or MODSPEC_2400_MFSK otherwise)</description>
								<signed>0</signed>
								<enumeration_list count="20">
									<enumeration id="modspec_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="2" id="mmp_remote_autobaud_t::min_modspec">
								<name>min_modspec</name>
								<size>2</size>
								<description>The minimum modspec/bitrate to end testing at (min of MODSPEC_300_MFSK)</description>
								<signed>0</signed>
								<enumeration_list count="20">
									<enumeration id="modspec_t::MODSPEC_NULL">
										<name>MODSPEC_NULL</name>
										<value>0</value>
										<description>Null modspec value</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_80_STDFH">
										<name>MODSPEC_80_STDFH</name>
										<value>1</value>
										<description>80 bps FH</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_140_MFSK">
										<name>MODSPEC_140_MFSK</name>
										<value>2</value>
										<description>140 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_300_MFSK">
										<name>MODSPEC_300_MFSK</name>
										<value>3</value>
										<description>300 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_600_MFSK">
										<name>MODSPEC_600_MFSK</name>
										<value>4</value>
										<description>600 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_800_MFSK">
										<name>MODSPEC_800_MFSK</name>
										<value>5</value>
										<description>800 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1066_MFSK">
										<name>MODSPEC_1066_MFSK</name>
										<value>6</value>
										<description>1066 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_1200_MFSK">
										<name>MODSPEC_1200_MFSK</name>
										<value>7</value>
										<description>1200 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2400_MFSK">
										<name>MODSPEC_2400_MFSK</name>
										<value>8</value>
										<description>2400 bps MFSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_2560_PSK">
										<name>MODSPEC_2560_PSK</name>
										<value>9</value>
										<description>2560 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_5120_PSK">
										<name>MODSPEC_5120_PSK</name>
										<value>10</value>
										<description>5120 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_7680_PSK">
										<name>MODSPEC_7680_PSK</name>
										<value>11</value>
										<description>7680 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_10240_PSK">
										<name>MODSPEC_10240_PSK</name>
										<value>12</value>
										<description>10240 bps PSK</description>
									</enumeration>
									<enumeration id="modspec_t::MODSPEC_15360_PSK">
										<name>MODSPEC_15360_PSK</name>
										<value>13</value>
										<description>15360 bps PSK</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="3" id="mmp_remote_autobaud_t::max_bit_errs">
								<name>max_bit_errs</name>
								<size>2</size>
								<description>Maximum allowable bit error count (0 to 999) in a 2048-bit packet</description>
								<signed>0</signed>
							</parameter>
							<parameter order="4" id="mmp_remote_autobaud_t::set_flags">
								<name>set_flags</name>
								<size>2</size>
								<description>Control flags to modify the autobaud behavior - may be ORed together to achieve desired effect</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="autobaud_set_flags_t::AUTOBAUD_LOCAL_SET">
										<name>AUTOBAUD_LOCAL_SET</name>
										<value>0x01</value>
										<description>When set, causes the the local modem to set its own transmission baud rate to the best one found</description>
									</enumeration>
									<enumeration id="autobaud_set_flags_t::AUTOBAUD_REMOTE_SET">
										<name>AUTOBAUD_REMOTE_SET</name>
										<value>0x02</value>
										<description></description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="4" size="8">
								<result order="0" id="mmp_remote_autobaud_result_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of the remote modem the autobaud sequence was conducted with</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_autobaud_result_t::modspec">
									<name>modspec</name>
									<size>2</size>
									<description>The highest modulation rate found with acceptable bit error count (MODSPEC_NULL if none qualified)</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_remote_autobaud_result_t::bit_errs">
									<name>bit_errs</name>
									<size>2</size>
									<description>Measured bit error count of the best qualifying modulation rate (capped at 999)</description>
									<signed>0</signed>
								</result>
								<result order="3" id="mmp_remote_autobaud_result_t::set_flags">
									<name>set_flags</name>
									<size>2</size>
									<description>Flags indicating which, if any, baud rates were automatically changed as a result of the autobaud sequence</description>
									<signed>0</signed>
									<enumeration_list count="2">
										<enumeration id="autobaud_set_flags_t::AUTOBAUD_LOCAL_SET">
											<name>AUTOBAUD_LOCAL_SET</name>
											<value>0x01</value>
											<description>When set, causes the the local modem to set its own transmission baud rate to the best one found</description>
										</enumeration>
										<enumeration id="autobaud_set_flags_t::AUTOBAUD_REMOTE_SET">
											<name>AUTOBAUD_REMOTE_SET</name>
											<value>0x02</value>
											<description></description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_GETBATTCHG">
						<name>REMOTE_GETBATTCHG</name>
						<value>0x0F</value>
						<description>Obtain battery charge from remote units with IBPS smart batteries</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="4">
								<result order="0" id="mmp_remote_battcharge_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of remote modem to get battery charge from	</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_battcharge_t::charge">
									<name>charge</name>
									<size>2</size>
									<description>Remote modem battery charge remaining in percent, or 0xFF if unavailable</description>
									<signed>0</signed>
									<enumeration_list count="1">
										<enumeration id="mmp_remote_battcharge_charge_t::MMP_REMOTE_BATTCHG_UNAVAIL">
											<name>MMP_REMOTE_BATTCHG_UNAVAIL</name>
											<value>0xFF</value>
											<description>No battery charge information available</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_SENDCMD">
						<name>REMOTE_SENDCMD</name>
						<value>0x10</value>
						<description>Send command packet to remote modem</description>
						<parameter_list count="4" size="variable">
							<parameter order="0" id="mmp_remote_senddata_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of modem to send data to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_senddata_t::transport">
								<name>transport</name>
								<size>2</size>
								<description>The transport address to route data to on the far end (SENDDATA &amp; SENDBREAK only)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_remote_senddata_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data in bytes (always 0 for SENDBREAK)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_remote_senddata_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field, length should match len parameter [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_remote_senddata_t::len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::TILT_ACCEL">
						<name>TILT_ACCEL</name>
						<value>0x11</value>
						<description>Obtain acceleration and tilt values for X/Y/Z axis if function supported on board.  HW_NOT_PRESENT error results if board has no accelerometer. </description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_tilt_accel_t::g_lpf">
								<name>g_lpf</name>
								<size>2</size>
								<description>Low pass filter for debouncing tilt readings, in percent of 1g.  Magnitude of the vector sum of all axes must be within +/- g_lpf percent of 1g in order for valid tilt reading to be obtained.  Use 0 if no LPF function is desired.  INVALID_STATE error returned if LPF is non-zero and no valid samples could be obtained.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="4" size="16">
								<result order="0" id="mmp_tilt_accel_response_t::one_g">
									<name>one_g</name>
									<size>2</size>
									<description>The value that corresponds to +1g in the xyz_accel array</description>
									<signed>1</signed>
								</result>
								<result order="1" id="mmp_tilt_accel_response_t::xyz_accel">
									<name>xyz_accel</name>
									<size>2</size>
									<description>16 bit acceleration values for X, Y, and Z axes</description>
									<signed>1</signed>
									<array_size>3</array_size>
								</result>
								<result order="2" id="mmp_tilt_accel_response_t::xyz_tilt">
									<name>xyz_tilt</name>
									<size>2</size>
									<description>Tilt off vertical for X, Y, and Z axes, in degrees</description>
									<signed>1</signed>
									<array_size>3</array_size>
								</result>
								<result order="3" id="mmp_tilt_accel_response_t::g">
									<name>g</name>
									<size>2</size>
									<description>Total amount of G force on device, in 1/1000 units (1000 = 1 G)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::AXIS_TILT">
						<name>AXIS_TILT</name>
						<value>0x12</value>
						<description>Obtain overall unit tilt value based upon @TiltAxis configuration parameter.  HW_NOT_PRESENT error results if board has no accelerometer. </description>
						<cmdresult>
							<result_list count="2" size="2">
								<result order="0" id="mmp_axis_tilt_response_t::tilt">
									<name>tilt</name>
									<size>1</size>
									<description>The tilt value in degrees from upright as defined by the @TiltAxis configuration parameter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_axis_tilt_response_t::axis_w_pol">
									<name>axis_w_pol</name>
									<size>1</size>
									<description>The axis defined as the basis for the tilt measurement and its polarity</description>
									<signed>0</signed>
									<enumeration_list count="6">
										<enumeration id="tilt_axis_and_polarity_t::TILT_AP_XPOS">
											<name>TILT_AP_XPOS</name>
											<value>0</value>
											<description>X axis, positive polarity</description>
										</enumeration>
										<enumeration id="tilt_axis_and_polarity_t::TILT_AP_XNEG">
											<name>TILT_AP_XNEG</name>
											<value>1</value>
											<description>X axis, negative polarity</description>
										</enumeration>
										<enumeration id="tilt_axis_and_polarity_t::TILT_AP_YPOS">
											<name>TILT_AP_YPOS</name>
											<value>2</value>
											<description>Y axis, positive polarity</description>
										</enumeration>
										<enumeration id="tilt_axis_and_polarity_t::TILT_AP_YNEG">
											<name>TILT_AP_YNEG</name>
											<value>3</value>
											<description>Y axis, negative polarity</description>
										</enumeration>
										<enumeration id="tilt_axis_and_polarity_t::TILT_AP_ZPOS">
											<name>TILT_AP_ZPOS</name>
											<value>4</value>
											<description>Z axis, positive polarity</description>
										</enumeration>
										<enumeration id="tilt_axis_and_polarity_t::TILT_AP_ZNEG">
											<name>TILT_AP_ZNEG</name>
											<value>5</value>
											<description>Z axis, negative polarity</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::RESET_BATT_METERING">
						<name>RESET_BATT_METERING</name>
						<value>0x13</value>
						<description>Reset the battery metering information on this platform, if applicable.</description>
					</cmd>
					<cmd operations="x" id="STD::BATT_METER">
						<name>BATT_METER</name>
						<value>0x14</value>
						<description>Obtain metering information for the local battery, if supported</description>
						<cmdresult>
							<result_list count="15" size="48">
								<result order="0" id="battery_metering_info_t::time">
									<name>time</name>
									<size>4</size>
									<description>Time of last update (2s granularity)</description>
									<signed>0</signed>
								</result>
								<result order="1" id="battery_metering_info_t::rxactive_sec_x10">
									<name>rxactive_sec_x10</name>
									<size>4</size>
									<description>Tenths of a second spent in active receive mode</description>
									<signed>0</signed>
								</result>
								<result order="2" id="battery_metering_info_t::txactive_wattsec_x10">
									<name>txactive_wattsec_x10</name>
									<size>4</size>
									<description>Watt-tenths-of-a-second spend in active transmit mode</description>
									<signed>0</signed>
								</result>
								<result order="3" id="battery_metering_info_t::lpactive_sec">
									<name>lpactive_sec</name>
									<size>4</size>
									<description>Seconds spent in low power sleep mode</description>
									<signed>0</signed>
								</result>
								<result order="4" id="battery_metering_info_t::hibactive_sec">
									<name>hibactive_sec</name>
									<size>4</size>
									<description>Seconds spent in hibernate mode</description>
									<signed>0</signed>
								</result>
								<result order="5" id="battery_metering_info_t::age_factor_x10K">
									<name>age_factor_x10K</name>
									<size>4</size>
									<description>The multiplier to derate the battery for the effects of age, in 0.0001 units (10K)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="battery_metering_info_t::run_age_x10K">
									<name>run_age_x10K</name>
									<size>4</size>
									<description>Number of months the unit has been deployed, in 0.0001 units (10K)</description>
									<signed>0</signed>
								</result>
								<result order="7" id="battery_metering_info_t::watt_hours_extracted_x1000">
									<name>watt_hours_extracted_x1000</name>
									<size>4</size>
									<description>Watt-hours extracted from the battery pack, in 0.001 units (1K)</description>
									<signed>0</signed>
								</result>
								<result order="8" id="battery_metering_info_t::tot_age">
									<name>tot_age</name>
									<size>2</size>
									<description>Number of months since battery manufacture</description>
									<signed>0</signed>
								</result>
								<result order="9" id="battery_metering_info_t::mfg_date">
									<name>mfg_date</name>
									<size>2</size>
									<description>Month of manufacture, offset from 01/2000</description>
									<signed>1</signed>
								</result>
								<result order="10" id="battery_metering_info_t::capacity">
									<name>capacity</name>
									<size>2</size>
									<description>Total capacity of the battery, in watt-hours</description>
									<signed>1</signed>
								</result>
								<result order="11" id="battery_metering_info_t::pct_remaining_x10">
									<name>pct_remaining_x10</name>
									<size>2</size>
									<description>Percentage of camacity remaining, in tenths of %</description>
									<signed>1</signed>
								</result>
								<result order="12" id="battery_metering_info_t::voltage">
									<name>voltage</name>
									<size>2</size>
									<description>Array of most recent voltage samples</description>
									<signed>1</signed>
									<array_size>2</array_size>
								</result>
								<result order="13" id="battery_metering_info_t::temp_C_x10">
									<name>temp_C_x10</name>
									<size>2</size>
									<description>Most recent temperature sample from T/R thermistor</description>
									<signed>1</signed>
								</result>
								<result order="14" id="battery_metering_info_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of the node this metering data pertains to</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_GETMETER">
						<name>REMOTE_GETMETER</name>
						<value>0x15</value>
						<description>Get battery metering information from a remote unit, if supported</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="15" size="48">
								<result order="0" id="battery_metering_info_t::time">
									<name>time</name>
									<size>4</size>
									<description>Time of last update (2s granularity)</description>
									<signed>0</signed>
								</result>
								<result order="1" id="battery_metering_info_t::rxactive_sec_x10">
									<name>rxactive_sec_x10</name>
									<size>4</size>
									<description>Tenths of a second spent in active receive mode</description>
									<signed>0</signed>
								</result>
								<result order="2" id="battery_metering_info_t::txactive_wattsec_x10">
									<name>txactive_wattsec_x10</name>
									<size>4</size>
									<description>Watt-tenths-of-a-second spend in active transmit mode</description>
									<signed>0</signed>
								</result>
								<result order="3" id="battery_metering_info_t::lpactive_sec">
									<name>lpactive_sec</name>
									<size>4</size>
									<description>Seconds spent in low power sleep mode</description>
									<signed>0</signed>
								</result>
								<result order="4" id="battery_metering_info_t::hibactive_sec">
									<name>hibactive_sec</name>
									<size>4</size>
									<description>Seconds spent in hibernate mode</description>
									<signed>0</signed>
								</result>
								<result order="5" id="battery_metering_info_t::age_factor_x10K">
									<name>age_factor_x10K</name>
									<size>4</size>
									<description>The multiplier to derate the battery for the effects of age, in 0.0001 units (10K)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="battery_metering_info_t::run_age_x10K">
									<name>run_age_x10K</name>
									<size>4</size>
									<description>Number of months the unit has been deployed, in 0.0001 units (10K)</description>
									<signed>0</signed>
								</result>
								<result order="7" id="battery_metering_info_t::watt_hours_extracted_x1000">
									<name>watt_hours_extracted_x1000</name>
									<size>4</size>
									<description>Watt-hours extracted from the battery pack, in 0.001 units (1K)</description>
									<signed>0</signed>
								</result>
								<result order="8" id="battery_metering_info_t::tot_age">
									<name>tot_age</name>
									<size>2</size>
									<description>Number of months since battery manufacture</description>
									<signed>0</signed>
								</result>
								<result order="9" id="battery_metering_info_t::mfg_date">
									<name>mfg_date</name>
									<size>2</size>
									<description>Month of manufacture, offset from 01/2000</description>
									<signed>1</signed>
								</result>
								<result order="10" id="battery_metering_info_t::capacity">
									<name>capacity</name>
									<size>2</size>
									<description>Total capacity of the battery, in watt-hours</description>
									<signed>1</signed>
								</result>
								<result order="11" id="battery_metering_info_t::pct_remaining_x10">
									<name>pct_remaining_x10</name>
									<size>2</size>
									<description>Percentage of camacity remaining, in tenths of %</description>
									<signed>1</signed>
								</result>
								<result order="12" id="battery_metering_info_t::voltage">
									<name>voltage</name>
									<size>2</size>
									<description>Array of most recent voltage samples</description>
									<signed>1</signed>
									<array_size>2</array_size>
								</result>
								<result order="13" id="battery_metering_info_t::temp_C_x10">
									<name>temp_C_x10</name>
									<size>2</size>
									<description>Most recent temperature sample from T/R thermistor</description>
									<signed>1</signed>
								</result>
								<result order="14" id="battery_metering_info_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of the node this metering data pertains to</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::GETBATT">
						<name>GETBATT</name>
						<value>0x16</value>
						<description>Get battery levels from the local modem</description>
						<cmdresult>
							<result_list count="2" size="4">
								<result order="0" id="mmp_battvoltage_t::batt_voltage">
									<name>batt_voltage</name>
									<size>2</size>
									<description>Local modem battery voltage, in tenths of a volt</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_battvoltage_t::aux_voltage">
									<name>aux_voltage</name>
									<size>2</size>
									<description>Local modem auxiliary voltage, in tenths of a volt</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::GETBATTCHG">
						<name>GETBATTCHG</name>
						<value>0x17</value>
						<description>Obtain battery charge from a local modem with IBPS smart batteries</description>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_battcharge_t::charge">
									<name>charge</name>
									<size>2</size>
									<description>Local modem battery charge remaining in percent, or 0xFF if unavailable</description>
									<signed>0</signed>
									<enumeration_list count="1">
										<enumeration id="mmp_remote_battcharge_charge_t::MMP_REMOTE_BATTCHG_UNAVAIL">
											<name>MMP_REMOTE_BATTCHG_UNAVAIL</name>
											<value>0xFF</value>
											<description>No battery charge information available</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::GETAGCHIST">
						<name>GETAGCHIST</name>
						<value>0x18</value>
						<description>Get the local AGC history buffer</description>
						<cmdresult>
							<result_list count="1" size="20">
								<result order="0" id="mmp_agchist_t::agchist">
									<name>agchist</name>
									<size>2</size>
									<description>AGC history of remote modem; 8-bit packed so hi/lo values share each index</description>
									<signed>0</signed>
									<array_size>10</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_GETONESREG">
						<name>REMOTE_GETONESREG</name>
						<value>0x19</value>
						<description>Gets the value of a single S-register on a remote modem</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_remote_getonesreg_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of remote modem to request an S-register value from</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_getonesreg_t::sreg">
								<name>sreg</name>
								<size>2</size>
								<description>The s-register to obtain from the remote</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="3" size="6">
								<result order="0" id="mmp_remote_getonesreg_resp_t::addr">
									<name>addr</name>
									<size>2</size>
									<description>Address of remote node which the S-register data is from</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_remote_getonesreg_resp_t::sreg">
									<name>sreg</name>
									<size>2</size>
									<description>The register number </description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_remote_getonesreg_resp_t::value">
									<name>value</name>
									<size>2</size>
									<description>Value contained in the requested register</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_SETONESREG">
						<name>REMOTE_SETONESREG</name>
						<value>0x1A</value>
						<description>Sets and stores a single S-register on a remote modem; response is ACK or ERROR</description>
						<parameter_list count="3" size="6">
							<parameter order="0" id="mmp_remote_setonesreg_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of remote modem to modify s-register on</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_setonesreg_t::sreg">
								<name>sreg</name>
								<size>2</size>
								<description>The s-register to modify</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_remote_setonesreg_t::value">
								<name>value</name>
								<size>2</size>
								<description>The new value of the s-register</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_RESET">
						<name>REMOTE_RESET</name>
						<value>0x1B</value>
						<description>Reset a remote modem with a low-level reset instruction (no acknowledgement from remote)</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::BOARD_TEMP">
						<name>BOARD_TEMP</name>
						<value>0x1C</value>
						<description>Obtain the board temperature from one of the built-in thermistors (one on ATM board sets, two on UDB board sets)</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_board_temp_t::thermistor">
								<name>thermistor</name>
								<size>2</size>
								<description>0-based number of the thermistor to read.  BAD_CMDARGS will be returned if thermistor is not valid for current hardware.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_board_temp_resp_t::temp_C_x10">
									<name>temp_C_x10</name>
									<size>2</size>
									<description>0-based number of the thermistor to read.  BAD_CMDARGS will be returned if thermistor is not valid for current hardware.</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_SENDBREAK">
						<name>REMOTE_SENDBREAK</name>
						<value>0x1D</value>
						<description>Send a serial break to remote modem</description>
						<parameter_list count="4" size="variable">
							<parameter order="0" id="mmp_remote_senddata_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of modem to send data to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_remote_senddata_t::transport">
								<name>transport</name>
								<size>2</size>
								<description>The transport address to route data to on the far end (SENDDATA &amp; SENDBREAK only)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_remote_senddata_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data in bytes (always 0 for SENDBREAK)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_remote_senddata_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field, length should match len parameter [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_remote_senddata_t::len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::SET_REMOTE_GROUP">
						<name>SET_REMOTE_GROUP</name>
						<value>0x1F</value>
						<description>move a remote modem&apos;s address into a new address group</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_std_set_remote_group_t::address">
								<name>address</name>
								<size>2</size>
								<description>base address 0..49 or group ID 250..254</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_std_set_remote_group_t::group">
								<name>group</name>
								<size>2</size>
								<description>new group ID 0..4</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::GETSMARTBATTDATA">
						<name>GETSMARTBATTDATA</name>
						<value>0x20</value>
						<description>If smart batteries are supported, get selected parameters from the specified battery.</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_std_getsmartbattdata_t::battery">
								<name>battery</name>
								<size>2</size>
								<description>Index of smart battery to obtain info from, between 0 and 3.  If only one battery installed, use 0.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="17" size="34">
								<result order="0" id="smartbatt_info_t::batt_mode">
									<name>batt_mode</name>
									<size>2</size>
									<description>SBS register BatteryMode() (0x03)</description>
									<signed>0</signed>
								</result>
								<result order="1" id="smartbatt_info_t::temperature">
									<name>temperature</name>
									<size>2</size>
									<description>SBS register Temperature() (0x08)</description>
									<signed>1</signed>
								</result>
								<result order="2" id="smartbatt_info_t::voltage">
									<name>voltage</name>
									<size>2</size>
									<description>SBS register Voltage() (0x09)</description>
									<signed>0</signed>
								</result>
								<result order="3" id="smartbatt_info_t::current">
									<name>current</name>
									<size>2</size>
									<description>SBS register Current() (0x0A)</description>
									<signed>1</signed>
								</result>
								<result order="4" id="smartbatt_info_t::avg_current">
									<name>avg_current</name>
									<size>2</size>
									<description>SBS register AverageCurrent() (0x0B)</description>
									<signed>1</signed>
								</result>
								<result order="5" id="smartbatt_info_t::max_error">
									<name>max_error</name>
									<size>2</size>
									<description>SBS register MaxError() (0x0C)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="smartbatt_info_t::batt_charge">
									<name>batt_charge</name>
									<size>2</size>
									<description>SBS register RelativeStateOfCharge() (0x0D)</description>
									<signed>0</signed>
								</result>
								<result order="7" id="smartbatt_info_t::abs_charge">
									<name>abs_charge</name>
									<size>2</size>
									<description>SBS register AbsoluteStateOfCharge() (0x0E)</description>
									<signed>0</signed>
								</result>
								<result order="8" id="smartbatt_info_t::rem_capacity">
									<name>rem_capacity</name>
									<size>2</size>
									<description>SBS register RemainingCapacity() (0x0F)</description>
									<signed>0</signed>
								</result>
								<result order="9" id="smartbatt_info_t::full_chg_capacity">
									<name>full_chg_capacity</name>
									<size>2</size>
									<description>SBS register FullChargeCapacity() (0x10)</description>
									<signed>0</signed>
								</result>
								<result order="10" id="smartbatt_info_t::mins_to_empty">
									<name>mins_to_empty</name>
									<size>2</size>
									<description>SBS register AverageTimeToEmpty() (0x12)</description>
									<signed>1</signed>
								</result>
								<result order="11" id="smartbatt_info_t::mins_to_full">
									<name>mins_to_full</name>
									<size>2</size>
									<description>SBS register AverageTimeToFull() (0x13)</description>
									<signed>1</signed>
								</result>
								<result order="12" id="smartbatt_info_t::batt_status">
									<name>batt_status</name>
									<size>2</size>
									<description>SBS register BatteryStatus() (0x16)</description>
									<signed>0</signed>
								</result>
								<result order="13" id="smartbatt_info_t::cycle_count">
									<name>cycle_count</name>
									<size>2</size>
									<description>SBS register CycleCount() (0x17)</description>
									<signed>0</signed>
								</result>
								<result order="14" id="smartbatt_info_t::design_capacity">
									<name>design_capacity</name>
									<size>2</size>
									<description>SBS register DesignCapacity() (0x18)</description>
									<signed>0</signed>
								</result>
								<result order="15" id="smartbatt_info_t::mfg_date">
									<name>mfg_date</name>
									<size>2</size>
									<description>SBS register ManufactureDate() (0x1B)</description>
									<signed>0</signed>
								</result>
								<result order="16" id="smartbatt_info_t::serno">
									<name>serno</name>
									<size>2</size>
									<description>SBS register SerialNumber() (0x1C)</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::ADDFEATUREKEY">
						<name>ADDFEATUREKEY</name>
						<value>0x21</value>
						<description>Add a feature key to the platform.  CMDRESULT ACK on success, CMDRESULT ERROR if flash store full, BAD_CMDARGS error otherwsise.</description>
						<parameter_list count="1" size="42">
							<parameter order="0" id="mmp_std_featkeystring_t::key">
								<name>key</name>
								<size>1</size>
								<description>Feature key as an ASCII string, with room for an optional terminating null character</description>
								<signed>1</signed>
								<array_size>42</array_size>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::DELFEATUREKEY">
						<name>DELFEATUREKEY</name>
						<value>0x22</value>
						<description>Delete a feature key from the platform.  CMDRESULT ACK on success, BAD_CMDARGS error otherwise.</description>
						<parameter_list count="1" size="42">
							<parameter order="0" id="mmp_std_featkeystring_t::key">
								<name>key</name>
								<size>1</size>
								<description>Feature key as an ASCII string, with room for an optional terminating null character</description>
								<signed>1</signed>
								<array_size>42</array_size>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::REMOTE_HANGUP">
						<name>REMOTE_HANGUP</name>
						<value>0x23</value>
						<description>Send an acoustic &quot;hangup&quot; to a remote node that takes it out of online mode and puts it to sleep/hibernate.  ACK/timeout when sending to individual node, or immediate ACK if sending to a multi-cast address with no acoustic ACK expected.</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::SENDJANUSPACKET">
						<name>SENDJANUSPACKET</name>
						<value>0x24</value>
						<description>Transmit a JANUS packet with pre-encoded ADB and cargo.  CMDRESULT ACK on success, CMDRESULT ERR on failure to validate, or general MMP error otherwise.</description>
						<parameter_list count="11" size="variable">
							<parameter order="0" id="mmp_data_janus_packet_t::version">
								<name>version</name>
								<size>1</size>
								<description>JANUS format version of the packet.  Ignored on transmits, as modem inserts version into outbound packet automatically.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_data_janus_packet_t::mobility_flag">
								<name>mobility_flag</name>
								<size>1</size>
								<description>Set high if packet originates from a mobile node.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_data_janus_packet_t::txrx_flag">
								<name>txrx_flag</name>
								<size>1</size>
								<description>Set high if packet originates from a node capable of both transmitting and receiving.  If low, node can transmit only.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_data_janus_packet_t::forwarding_flag">
								<name>forwarding_flag</name>
								<size>1</size>
								<description>Set high if packet originates from a node capable of packet forwarding (for routing and delay-tolerant processing).</description>
								<signed>0</signed>
							</parameter>
							<parameter order="4" id="mmp_data_janus_packet_t::class_userid">
								<name>class_userid</name>
								<size>1</size>
								<description>The JANUS class user ID of the packet</description>
								<signed>0</signed>
								<enumeration_list count="84">
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_EMERGENCY">
										<name>JANUS_CLASSID_EMERGENCY</name>
										<value>0</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_UWGPS">
										<name>JANUS_CLASSID_UWGPS</name>
										<value>1</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_UWAIS">
										<name>JANUS_CLASSID_UWAIS</name>
										<value>2</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_PINGER">
										<name>JANUS_CLASSID_PINGER</name>
										<value>3</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_FIXEDVMOORING">
										<name>JANUS_CLASSID_FIXEDVMOORING</name>
										<value>4</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_RIGIDVSTRUCTURE">
										<name>JANUS_CLASSID_RIGIDVSTRUCTURE</name>
										<value>5</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_HAZARDMARKER">
										<name>JANUS_CLASSID_HAZARDMARKER</name>
										<value>6</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CHANNELMARKER">
										<name>JANUS_CLASSID_CHANNELMARKER</name>
										<value>7</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_WINDGENERATOR">
										<name>JANUS_CLASSID_WINDGENERATOR</name>
										<value>8</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_WAVEGENERATOR">
										<name>JANUS_CLASSID_WAVEGENERATOR</name>
										<value>9</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_SOLARGENERATOR">
										<name>JANUS_CLASSID_SOLARGENERATOR</name>
										<value>10</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CAPABILITIES">
										<name>JANUS_CLASSID_CAPABILITIES</name>
										<value>15</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_NATOREF">
										<name>JANUS_CLASSID_NATOREF</name>
										<value>16</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_VENILIA">
										<name>JANUS_CLASSID_VENILIA</name>
										<value>17</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MONGOLIA">
										<name>JANUS_CLASSID_CC_MONGOLIA</name>
										<value>187</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_NEWZEALAND">
										<name>JANUS_CLASSID_CC_NEWZEALAND</name>
										<value>188</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_REPUBLICOFKOREA">
										<name>JANUS_CLASSID_CC_REPUBLICOFKOREA</name>
										<value>189</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_PAKISTAN">
										<name>JANUS_CLASSID_CC_PAKISTAN</name>
										<value>190</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_JAPAN">
										<name>JANUS_CLASSID_CC_JAPAN</name>
										<value>191</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_IRAQ">
										<name>JANUS_CLASSID_CC_IRAQ</name>
										<value>192</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AUSTRALIA">
										<name>JANUS_CLASSID_CC_AUSTRALIA</name>
										<value>193</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AFGHANISTAN">
										<name>JANUS_CLASSID_CC_AFGHANISTAN</name>
										<value>194</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UNITEDARABEMIRATES">
										<name>JANUS_CLASSID_CC_UNITEDARABEMIRATES</name>
										<value>195</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_KUWAIT">
										<name>JANUS_CLASSID_CC_KUWAIT</name>
										<value>196</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_QATAR">
										<name>JANUS_CLASSID_CC_QATAR</name>
										<value>197</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BAHRAIN">
										<name>JANUS_CLASSID_CC_BAHRAIN</name>
										<value>198</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TUNISIA">
										<name>JANUS_CLASSID_CC_TUNISIA</name>
										<value>199</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MOROCCO">
										<name>JANUS_CLASSID_CC_MOROCCO</name>
										<value>200</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MAURITANIA">
										<name>JANUS_CLASSID_CC_MAURITANIA</name>
										<value>201</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_JORDAN">
										<name>JANUS_CLASSID_CC_JORDAN</name>
										<value>202</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ISRAEL">
										<name>JANUS_CLASSID_CC_ISRAEL</name>
										<value>203</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_EGYPT">
										<name>JANUS_CLASSID_CC_EGYPT</name>
										<value>204</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ALGERIA">
										<name>JANUS_CLASSID_CC_ALGERIA</name>
										<value>205</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UZBEKISTAN">
										<name>JANUS_CLASSID_CC_UZBEKISTAN</name>
										<value>206</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UKRAINE">
										<name>JANUS_CLASSID_CC_UKRAINE</name>
										<value>207</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TURKMENISTAN">
										<name>JANUS_CLASSID_CC_TURKMENISTAN</name>
										<value>208</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MACEDONIA">
										<name>JANUS_CLASSID_CC_MACEDONIA</name>
										<value>209</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TAJIKISTAN">
										<name>JANUS_CLASSID_CC_TAJIKISTAN</name>
										<value>210</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SWITZERLAND">
										<name>JANUS_CLASSID_CC_SWITZERLAND</name>
										<value>211</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SWEDEN">
										<name>JANUS_CLASSID_CC_SWEDEN</name>
										<value>212</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SERBIA">
										<name>JANUS_CLASSID_CC_SERBIA</name>
										<value>213</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MONTENEGRO">
										<name>JANUS_CLASSID_CC_MONTENEGRO</name>
										<value>214</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MOLDOVA">
										<name>JANUS_CLASSID_CC_MOLDOVA</name>
										<value>215</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_MALTA">
										<name>JANUS_CLASSID_CC_MALTA</name>
										<value>216</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_KYRGYZREPUBLIC">
										<name>JANUS_CLASSID_CC_KYRGYZREPUBLIC</name>
										<value>217</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_KAZAKHSTAN">
										<name>JANUS_CLASSID_CC_KAZAKHSTAN</name>
										<value>218</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_IRELAND">
										<name>JANUS_CLASSID_CC_IRELAND</name>
										<value>219</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_GEORGIA">
										<name>JANUS_CLASSID_CC_GEORGIA</name>
										<value>220</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_FINLAND">
										<name>JANUS_CLASSID_CC_FINLAND</name>
										<value>221</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BOSNIAHERZEGOVINA">
										<name>JANUS_CLASSID_CC_BOSNIAHERZEGOVINA</name>
										<value>222</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BELARUS">
										<name>JANUS_CLASSID_CC_BELARUS</name>
										<value>223</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AZERBAIJAN">
										<name>JANUS_CLASSID_CC_AZERBAIJAN</name>
										<value>224</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_AUSTRIA">
										<name>JANUS_CLASSID_CC_AUSTRIA</name>
										<value>225</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ARMENIA">
										<name>JANUS_CLASSID_CC_ARMENIA</name>
										<value>226</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UNITEDSTATES">
										<name>JANUS_CLASSID_CC_UNITEDSTATES</name>
										<value>227</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_UNITEDKINGDOM">
										<name>JANUS_CLASSID_CC_UNITEDKINGDOM</name>
										<value>228</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_TURKEY">
										<name>JANUS_CLASSID_CC_TURKEY</name>
										<value>229</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SPAIN">
										<name>JANUS_CLASSID_CC_SPAIN</name>
										<value>230</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SLOVENIA">
										<name>JANUS_CLASSID_CC_SLOVENIA</name>
										<value>231</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_SLOVAKIA">
										<name>JANUS_CLASSID_CC_SLOVAKIA</name>
										<value>232</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ROMANIA">
										<name>JANUS_CLASSID_CC_ROMANIA</name>
										<value>233</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_PORTUGAL">
										<name>JANUS_CLASSID_CC_PORTUGAL</name>
										<value>234</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_POLAND">
										<name>JANUS_CLASSID_CC_POLAND</name>
										<value>235</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_NORWAY">
										<name>JANUS_CLASSID_CC_NORWAY</name>
										<value>236</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_NETHERLANDS">
										<name>JANUS_CLASSID_CC_NETHERLANDS</name>
										<value>237</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_LUXEMBOURG">
										<name>JANUS_CLASSID_CC_LUXEMBOURG</name>
										<value>238</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_LITHUANIA">
										<name>JANUS_CLASSID_CC_LITHUANIA</name>
										<value>239</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_LATVIA">
										<name>JANUS_CLASSID_CC_LATVIA</name>
										<value>240</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ITALY">
										<name>JANUS_CLASSID_CC_ITALY</name>
										<value>241</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ICELAND">
										<name>JANUS_CLASSID_CC_ICELAND</name>
										<value>242</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_HUNGARY">
										<name>JANUS_CLASSID_CC_HUNGARY</name>
										<value>243</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_GREECE">
										<name>JANUS_CLASSID_CC_GREECE</name>
										<value>244</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_GERMANY">
										<name>JANUS_CLASSID_CC_GERMANY</name>
										<value>245</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_FRANCE">
										<name>JANUS_CLASSID_CC_FRANCE</name>
										<value>246</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ESTONIA">
										<name>JANUS_CLASSID_CC_ESTONIA</name>
										<value>247</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_DENMARK">
										<name>JANUS_CLASSID_CC_DENMARK</name>
										<value>248</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_CZECHREPUBLIC">
										<name>JANUS_CLASSID_CC_CZECHREPUBLIC</name>
										<value>249</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_CROATIA">
										<name>JANUS_CLASSID_CC_CROATIA</name>
										<value>250</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_CANADA">
										<name>JANUS_CLASSID_CC_CANADA</name>
										<value>251</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BULGARIA">
										<name>JANUS_CLASSID_CC_BULGARIA</name>
										<value>252</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_BELGIUM">
										<name>JANUS_CLASSID_CC_BELGIUM</name>
										<value>253</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_CC_ALBANIA">
										<name>JANUS_CLASSID_CC_ALBANIA</name>
										<value>254</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_CLASSID_JANUSSPECIAL">
										<name>JANUS_CLASSID_JANUSSPECIAL</name>
										<value>255</value>
										<description></description>
									</enumeration>
									<enumeration id="JANUS_classid_t::JANUS_NUM_CLASSIDS">
										<name>JANUS_NUM_CLASSIDS</name>
										<value>256</value>
										<description></description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="5" id="mmp_data_janus_packet_t::app_type">
								<name>app_type</name>
								<size>1</size>
								<description>The JANUS application type (within the specified class user ID) of the packet.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="6" id="mmp_data_janus_packet_t::schedule_type">
								<name>schedule_type</name>
								<size>1</size>
								<description>The type of scheduling in this JANUS packet: none, reserved, or repeat.  If reserved or repeat, schedule_index_adb_upper will contain the schedule lookup index.</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_janus_schedule_type_t::MMP_JANUS_SCHEDULE_NONE">
										<name>MMP_JANUS_SCHEDULE_NONE</name>
										<value>0</value>
										<description>No scheduling present, all 34 bits may be used in the ADB.</description>
									</enumeration>
									<enumeration id="mmp_janus_schedule_type_t::MMP_JANUS_SCHEDULE_RESERVE">
										<name>MMP_JANUS_SCHEDULE_RESERVE</name>
										<value>1</value>
										<description>A reserve interval is being specified according to Annex B of ANEP-87.  Up to 26 bits of ADB data are present.</description>
									</enumeration>
									<enumeration id="mmp_janus_schedule_type_t::MMP_JANUS_SCHEDULE_REPEAT">
										<name>MMP_JANUS_SCHEDULE_REPEAT</name>
										<value>2</value>
										<description>A repeat interval is being specified according to Annec C of ANEP-87.  Up to 26 bits of ADB data are present.</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="7" id="mmp_data_janus_packet_t::schedule_index_adb_upper">
								<name>schedule_index_adb_upper</name>
								<size>1</size>
								<description>If schedule_type is either reserved or repeat, this field contains the table lookup index for the appropriate scheduling scheme (with high order bit masked off, as it is represented in schedule_type).  If schedule_type is none, then the lowermost two bits of this field contains the uppermost two bits of the application data block (ADB).</description>
								<signed>0</signed>
							</parameter>
							<parameter order="8" id="mmp_data_janus_packet_t::adb_lower">
								<name>adb_lower</name>
								<size>4</size>
								<description>If schedule_type is none, this field contains the lowermost 32 bits of the application data block (ADB).  Otherwise, this field contains the lowermost 26 bits of the ADB, with the upper 8 scheduling bits represented in schedule_type and schedule_index_adb_upper.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="9" id="mmp_data_janus_packet_t::cargo_len">
								<name>cargo_len</name>
								<size>2</size>
								<description>The length of the cargo in bytes.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="10" id="mmp_data_janus_packet_t::cargo">
								<name>cargo</name>
								<size>1</size>
								<description>The optional cargo bytes for the packet. [sizevar=cargo_len]</description>
								<signed>1</signed>
								<array_size varid="mmp_data_janus_packet_t::cargo_len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="STD::WRITE_DEVICE">
						<name>WRITE_DEVICE</name>
						<value>0x25</value>
						<description>Write to the device</description>
						<parameter_list count="3" size="variable">
							<parameter order="0" id="mmp_write_device_t::device_num">
								<name>device_num</name>
								<size>2</size>
								<description>Device number</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_write_device_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data to write</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_write_device_t::data">
								<name>data</name>
								<size>1</size>
								<description>Variable length data field, length should match len parameter [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_write_device_t::len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="4">
								<result order="0" id="mmp_write_device_result_t::bytes_writ">
									<name>bytes_writ</name>
									<size>2</size>
									<description>Number of bytes written</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_write_device_result_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status of bytes written</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::READ_DEVICE">
						<name>READ_DEVICE</name>
						<value>0x26</value>
						<description>Read and clear the device</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_read_device_t::device_num">
								<name>device_num</name>
								<size>2</size>
								<description>Device number</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_read_device_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of data to read</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="3" size="variable">
								<result order="0" id="mmp_read_device_result_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status of bytes read</description>
									<signed>1</signed>
								</result>
								<result order="1" id="mmp_read_device_result_t::len">
									<name>len</name>
									<size>2</size>
									<description>Number of bytes read</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_read_device_result_t::data">
									<name>data</name>
									<size>1</size>
									<description>Variable length data field, length should match len parameter [sizevar=len]</description>
									<signed>1</signed>
									<array_size varid="mmp_read_device_result_t::len" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::LEN_DEVICE">
						<name>LEN_DEVICE</name>
						<value>0x27</value>
						<description>Length of data in the device</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_len_device_t::device_num">
								<name>device_num</name>
								<size>2</size>
								<description>Device number</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="4">
								<result order="0" id="mmp_len_device_result_t::device_num">
									<name>device_num</name>
									<size>2</size>
									<description>Device Number</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_len_device_result_t::len">
									<name>len</name>
									<size>2</size>
									<description>Number of bytes in device</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="STD::FIND_DEVICE">
						<name>FIND_DEVICE</name>
						<value>0x28</value>
						<description>Find the device number from the name</description>
						<parameter_list count="2" size="variable">
							<parameter order="0" id="mmp_find_device_t::len">
								<name>len</name>
								<size>2</size>
								<description>Length of device name</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_find_device_t::name">
								<name>name</name>
								<size>1</size>
								<description>Variable length data field, length should match len parameter [sizevar=len]</description>
								<signed>1</signed>
								<array_size varid="mmp_find_device_t::len" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_find_device_result_t::device_num">
									<name>device_num</name>
									<size>2</size>
									<description>Device Number</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
				</cmd_list>
			</cmdsect>
			<cmdsect id="RNGRLS">
				<name>RNGRLS</name>
				<value>0x02</value>
				<description>Ranging and releasing operations</description>
				<cmd_list count="31">
					<cmd operations="x" id="RNGRLS::TRANSPOND">
						<name>TRANSPOND</name>
						<value>0x00</value>
						<description>Issue interrogation or silent ping and enter transpond receive mode for the system default amount of time</description>
						<parameter_list count="3" size="8">
							<parameter order="0" id="mmp_rngrls_transpond_t::freq">
								<name>freq</name>
								<size>4</size>
								<description>Frequency of interrogation ping in Hz</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_transpond_t::silent">
								<name>silent</name>
								<size>2</size>
								<description>True for silent interrogation ping</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="2" id="mmp_rngrls_transpond_t::rcv_only">
								<name>rcv_only</name>
								<size>2</size>
								<description>True to enter transpond receive mode with no ping</description>
								<signed>0</signed>
								<enumeration_list count="2">
									<enumeration id="mmp_bool_t::MMP_FALSE">
										<name>MMP_FALSE</name>
										<value>0</value>
										<description>False/Off/Disabled</description>
									</enumeration>
									<enumeration id="mmp_bool_t::MMP_TRUE">
										<name>MMP_TRUE</name>
										<value>1</value>
										<description>True/On/Enabled</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RANGE">
						<name>RANGE</name>
						<value>0x01</value>
						<description>Obtain the range to another modem</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_range_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to ping for range</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_range_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>When used with a RANGE_W_TIMEOUT message, specifies the timeout period for this range, in 0.1 second increments.  Ignored for regular RANGE messages.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="8">
								<result order="0" id="mmp_rngrls_cmdresult_range_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_range_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::RELEASE_STATUS">
						<name>RELEASE_STATUS</name>
						<value>0x02</value>
						<description>Check the release mechanism status on a remote modem</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_rngrls_release_status_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to get status of</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="3" size="6">
								<result order="0" id="mmp_rngrls_cmdresult_release_status_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status of the release mechanism on the remote unit (or error indication)</description>
									<signed>0</signed>
									<enumeration_list count="17">
										<enumeration id="rls_status_code_t::RLSSTAT_STD_MODEM">
											<name>RLSSTAT_STD_MODEM</name>
											<value>0</value>
											<description>Standard modem, no release capability</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_CONFIRMED">
											<name>RLSSTAT_CONFIRMED</name>
											<value>1</value>
											<description>Release triggered and confirmed</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_NOT_CONFIRMED">
											<name>RLSSTAT_NOT_CONFIRMED</name>
											<value>2</value>
											<description>Release triggered and not confirmed</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_ARMED">
											<name>RLSSTAT_ARMED</name>
											<value>3</value>
											<description>Release armed and ready to accept release code</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_BURNWIRE_ACTIVATED">
											<name>RLSSTAT_BURNWIRE_ACTIVATED</name>
											<value>4</value>
											<description>Release burn wire burn cycle is active</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_BURNWIRE_CONFIRMED">
											<name>RLSSTAT_BURNWIRE_CONFIRMED</name>
											<value>5</value>
											<description>Release burn wire burn cycle triggered, tilt sensor triggered</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_BURNWIRE_TIMEOUT">
											<name>RLSSTAT_BURNWIRE_TIMEOUT</name>
											<value>6</value>
											<description>release burn wire burn cycle timed out, no tilt detected</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_BURNWIRE_ARMED">
											<name>RLSSTAT_BURNWIRE_ARMED</name>
											<value>7</value>
											<description>New (4G) status to differentiate armed burn wire units from mech releases</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_RSERIES_ARMED">
											<name>RLSSTAT_RSERIES_ARMED</name>
											<value>16</value>
											<description>Next-Gen Release armed</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_RSERIES_CONFIRMED">
											<name>RLSSTAT_RSERIES_CONFIRMED</name>
											<value>17</value>
											<description>Next-Gen Release triggered and confirmed</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_RSERIES_NOT_CONFIRMED">
											<name>RLSSTAT_RSERIES_NOT_CONFIRMED</name>
											<value>18</value>
											<description>Next-Gen release triggered and not confirmed</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_ACOUTRIG_NOT_ASSERTED">
											<name>RLSSTAT_ACOUTRIG_NOT_ASSERTED</name>
											<value>19</value>
											<description>Acoustic trigger signal not asserted</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_ACOUTRIG_ASSERTED">
											<name>RLSSTAT_ACOUTRIG_ASSERTED</name>
											<value>20</value>
											<description>Acoustic trigger signal asserted</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_ACOUTRIG_CONFIRMED">
											<name>RLSSTAT_ACOUTRIG_CONFIRMED</name>
											<value>21</value>
											<description>Acoustic trigger signal confirmed and de-asserted</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_ACOUTRIG_ASSERTED_CONFIRMED">
											<name>RLSSTAT_ACOUTRIG_ASSERTED_CONFIRMED</name>
											<value>22</value>
											<description>Acoustic trigger signal confirmed and still asserted</description>
										</enumeration>
										<enumeration id="rls_status_code_t::RLSSTAT_ACOUTRIG_TIMEOUT">
											<name>RLSSTAT_ACOUTRIG_TIMEOUT</name>
											<value>23</value>
											<description>Acoustic trigger signal not confirmed and de-asserted</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_release_status_t::tilt">
									<name>tilt</name>
									<size>2</size>
									<description>Indicates tilt state of remote release; if value is between 20 and 200 then subtract 20 to get the true degree reading, otherwise interpret as status</description>
									<signed>0</signed>
									<enumeration_list count="7">
										<enumeration id="tilt_status_t::RLS_NOT_TILTED">
											<name>RLS_NOT_TILTED</name>
											<value>0</value>
											<description>The release unit is upright</description>
										</enumeration>
										<enumeration id="tilt_status_t::RLS_TILTED">
											<name>RLS_TILTED</name>
											<value>1</value>
											<description>The release unit is tilted</description>
										</enumeration>
										<enumeration id="tilt_status_t::RLS_TILT_EXCESS_MOTION">
											<name>RLS_TILT_EXCESS_MOTION</name>
											<value>2</value>
											<description>The tilt value could not be read because the sensor was moving too much</description>
										</enumeration>
										<enumeration id="tilt_status_t::RLS_TILT_HW_NOT_READY">
											<name>RLS_TILT_HW_NOT_READY</name>
											<value>3</value>
											<description>Error attempting to read tilt-sensing hardware</description>
										</enumeration>
										<enumeration id="tilt_status_t::RLS_DEGREE_BASE">
											<name>RLS_DEGREE_BASE</name>
											<value>20</value>
											<description>Values between 20 and 200 are the tilt measurement in degrees, offset by 20; subtract RLS_DEGREE_BASE to obtain the true measurement</description>
										</enumeration>
										<enumeration id="tilt_status_t::RLS_TILT_COMPACT">
											<name>RLS_TILT_COMPACT</name>
											<value>254</value>
											<description>The release unit is a Compact Release with no tilt sensor</description>
										</enumeration>
										<enumeration id="tilt_status_t::RLS_TILT_OEMBOARDSET">
											<name>RLS_TILT_OEMBOARDSET</name>
											<value>255</value>
											<description></description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_release_status_t::battery">
									<name>battery</name>
									<size>2</size>
									<description>Condition of battery on the remote release; if value is between 20 and 120 then subtract 20 to get the percentage of full charge remaining, otherwise interpret as status</description>
									<signed>0</signed>
									<enumeration_list count="5">
										<enumeration id="battery_status_t::BATTERY_GOOD">
											<name>BATTERY_GOOD</name>
											<value>0</value>
											<description>Battery voltage is good</description>
										</enumeration>
										<enumeration id="battery_status_t::BATTERY_LOW">
											<name>BATTERY_LOW</name>
											<value>1</value>
											<description>Battery voltage is low</description>
										</enumeration>
										<enumeration id="battery_status_t::BATTERY_REDUCED">
											<name>BATTERY_REDUCED</name>
											<value>2</value>
											<description>Battery voltage reduced</description>
										</enumeration>
										<enumeration id="battery_status_t::BATTERY_CHARGE_BASE">
											<name>BATTERY_CHARGE_BASE</name>
											<value>20</value>
											<description>Values between 20 and 120 are the charge status in percent remaining, offset by 20</description>
										</enumeration>
										<enumeration id="battery_status_t::BATTERY_VOLT_BASE">
											<name>BATTERY_VOLT_BASE</name>
											<value>125</value>
											<description>Values between 125 and 245 are the battery voltage in 0.5 volt increments (0 - 60 V range)</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::SMART_RELEASE">
						<name>SMART_RELEASE</name>
						<value>0x03</value>
						<description>Issue a release command to a remote Benthos SMART release (SR-50, SR-100, etc.)</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_smart_release_burnwire_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to trigger burnwire of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_smart_release_burnwire_t::code">
								<name>code</name>
								<size>2</size>
								<description>Release code</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_rngrls_cmdresult_release_response_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status code in response to release command sent to a remote release, sent with an MMP_CMDRESULT_PROGRESS or MMP_CMDRESULT_DATA type message	</description>
									<signed>0</signed>
									<enumeration_list count="19">
										<enumeration id="ack_code_t::OK">
											<name>OK</name>
											<value>0</value>
											<description>Operation successful</description>
										</enumeration>
										<enumeration id="ack_code_t::BUFFER_EMPTY">
											<name>BUFFER_EMPTY</name>
											<value>1</value>
											<description>Nothing in data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::BLOCK_EMPTY">
											<name>BLOCK_EMPTY</name>
											<value>2</value>
											<description>Nothing in requested block of data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_SETTING">
											<name>INVALID_SETTING</name>
											<value>3</value>
											<description>Invalid setting</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_RELEASE_CODE">
											<name>INVALID_RELEASE_CODE</name>
											<value>4</value>
											<description>Invalid release code</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_RELEASE">
											<name>GOOD_RELEASE</name>
											<value>5</value>
											<description>Mechanical release successful</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE">
											<name>VALID_RELEASE_CODE</name>
											<value>6</value>
											<description>Received valid release code, activating motor</description>
										</enumeration>
										<enumeration id="ack_code_t::NOT_RELEASED">
											<name>NOT_RELEASED</name>
											<value>7</value>
											<description>Unit not released</description>
										</enumeration>
										<enumeration id="ack_code_t::BUSY">
											<name>BUSY</name>
											<value>8</value>
											<description>Unit busy</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE_BURN">
											<name>VALID_RELEASE_CODE_BURN</name>
											<value>9</value>
											<description>Received valid release code, beginning burn wire burn cycle</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_BURN_RELEASE">
											<name>GOOD_BURN_RELEASE</name>
											<value>10</value>
											<description>Burn wire burn cycle completed successfully</description>
										</enumeration>
										<enumeration id="ack_code_t::BURN_RELEASE_TIMEOUT">
											<name>BURN_RELEASE_TIMEOUT</name>
											<value>11</value>
											<description>Burn wire burn cycle stopped due to timeout, no tilt detected</description>
										</enumeration>
										<enumeration id="ack_code_t::SREG_SAVED">
											<name>SREG_SAVED</name>
											<value>12</value>
											<description>Remote S-register saved</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_NOT_SUPPORTED">
											<name>DATALOG_NOT_SUPPORTED</name>
											<value>13</value>
											<description>Datalogger not supported on this unit</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_ERASE_STARTED">
											<name>DATALOG_ERASE_STARTED</name>
											<value>14</value>
											<description>Datalogger erase started</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_ACOUSTIC_TRIGGER_CODE">
											<name>INVALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>15</value>
											<description>Invalid trigger code</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_ACOUSTIC_TRIGGER_CODE">
											<name>VALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>16</value>
											<description>Received valid acoustic trigger code, asserting signal</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_CONFIRMED">
											<name>ACOUSTIC_TRIGGER_CONFIRMED</name>
											<value>17</value>
											<description>Acoustic trigger confirmed (signal may or may not be de-asserted depending on configuration)</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_TIMEOUT">
											<name>ACOUSTIC_TRIGGER_TIMEOUT</name>
											<value>18</value>
											<description>Acoustic trigger timed out with no confirmation, signal de-asserted</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::BURNWIRE">
						<name>BURNWIRE</name>
						<value>0x04</value>
						<description>Issue a release command to a remote Benthos SMART modem (SM-75, OEM boardset w/ burn wire, etc.)</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_smart_release_burnwire_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to trigger burnwire of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_smart_release_burnwire_t::code">
								<name>code</name>
								<size>2</size>
								<description>Release code</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_rngrls_cmdresult_release_response_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status code in response to release command sent to a remote release, sent with an MMP_CMDRESULT_PROGRESS or MMP_CMDRESULT_DATA type message	</description>
									<signed>0</signed>
									<enumeration_list count="19">
										<enumeration id="ack_code_t::OK">
											<name>OK</name>
											<value>0</value>
											<description>Operation successful</description>
										</enumeration>
										<enumeration id="ack_code_t::BUFFER_EMPTY">
											<name>BUFFER_EMPTY</name>
											<value>1</value>
											<description>Nothing in data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::BLOCK_EMPTY">
											<name>BLOCK_EMPTY</name>
											<value>2</value>
											<description>Nothing in requested block of data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_SETTING">
											<name>INVALID_SETTING</name>
											<value>3</value>
											<description>Invalid setting</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_RELEASE_CODE">
											<name>INVALID_RELEASE_CODE</name>
											<value>4</value>
											<description>Invalid release code</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_RELEASE">
											<name>GOOD_RELEASE</name>
											<value>5</value>
											<description>Mechanical release successful</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE">
											<name>VALID_RELEASE_CODE</name>
											<value>6</value>
											<description>Received valid release code, activating motor</description>
										</enumeration>
										<enumeration id="ack_code_t::NOT_RELEASED">
											<name>NOT_RELEASED</name>
											<value>7</value>
											<description>Unit not released</description>
										</enumeration>
										<enumeration id="ack_code_t::BUSY">
											<name>BUSY</name>
											<value>8</value>
											<description>Unit busy</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE_BURN">
											<name>VALID_RELEASE_CODE_BURN</name>
											<value>9</value>
											<description>Received valid release code, beginning burn wire burn cycle</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_BURN_RELEASE">
											<name>GOOD_BURN_RELEASE</name>
											<value>10</value>
											<description>Burn wire burn cycle completed successfully</description>
										</enumeration>
										<enumeration id="ack_code_t::BURN_RELEASE_TIMEOUT">
											<name>BURN_RELEASE_TIMEOUT</name>
											<value>11</value>
											<description>Burn wire burn cycle stopped due to timeout, no tilt detected</description>
										</enumeration>
										<enumeration id="ack_code_t::SREG_SAVED">
											<name>SREG_SAVED</name>
											<value>12</value>
											<description>Remote S-register saved</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_NOT_SUPPORTED">
											<name>DATALOG_NOT_SUPPORTED</name>
											<value>13</value>
											<description>Datalogger not supported on this unit</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_ERASE_STARTED">
											<name>DATALOG_ERASE_STARTED</name>
											<value>14</value>
											<description>Datalogger erase started</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_ACOUSTIC_TRIGGER_CODE">
											<name>INVALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>15</value>
											<description>Invalid trigger code</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_ACOUSTIC_TRIGGER_CODE">
											<name>VALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>16</value>
											<description>Received valid acoustic trigger code, asserting signal</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_CONFIRMED">
											<name>ACOUSTIC_TRIGGER_CONFIRMED</name>
											<value>17</value>
											<description>Acoustic trigger confirmed (signal may or may not be de-asserted depending on configuration)</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_TIMEOUT">
											<name>ACOUSTIC_TRIGGER_TIMEOUT</name>
											<value>18</value>
											<description>Acoustic trigger timed out with no confirmation, signal de-asserted</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::FSK_RELEASE">
						<name>FSK_RELEASE</name>
						<value>0x05</value>
						<description>Issue a release command to a remote Benthos FSK release (Model 865, etc.)</description>
						<parameter_list count="3" size="8">
							<parameter order="0" id="mmp_rngrls_fsk_param_t::duration">
								<name>duration</name>
								<size>2</size>
								<description>Duration to play Benthos FSK command tones for, in seconds</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_fsk_param_t::code">
								<name>code</name>
								<size>2</size>
								<description>Benthos FSK command code</description>
								<signed>0</signed>
								<enumeration_list count="13">
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_A">
										<name>MMP_RNGRLS_FSK_CODE_A</name>
										<value>&apos;A&apos;</value>
										<description>ASCII A - 0x65</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_B">
										<name>MMP_RNGRLS_FSK_CODE_B</name>
										<value>&apos;B&apos;</value>
										<description>ASCII B - 0x66</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_C">
										<name>MMP_RNGRLS_FSK_CODE_C</name>
										<value>&apos;C&apos;</value>
										<description>ASCII C - 0x67</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_D">
										<name>MMP_RNGRLS_FSK_CODE_D</name>
										<value>&apos;D&apos;</value>
										<description>ASCII D - 0x68</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_E">
										<name>MMP_RNGRLS_FSK_CODE_E</name>
										<value>&apos;E&apos;</value>
										<description>ASCII E - 0x69</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_F">
										<name>MMP_RNGRLS_FSK_CODE_F</name>
										<value>&apos;F&apos;</value>
										<description>ASCII F - 0x6A</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_G">
										<name>MMP_RNGRLS_FSK_CODE_G</name>
										<value>&apos;G&apos;</value>
										<description>ASCII G - 0x6B</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_H">
										<name>MMP_RNGRLS_FSK_CODE_H</name>
										<value>&apos;H&apos;</value>
										<description>ASCII H - 0x6C</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_I">
										<name>MMP_RNGRLS_FSK_CODE_I</name>
										<value>&apos;I&apos;</value>
										<description>ASCII I - 0x6D</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_J">
										<name>MMP_RNGRLS_FSK_CODE_J</name>
										<value>&apos;J&apos;</value>
										<description>ASCII J - 0x6E</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_K">
										<name>MMP_RNGRLS_FSK_CODE_K</name>
										<value>&apos;K&apos;</value>
										<description>ASCII K - 0x6F</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_L">
										<name>MMP_RNGRLS_FSK_CODE_L</name>
										<value>&apos;L&apos;</value>
										<description>ASCII L - 0x70</description>
									</enumeration>
									<enumeration id="mmp_rngrls_fsk_code_t::MMP_RNGRLS_FSK_CODE_M">
										<name>MMP_RNGRLS_FSK_CODE_M</name>
										<value>&apos;M&apos;</value>
										<description>ASCII M - 0x71</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="2" id="mmp_rngrls_fsk_param_t::freq">
								<name>freq</name>
								<size>4</size>
								<description>Frequency of FSK command code</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::EDGETECH_RELEASE">
						<name>EDGETECH_RELEASE</name>
						<value>0x06</value>
						<description>Issue a command to an EdgeTech/ORE/EG&amp;G release</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_edgetech_param_t::freq_spec">
								<name>freq_spec</name>
								<size>2</size>
								<description>Edgetech frequency specifier (first digit of octal code)</description>
								<signed>0</signed>
								<enumeration_list count="7">
									<enumeration id="edgetech_freqspec_t::EDGETECH_9500_9900">
										<name>EDGETECH_9500_9900</name>
										<value>1</value>
										<description>9500 Hz off, 9900 Hz on</description>
									</enumeration>
									<enumeration id="edgetech_freqspec_t::EDGETECH_9500_10300">
										<name>EDGETECH_9500_10300</name>
										<value>2</value>
										<description>9500 Hz off, 10300 Hz on</description>
									</enumeration>
									<enumeration id="edgetech_freqspec_t::EDGETECH_9500_10700">
										<name>EDGETECH_9500_10700</name>
										<value>3</value>
										<description>9500 Hz off, 10700 Hz on</description>
									</enumeration>
									<enumeration id="edgetech_freqspec_t::EDGETECH_9900_10300">
										<name>EDGETECH_9900_10300</name>
										<value>4</value>
										<description>9900 Hz off, 10300 Hz on</description>
									</enumeration>
									<enumeration id="edgetech_freqspec_t::EDGETECH_9900_10700">
										<name>EDGETECH_9900_10700</name>
										<value>5</value>
										<description>9900 Hz off, 10700 Hz on</description>
									</enumeration>
									<enumeration id="edgetech_freqspec_t::EDGETECH_10300_10700">
										<name>EDGETECH_10300_10700</name>
										<value>6</value>
										<description>10300 Hz off, 10700 Hz on</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="1" id="mmp_rngrls_edgetech_param_t::code">
								<name>code</name>
								<size>2</size>
								<description>Edgetech command code (last 5 digits of octal code spread over 16-bits)</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::URI_RELEASE">
						<name>URI_RELEASE</name>
						<value>0x07</value>
						<description>Issue a command to a University of Rhode Island release/device </description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_rngrls_uri_param_t::code">
								<name>code</name>
								<size>2</size>
								<description>URI command/release code</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::FLASH_XPNDADJ">
						<name>FLASH_XPNDADJ</name>
						<value>0x08</value>
						<description>Save per-frequency transpond sensitivity threshold adjustments to flash</description>
					</cmd>
					<cmd operations="x" id="RNGRLS::BEARING">
						<name>BEARING</name>
						<value>0x09</value>
						<description>Obtain bearing from a DAT</description>
						<parameter_list count="4" size="8">
							<parameter order="0" id="mmp_rngrls_bearing_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to range to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_bearing_t::type">
								<name>type</name>
								<size>2</size>
								<description>absolute/relative/compass/tilt</description>
								<signed>0</signed>
								<enumeration_list count="16">
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_ABS">
										<name>MMP_RNGRLS_BEARING_ABS</name>
										<value>0</value>
										<description>relative to North</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_REL">
										<name>MMP_RNGRLS_BEARING_REL</name>
										<value>1</value>
										<description>relative to DAT body</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_COM">
										<name>MMP_RNGRLS_BEARING_COM</name>
										<value>2</value>
										<description>compass heading</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_TLT">
										<name>MMP_RNGRLS_BEARING_TLT</name>
										<value>3</value>
										<description>tilt sensors</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_ABS">
										<name>MMP_RNGRLS_BEARING_HIGH_ABS</name>
										<value>4</value>
										<description>absolute bearing</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_INC">
										<name>MMP_RNGRLS_BEARING_HIGH_INC</name>
										<value>5</value>
										<description>absolute inclination</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_REL">
										<name>MMP_RNGRLS_BEARING_HIGH_REL</name>
										<value>6</value>
										<description>relative bearing</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_ELV">
										<name>MMP_RNGRLS_BEARING_HIGH_ELV</name>
										<value>7</value>
										<description>relative elevation</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_COM">
										<name>MMP_RNGRLS_BEARING_HIGH_COM</name>
										<value>8</value>
										<description>compass heading</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_PCH">
										<name>MMP_RNGRLS_BEARING_HIGH_PCH</name>
										<value>9</value>
										<description>compass pitch</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_RLL">
										<name>MMP_RNGRLS_BEARING_HIGH_RLL</name>
										<value>10</value>
										<description>compass roll</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_DEPTH">
										<name>MMP_RNGRLS_BEARING_DEPTH</name>
										<value>11</value>
										<description>depth from pressure transducer</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_PROBE">
										<name>MMP_RNGRLS_BEARING_PROBE</name>
										<value>13</value>
										<description>remote channel probe request</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HOMING">
										<name>MMP_RNGRLS_BEARING_HOMING</name>
										<value>14</value>
										<description>start of terminal homing mode</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_RANGE_ONLY">
										<name>MMP_RNGRLS_BEARING_RANGE_ONLY</name>
										<value>15</value>
										<description>Range only response</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_W_REPLYDATA">
										<name>MMP_RNGRLS_BEARING_W_REPLYDATA</name>
										<value>32</value>
										<description>Add to bearing types to request reply data</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="2" id="mmp_rngrls_bearing_t::tat">
								<name>tat</name>
								<size>2</size>
								<description>turn around time</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_rngrls_bearing_tat_t::MMP_RNGRLS_TAT_SLOW">
										<name>MMP_RNGRLS_TAT_SLOW</name>
										<value>0</value>
										<description>legacy (slow) 2.4 second turn around</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_tat_t::MMP_RNGRLS_TAT_FAST">
										<name>MMP_RNGRLS_TAT_FAST</name>
										<value>1</value>
										<description>standard (fast) 1.6 second turn around</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_tat_t::MMP_RNGRLS_TAT_VFAST">
										<name>MMP_RNGRLS_TAT_VFAST</name>
										<value>2</value>
										<description>very fast 1.1 second turn around</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="3" id="mmp_rngrls_bearing_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>When used with a BEARING_W_TIMEOUT message, specifies the timeout period for this range, in 0.1 second increments.  Ignored for regular BEARING messages.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="5" size="16">
								<result order="0" id="mmp_rngrls_cmdresult_bearing_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_bearing_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_bearing_t::doppler">
									<name>doppler</name>
									<size>4</size>
									<description>range rate 10*m/s</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_bearing_t::azimuth">
									<name>azimuth</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_bearing_t::elevation">
									<name>elevation</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::GEOPRO_RELEASE">
						<name>GEOPRO_RELEASE</name>
						<value>0x0A</value>
						<description>Issue a command to a GeoPro (Germany) release unit</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_geopro_param_t::cmdtype">
								<name>cmdtype</name>
								<size>2</size>
								<description>Type of GeoPro operation (enable, release, reset)</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="geopro_cmd_t::GEOPRO_CMD_ENABLE">
										<name>GEOPRO_CMD_ENABLE</name>
										<value>0</value>
										<description></description>
									</enumeration>
									<enumeration id="geopro_cmd_t::GEOPRO_CMD_RELEASE">
										<name>GEOPRO_CMD_RELEASE</name>
										<value>1</value>
										<description></description>
									</enumeration>
									<enumeration id="geopro_cmd_t::GEOPRO_CMD_RESET">
										<name>GEOPRO_CMD_RESET</name>
										<value>2</value>
										<description></description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="1" id="mmp_rngrls_geopro_param_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of unit command pertains to (0 - 126, don&apos;t care for reset)</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::NAVDATA">
						<name>NAVDATA</name>
						<value>0x0B</value>
						<description>Obtain position information from a remote modem</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_navdata_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to range to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_navdata_t::type">
								<name>type</name>
								<size>2</size>
								<description>Type of range requested: absolute/relative/compass/tilt. This field is irrelevant if the remote modem is not USBL capable.</description>
								<signed>0</signed>
								<enumeration_list count="16">
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_ABS">
										<name>MMP_RNGRLS_BEARING_ABS</name>
										<value>0</value>
										<description>relative to North</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_REL">
										<name>MMP_RNGRLS_BEARING_REL</name>
										<value>1</value>
										<description>relative to DAT body</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_COM">
										<name>MMP_RNGRLS_BEARING_COM</name>
										<value>2</value>
										<description>compass heading</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_TLT">
										<name>MMP_RNGRLS_BEARING_TLT</name>
										<value>3</value>
										<description>tilt sensors</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_ABS">
										<name>MMP_RNGRLS_BEARING_HIGH_ABS</name>
										<value>4</value>
										<description>absolute bearing</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_INC">
										<name>MMP_RNGRLS_BEARING_HIGH_INC</name>
										<value>5</value>
										<description>absolute inclination</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_REL">
										<name>MMP_RNGRLS_BEARING_HIGH_REL</name>
										<value>6</value>
										<description>relative bearing</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_ELV">
										<name>MMP_RNGRLS_BEARING_HIGH_ELV</name>
										<value>7</value>
										<description>relative elevation</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_COM">
										<name>MMP_RNGRLS_BEARING_HIGH_COM</name>
										<value>8</value>
										<description>compass heading</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_PCH">
										<name>MMP_RNGRLS_BEARING_HIGH_PCH</name>
										<value>9</value>
										<description>compass pitch</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_RLL">
										<name>MMP_RNGRLS_BEARING_HIGH_RLL</name>
										<value>10</value>
										<description>compass roll</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_DEPTH">
										<name>MMP_RNGRLS_BEARING_DEPTH</name>
										<value>11</value>
										<description>depth from pressure transducer</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_PROBE">
										<name>MMP_RNGRLS_BEARING_PROBE</name>
										<value>13</value>
										<description>remote channel probe request</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HOMING">
										<name>MMP_RNGRLS_BEARING_HOMING</name>
										<value>14</value>
										<description>start of terminal homing mode</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_RANGE_ONLY">
										<name>MMP_RNGRLS_BEARING_RANGE_ONLY</name>
										<value>15</value>
										<description>Range only response</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_W_REPLYDATA">
										<name>MMP_RNGRLS_BEARING_W_REPLYDATA</name>
										<value>32</value>
										<description>Add to bearing types to request reply data</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="9" size="32">
								<result order="0" id="mmp_rngrls_cmdresult_navdata_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_navdata_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_navdata_t::type">
									<name>type</name>
									<size>4</size>
									<description>information type</description>
									<signed>0</signed>
									<enumeration_list count="6">
										<enumeration id="navdata_type_t::MMP_REPLY_DATA_NONE">
											<name>MMP_REPLY_DATA_NONE</name>
											<value>0</value>
											<description>no data replied</description>
										</enumeration>
										<enumeration id="navdata_type_t::MMP_REPLY_DATA_LATLONG">
											<name>MMP_REPLY_DATA_LATLONG</name>
											<value>1</value>
											<description>latitude and longitude </description>
										</enumeration>
										<enumeration id="navdata_type_t::MMP_REPLY_DATA_LL_DEPTH">
											<name>MMP_REPLY_DATA_LL_DEPTH</name>
											<value>2</value>
											<description>lat, long and depth</description>
										</enumeration>
										<enumeration id="navdata_type_t::MMP_REPLY_DATA_LL_SEAFLOOR">
											<name>MMP_REPLY_DATA_LL_SEAFLOOR</name>
											<value>3</value>
											<description>lat, long, depth and altitude above sea floor</description>
										</enumeration>
										<enumeration id="navdata_type_t::MMP_REPLY_DATA_LL_GPSALT">
											<name>MMP_REPLY_DATA_LL_GPSALT</name>
											<value>4</value>
											<description>lat, long, depth and altitude above sea level</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_navdata_t::azimuth">
									<name>azimuth</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_navdata_t::elevation">
									<name>elevation</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
								<result order="5" id="mmp_rngrls_cmdresult_navdata_t::latitude">
									<name>latitude</name>
									<size>4</size>
									<description>latitude  (degrees x 10e6)</description>
									<signed>1</signed>
								</result>
								<result order="6" id="mmp_rngrls_cmdresult_navdata_t::longitude">
									<name>longitude</name>
									<size>4</size>
									<description>longitude (degrees x 10e6)</description>
									<signed>1</signed>
								</result>
								<result order="7" id="mmp_rngrls_cmdresult_navdata_t::depth">
									<name>depth</name>
									<size>4</size>
									<description>depth below sea level (tenths of a meter)</description>
									<signed>1</signed>
								</result>
								<result order="8" id="mmp_rngrls_cmdresult_navdata_t::altitude">
									<name>altitude</name>
									<size>4</size>
									<description>altitude (mm) above sea floor or sea level (see type)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::CHANNEL_PROBE">
						<name>CHANNEL_PROBE</name>
						<value>0x0C</value>
						<description>probe channel for multipath</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_channel_probe_param_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of unit to probe (-1 for self probe, -2 for echo detection, -3 for acoustic sample)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_channel_probe_param_t::log">
								<name>log</name>
								<size>2</size>
								<description>flag for saving impulse response to data logger</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_rngrls_probe_log_t::MMP_RNGRLS_PROBE_LOG_NONE">
										<name>MMP_RNGRLS_PROBE_LOG_NONE</name>
										<value>0</value>
										<description>no logging</description>
									</enumeration>
									<enumeration id="mmp_rngrls_probe_log_t::MMP_RNGRLS_PROBE_LOG_STAT">
										<name>MMP_RNGRLS_PROBE_LOG_STAT</name>
										<value>1</value>
										<description>log only statistics</description>
									</enumeration>
									<enumeration id="mmp_rngrls_probe_log_t::MMP_RNGRLS_PROBE_LOG_STAT_IMPULSE">
										<name>MMP_RNGRLS_PROBE_LOG_STAT_IMPULSE</name>
										<value>2</value>
										<description>log statistics and impulse</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="8" size="1048">
								<result order="0" id="mmp_rngrls_cmdresult_channel_probe_t::first">
									<name>first</name>
									<size>4</size>
									<description>time of first arrival in tenths of a millisecond</description>
									<signed>1</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_channel_probe_t::peak">
									<name>peak</name>
									<size>4</size>
									<description>time of peak from start of buffer in tenths of a millisecond</description>
									<signed>1</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_channel_probe_t::EDT">
									<name>EDT</name>
									<size>4</size>
									<description>RT60 calculated by EDT method in tenths of a millisecond</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_channel_probe_t::T10">
									<name>T10</name>
									<size>4</size>
									<description>RT60 calculated by T10 method in tenths of a millisecond</description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_channel_probe_t::C25">
									<name>C25</name>
									<size>2</size>
									<description>ELR for 25ms in 10th of dB</description>
									<signed>1</signed>
								</result>
								<result order="5" id="mmp_rngrls_cmdresult_channel_probe_t::C50">
									<name>C50</name>
									<size>2</size>
									<description>ELR for 50ms in 10th of dB</description>
									<signed>1</signed>
								</result>
								<result order="6" id="mmp_rngrls_cmdresult_channel_probe_t::period">
									<name>period</name>
									<size>4</size>
									<description>minimum baud period for 10dB SNR in tenths of a millisecond</description>
									<signed>1</signed>
								</result>
								<result order="7" id="mmp_rngrls_cmdresult_channel_probe_t::data">
									<name>data</name>
									<size>2</size>
									<description>Binned and decimated raw probe data, integrated over 1 ms periods and presented in 0.5 dB increments, packed into upper/lower bytes in 16-bit containers</description>
									<signed>0</signed>
									<array_size>512</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_RANGE">
						<name>RSERIES_RANGE</name>
						<value>0x0D</value>
						<description>Ranging specific to a Teledyne Benthos next-gen release</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_rseries_range_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to request range from</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_rseries_range_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>Timeout of range request in 0.1 second increments</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="8">
								<result order="0" id="mmp_rngrls_cmdresult_range_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_range_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_ACTIVATE">
						<name>RSERIES_ACTIVATE</name>
						<value>0x0E</value>
						<description>Activate an R Series release</description>
						<parameter_list count="3" size="6">
							<parameter order="0" id="mmp_rngrls_rseries_activate_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to ping for range</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_rseries_activate_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean value indicating whether a wakeup signal should be sent first</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_rseries_activate_t::awake_mins">
								<name>awake_mins</name>
								<size>2</size>
								<description>Number of minutes to stay activated for</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_HIBERNATE">
						<name>RSERIES_HIBERNATE</name>
						<value>0x0F</value>
						<description>Hibernate an R Series release</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_rseries_hib_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to get status of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_rseries_hib_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean value indicating whether a wakeup signal should be sent first (ignored for HIBERNATE)</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_XPND_MODE">
						<name>RSERIES_XPND_MODE</name>
						<value>0x10</value>
						<description>Set the transpond reSponse mode in a remote R Series unit</description>
						<parameter_list count="3" size="6">
							<parameter order="0" id="mmp_rngrls_xpnd_mode_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to get status of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_xpnd_mode_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean value indicating whether a wakeup signal should be sent first (ignored for HIBERNATE)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_xpnd_mode_t::xpnd_mode">
								<name>xpnd_mode</name>
								<size>2</size>
								<description>Transpond Mode value to set in the remote</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::STD_XPND_MODE">
						<name>STD_XPND_MODE</name>
						<value>0x11</value>
						<description>Set the transpond reSponse mode in a remote standard unit</description>
						<parameter_list count="3" size="6">
							<parameter order="0" id="mmp_rngrls_xpnd_mode_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to get status of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_xpnd_mode_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean value indicating whether a wakeup signal should be sent first (ignored for HIBERNATE)</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_xpnd_mode_t::xpnd_mode">
								<name>xpnd_mode</name>
								<size>2</size>
								<description>Transpond Mode value to set in the remote</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_DB_UNLOCK">
						<name>RSERIES_DB_UNLOCK</name>
						<value>0x12</value>
						<description>Enable R Series transponding</description>
						<parameter_list count="3" size="8">
							<parameter order="0" id="mmp_rngrls_rseries_dblock_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to ping for range</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_rseries_dblock_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean value indicating whether a wakeup signal should be sent first</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_rseries_dblock_t::serial_no">
								<name>serial_no</name>
								<size>4</size>
								<description>Serial number of the remote unit to unlock</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_DB_LOCK">
						<name>RSERIES_DB_LOCK</name>
						<value>0x13</value>
						<description>Disable R Series transponding</description>
						<parameter_list count="3" size="8">
							<parameter order="0" id="mmp_rngrls_rseries_dblock_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to ping for range</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_rseries_dblock_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean value indicating whether a wakeup signal should be sent first</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_rseries_dblock_t::serial_no">
								<name>serial_no</name>
								<size>4</size>
								<description>Serial number of the remote unit to unlock</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RSERIES_RELEASE">
						<name>RSERIES_RELEASE</name>
						<value>0x14</value>
						<description>Issue a release command to a remote Benthos R Series release</description>
						<parameter_list count="3" size="6">
							<parameter order="0" id="mmp_rngrls_rseries_release_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote release to trigger burnwire of</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_rseries_release_t::wake_up">
								<name>wake_up</name>
								<size>2</size>
								<description>Boolean indicating whether to send an R Series wakeup in front of the release code</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_rseries_release_t::code">
								<name>code</name>
								<size>2</size>
								<description>Release code</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_rngrls_cmdresult_release_response_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status code in response to release command sent to a remote release, sent with an MMP_CMDRESULT_PROGRESS or MMP_CMDRESULT_DATA type message	</description>
									<signed>0</signed>
									<enumeration_list count="19">
										<enumeration id="ack_code_t::OK">
											<name>OK</name>
											<value>0</value>
											<description>Operation successful</description>
										</enumeration>
										<enumeration id="ack_code_t::BUFFER_EMPTY">
											<name>BUFFER_EMPTY</name>
											<value>1</value>
											<description>Nothing in data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::BLOCK_EMPTY">
											<name>BLOCK_EMPTY</name>
											<value>2</value>
											<description>Nothing in requested block of data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_SETTING">
											<name>INVALID_SETTING</name>
											<value>3</value>
											<description>Invalid setting</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_RELEASE_CODE">
											<name>INVALID_RELEASE_CODE</name>
											<value>4</value>
											<description>Invalid release code</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_RELEASE">
											<name>GOOD_RELEASE</name>
											<value>5</value>
											<description>Mechanical release successful</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE">
											<name>VALID_RELEASE_CODE</name>
											<value>6</value>
											<description>Received valid release code, activating motor</description>
										</enumeration>
										<enumeration id="ack_code_t::NOT_RELEASED">
											<name>NOT_RELEASED</name>
											<value>7</value>
											<description>Unit not released</description>
										</enumeration>
										<enumeration id="ack_code_t::BUSY">
											<name>BUSY</name>
											<value>8</value>
											<description>Unit busy</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE_BURN">
											<name>VALID_RELEASE_CODE_BURN</name>
											<value>9</value>
											<description>Received valid release code, beginning burn wire burn cycle</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_BURN_RELEASE">
											<name>GOOD_BURN_RELEASE</name>
											<value>10</value>
											<description>Burn wire burn cycle completed successfully</description>
										</enumeration>
										<enumeration id="ack_code_t::BURN_RELEASE_TIMEOUT">
											<name>BURN_RELEASE_TIMEOUT</name>
											<value>11</value>
											<description>Burn wire burn cycle stopped due to timeout, no tilt detected</description>
										</enumeration>
										<enumeration id="ack_code_t::SREG_SAVED">
											<name>SREG_SAVED</name>
											<value>12</value>
											<description>Remote S-register saved</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_NOT_SUPPORTED">
											<name>DATALOG_NOT_SUPPORTED</name>
											<value>13</value>
											<description>Datalogger not supported on this unit</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_ERASE_STARTED">
											<name>DATALOG_ERASE_STARTED</name>
											<value>14</value>
											<description>Datalogger erase started</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_ACOUSTIC_TRIGGER_CODE">
											<name>INVALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>15</value>
											<description>Invalid trigger code</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_ACOUSTIC_TRIGGER_CODE">
											<name>VALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>16</value>
											<description>Received valid acoustic trigger code, asserting signal</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_CONFIRMED">
											<name>ACOUSTIC_TRIGGER_CONFIRMED</name>
											<value>17</value>
											<description>Acoustic trigger confirmed (signal may or may not be de-asserted depending on configuration)</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_TIMEOUT">
											<name>ACOUSTIC_TRIGGER_TIMEOUT</name>
											<value>18</value>
											<description>Acoustic trigger timed out with no confirmation, signal de-asserted</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::RESPONDER_RANGE">
						<name>RESPONDER_RANGE</name>
						<value>0x15</value>
						<description>Issue pulse on binary out 1 to a responder</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_rngrls_responder_range_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>Timeout of range request in 0.1 second increments</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::TRANSPOND_W_TIMEOUT">
						<name>TRANSPOND_W_TIMEOUT</name>
						<value>0x16</value>
						<description>Issue interrogation or silent ping and enter transpond receive mode for a specified amount of time</description>
						<parameter_list count="4" size="10">
							<parameter order="0" id="mmp_rngrls_transpond_w_timeout_t::freq">
								<name>freq</name>
								<size>4</size>
								<description>Frequency of interrogation ping in Hz</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_transpond_w_timeout_t::silent">
								<name>silent</name>
								<size>2</size>
								<description>True for silent interrogation ping</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_transpond_w_timeout_t::rcv_only">
								<name>rcv_only</name>
								<size>2</size>
								<description>True to enter transpond receive mode with no ping</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_rngrls_transpond_w_timeout_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>The listen period timeout, in 0.1 second increments</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RANGE_W_TIMEOUT">
						<name>RANGE_W_TIMEOUT</name>
						<value>0x17</value>
						<description>Issue a range request with a timeout specified (not system @AcRspTmOut default)</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_rngrls_range_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to ping for range</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_range_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>When used with a RANGE_W_TIMEOUT message, specifies the timeout period for this range, in 0.1 second increments.  Ignored for regular RANGE messages.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="8">
								<result order="0" id="mmp_rngrls_cmdresult_range_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_range_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::SPECTRUM_MODE">
						<name>SPECTRUM_MODE</name>
						<value>0x18</value>
						<description>Enter or exit spectrum analysis mode, with update rate in 0.5 second increments (or 0 to disable)</description>
						<parameter_list count="2" size="2">
							<parameter order="0" id="mmp_rngrls_spectrum_mode_t::update_rate">
								<name>update_rate</name>
								<size>1</size>
								<description>Period of MMP update messages, in 0.5 second increments, or 0 to disable spectrum mode</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_spectrum_mode_t::freq_bins">
								<name>freq_bins</name>
								<size>1</size>
								<description>Number of frequency bins to divide the band into, between 16 and 65</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="RNGRLS::RANGE_USBL_REPEAT">
						<name>RANGE_USBL_REPEAT</name>
						<value>0x19</value>
						<description>(DAT ONLY) Issue a range request for a define number of responses</description>
						<parameter_list count="3" size="6">
							<parameter order="0" id="mmp_rngrls_range_repeat_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to ping for range</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_range_repeat_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>When used with a RANGE_W_TIMEOUT message, specifies the timeout period for this range, in 0.1 second increments.  Ignored for regular RANGE messages.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_range_repeat_t::repeats">
								<name>repeats</name>
								<size>2</size>
								<description></description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="5" size="16">
								<result order="0" id="mmp_rngrls_cmdresult_range_usbl_repeat_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_range_usbl_repeat_t::trip_time">
									<name>trip_time</name>
									<size>4</size>
									<description>One way trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_range_usbl_repeat_t::doppler">
									<name>doppler</name>
									<size>4</size>
									<description>range rate 10*m/s</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_range_usbl_repeat_t::azimuth">
									<name>azimuth</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_range_usbl_repeat_t::elevation">
									<name>elevation</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::ABSREL">
						<name>ABSREL</name>
						<value>0x1A</value>
						<description>Request the high precision absolute and relative bearing</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_rngrls_absrel_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to range to</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="7" size="20">
								<result order="0" id="mmp_rngrls_cmdresult_absrel_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_absrel_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_absrel_t::doppler">
									<name>doppler</name>
									<size>4</size>
									<description>range rate 10*m/s</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_absrel_t::bearing">
									<name>bearing</name>
									<size>2</size>
									<description>bearing in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>0</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_absrel_t::inclination">
									<name>inclination</name>
									<size>2</size>
									<description>inclination in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>1</signed>
								</result>
								<result order="5" id="mmp_rngrls_cmdresult_absrel_t::azimuth">
									<name>azimuth</name>
									<size>2</size>
									<description>azimuth in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="mmp_rngrls_cmdresult_absrel_t::elevation">
									<name>elevation</name>
									<size>2</size>
									<description>elevation in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::ACOU_SAMPLE">
						<name>ACOU_SAMPLE</name>
						<value>0x1D</value>
						<description>Record a 1 second basebanded in-band acoustic sample</description>
						<cmdresult>
							<result_list count="9" size="2066">
								<result order="0" id="mmp_rngrls_cmdresult_acou_sample_t::Fs">
									<name>Fs</name>
									<size>4</size>
									<description>Sample frequency of basebanded data</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_acou_sample_t::Fc">
									<name>Fc</name>
									<size>4</size>
									<description>Center frequency of acoustic sample (prior to basebanding)</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_acou_sample_t::Bw">
									<name>Bw</name>
									<size>4</size>
									<description>Bandwidth of T/R board</description>
									<signed>0</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_acou_sample_t::gain">
									<name>gain</name>
									<size>2</size>
									<description></description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_acou_sample_t::cell">
									<name>cell</name>
									<size>1</size>
									<description></description>
									<signed>0</signed>
								</result>
								<result order="5" id="mmp_rngrls_cmdresult_acou_sample_t::total_cells">
									<name>total_cells</name>
									<size>1</size>
									<description></description>
									<signed>0</signed>
								</result>
								<result order="6" id="mmp_rngrls_cmdresult_acou_sample_t::clip">
									<name>clip</name>
									<size>1</size>
									<description></description>
									<signed>0</signed>
								</result>
								<result order="7" id="mmp_rngrls_cmdresult_acou_sample_t::spare">
									<name>spare</name>
									<size>1</size>
									<description></description>
									<signed>0</signed>
								</result>
								<result order="8" id="mmp_rngrls_cmdresult_acou_sample_t::data">
									<name>data</name>
									<size>2</size>
									<description>I+Q interleaved basebanded data</description>
									<signed>1</signed>
									<array_size>1024</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::ABSCMPDEP">
						<name>ABSCMPDEP</name>
						<value>0x1E</value>
						<description>Request the high precision compass and depth</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_rngrls_absrel_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to range to</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="7" size="20">
								<result order="0" id="mmp_rngrls_cmdresult_abscmpdep_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_abscmpdep_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_abscmpdep_t::doppler">
									<name>doppler</name>
									<size>4</size>
									<description>range rate 10*m/s</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_abscmpdep_t::bearing">
									<name>bearing</name>
									<size>2</size>
									<description>bearing in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>0</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_abscmpdep_t::inclination">
									<name>inclination</name>
									<size>2</size>
									<description>inclination in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>1</signed>
								</result>
								<result order="5" id="mmp_rngrls_cmdresult_abscmpdep_t::compass">
									<name>compass</name>
									<size>2</size>
									<description>compass heading in degrees x 10 (or 0x7FFF if invalid)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="mmp_rngrls_cmdresult_abscmpdep_t::depth">
									<name>depth</name>
									<size>2</size>
									<description>depth in meters x 10 (or 0x7FFF if invalid)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::ACOUSTIC_TRIGGER">
						<name>ACOUSTIC_TRIGGER</name>
						<value>0x1F</value>
						<description>Send a trigger code to a remote device to activate the acoustic trigger signal</description>
						<parameter_list count="4" size="6">
							<parameter order="0" id="mmp_rngrls_acoustic_trigger_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to assert acoustic trigger signal on</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_acoustic_trigger_t::code">
								<name>code</name>
								<size>2</size>
								<description>The acoustic trigger code, as set by @RlsCode on the remote modem.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_rngrls_acoustic_trigger_t::assert_time">
								<name>assert_time</name>
								<size>1</size>
								<description>Encoded value representing number of seconds to assert trigger signal.  Use 0 to bypass and use RlsMinEnaTime/RlsMaxEnaTime values on remote unit.  0x01-0x3f = 1-63 seconds in 1 sec. increments; 0x40-0x7f = 60-375 seconds in 5 sec. increments; 0x80-0xBF = 300-930 seconds in 10 sec. increments; 0xC0-0xFF = 900-2790 seconds in 30 second increments.</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_rngrls_acoustic_trigger_t::wake_up">
								<name>wake_up</name>
								<size>1</size>
								<description>Boolean value indicating whether a Compact Modem wakeup signal should be sent first</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="1" size="2">
								<result order="0" id="mmp_rngrls_cmdresult_release_response_t::status">
									<name>status</name>
									<size>2</size>
									<description>Status code in response to release command sent to a remote release, sent with an MMP_CMDRESULT_PROGRESS or MMP_CMDRESULT_DATA type message	</description>
									<signed>0</signed>
									<enumeration_list count="19">
										<enumeration id="ack_code_t::OK">
											<name>OK</name>
											<value>0</value>
											<description>Operation successful</description>
										</enumeration>
										<enumeration id="ack_code_t::BUFFER_EMPTY">
											<name>BUFFER_EMPTY</name>
											<value>1</value>
											<description>Nothing in data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::BLOCK_EMPTY">
											<name>BLOCK_EMPTY</name>
											<value>2</value>
											<description>Nothing in requested block of data logger</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_SETTING">
											<name>INVALID_SETTING</name>
											<value>3</value>
											<description>Invalid setting</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_RELEASE_CODE">
											<name>INVALID_RELEASE_CODE</name>
											<value>4</value>
											<description>Invalid release code</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_RELEASE">
											<name>GOOD_RELEASE</name>
											<value>5</value>
											<description>Mechanical release successful</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE">
											<name>VALID_RELEASE_CODE</name>
											<value>6</value>
											<description>Received valid release code, activating motor</description>
										</enumeration>
										<enumeration id="ack_code_t::NOT_RELEASED">
											<name>NOT_RELEASED</name>
											<value>7</value>
											<description>Unit not released</description>
										</enumeration>
										<enumeration id="ack_code_t::BUSY">
											<name>BUSY</name>
											<value>8</value>
											<description>Unit busy</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_RELEASE_CODE_BURN">
											<name>VALID_RELEASE_CODE_BURN</name>
											<value>9</value>
											<description>Received valid release code, beginning burn wire burn cycle</description>
										</enumeration>
										<enumeration id="ack_code_t::GOOD_BURN_RELEASE">
											<name>GOOD_BURN_RELEASE</name>
											<value>10</value>
											<description>Burn wire burn cycle completed successfully</description>
										</enumeration>
										<enumeration id="ack_code_t::BURN_RELEASE_TIMEOUT">
											<name>BURN_RELEASE_TIMEOUT</name>
											<value>11</value>
											<description>Burn wire burn cycle stopped due to timeout, no tilt detected</description>
										</enumeration>
										<enumeration id="ack_code_t::SREG_SAVED">
											<name>SREG_SAVED</name>
											<value>12</value>
											<description>Remote S-register saved</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_NOT_SUPPORTED">
											<name>DATALOG_NOT_SUPPORTED</name>
											<value>13</value>
											<description>Datalogger not supported on this unit</description>
										</enumeration>
										<enumeration id="ack_code_t::DATALOG_ERASE_STARTED">
											<name>DATALOG_ERASE_STARTED</name>
											<value>14</value>
											<description>Datalogger erase started</description>
										</enumeration>
										<enumeration id="ack_code_t::INVALID_ACOUSTIC_TRIGGER_CODE">
											<name>INVALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>15</value>
											<description>Invalid trigger code</description>
										</enumeration>
										<enumeration id="ack_code_t::VALID_ACOUSTIC_TRIGGER_CODE">
											<name>VALID_ACOUSTIC_TRIGGER_CODE</name>
											<value>16</value>
											<description>Received valid acoustic trigger code, asserting signal</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_CONFIRMED">
											<name>ACOUSTIC_TRIGGER_CONFIRMED</name>
											<value>17</value>
											<description>Acoustic trigger confirmed (signal may or may not be de-asserted depending on configuration)</description>
										</enumeration>
										<enumeration id="ack_code_t::ACOUSTIC_TRIGGER_TIMEOUT">
											<name>ACOUSTIC_TRIGGER_TIMEOUT</name>
											<value>18</value>
											<description>Acoustic trigger timed out with no confirmation, signal de-asserted</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="RNGRLS::BEARING_W_TIMEOUT">
						<name>BEARING_W_TIMEOUT</name>
						<value>0x20</value>
						<description>Obtain bearing from a DAT with a timeout specified (not system @AcRspTmOut default)</description>
						<parameter_list count="4" size="8">
							<parameter order="0" id="mmp_rngrls_bearing_t::address">
								<name>address</name>
								<size>2</size>
								<description>Address of remote modem to range to</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_rngrls_bearing_t::type">
								<name>type</name>
								<size>2</size>
								<description>absolute/relative/compass/tilt</description>
								<signed>0</signed>
								<enumeration_list count="16">
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_ABS">
										<name>MMP_RNGRLS_BEARING_ABS</name>
										<value>0</value>
										<description>relative to North</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_REL">
										<name>MMP_RNGRLS_BEARING_REL</name>
										<value>1</value>
										<description>relative to DAT body</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_COM">
										<name>MMP_RNGRLS_BEARING_COM</name>
										<value>2</value>
										<description>compass heading</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_TLT">
										<name>MMP_RNGRLS_BEARING_TLT</name>
										<value>3</value>
										<description>tilt sensors</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_ABS">
										<name>MMP_RNGRLS_BEARING_HIGH_ABS</name>
										<value>4</value>
										<description>absolute bearing</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_INC">
										<name>MMP_RNGRLS_BEARING_HIGH_INC</name>
										<value>5</value>
										<description>absolute inclination</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_REL">
										<name>MMP_RNGRLS_BEARING_HIGH_REL</name>
										<value>6</value>
										<description>relative bearing</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_ELV">
										<name>MMP_RNGRLS_BEARING_HIGH_ELV</name>
										<value>7</value>
										<description>relative elevation</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_COM">
										<name>MMP_RNGRLS_BEARING_HIGH_COM</name>
										<value>8</value>
										<description>compass heading</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_PCH">
										<name>MMP_RNGRLS_BEARING_HIGH_PCH</name>
										<value>9</value>
										<description>compass pitch</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HIGH_RLL">
										<name>MMP_RNGRLS_BEARING_HIGH_RLL</name>
										<value>10</value>
										<description>compass roll</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_DEPTH">
										<name>MMP_RNGRLS_BEARING_DEPTH</name>
										<value>11</value>
										<description>depth from pressure transducer</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_PROBE">
										<name>MMP_RNGRLS_BEARING_PROBE</name>
										<value>13</value>
										<description>remote channel probe request</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_HOMING">
										<name>MMP_RNGRLS_BEARING_HOMING</name>
										<value>14</value>
										<description>start of terminal homing mode</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_RANGE_ONLY">
										<name>MMP_RNGRLS_BEARING_RANGE_ONLY</name>
										<value>15</value>
										<description>Range only response</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_type_t::MMP_RNGRLS_BEARING_W_REPLYDATA">
										<name>MMP_RNGRLS_BEARING_W_REPLYDATA</name>
										<value>32</value>
										<description>Add to bearing types to request reply data</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="2" id="mmp_rngrls_bearing_t::tat">
								<name>tat</name>
								<size>2</size>
								<description>turn around time</description>
								<signed>0</signed>
								<enumeration_list count="3">
									<enumeration id="mmp_rngrls_bearing_tat_t::MMP_RNGRLS_TAT_SLOW">
										<name>MMP_RNGRLS_TAT_SLOW</name>
										<value>0</value>
										<description>legacy (slow) 2.4 second turn around</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_tat_t::MMP_RNGRLS_TAT_FAST">
										<name>MMP_RNGRLS_TAT_FAST</name>
										<value>1</value>
										<description>standard (fast) 1.6 second turn around</description>
									</enumeration>
									<enumeration id="mmp_rngrls_bearing_tat_t::MMP_RNGRLS_TAT_VFAST">
										<name>MMP_RNGRLS_TAT_VFAST</name>
										<value>2</value>
										<description>very fast 1.1 second turn around</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="3" id="mmp_rngrls_bearing_t::timeout_x10">
								<name>timeout_x10</name>
								<size>2</size>
								<description>When used with a BEARING_W_TIMEOUT message, specifies the timeout period for this range, in 0.1 second increments.  Ignored for regular BEARING messages.</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="5" size="16">
								<result order="0" id="mmp_rngrls_cmdresult_bearing_t::range">
									<name>range</name>
									<size>4</size>
									<description>Range to remote node in tenths of a meter</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_rngrls_cmdresult_bearing_t::rt_time">
									<name>rt_time</name>
									<size>4</size>
									<description>Round trip time to remote node in tenths of a millisecond</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_rngrls_cmdresult_bearing_t::doppler">
									<name>doppler</name>
									<size>4</size>
									<description>range rate 10*m/s</description>
									<signed>1</signed>
								</result>
								<result order="3" id="mmp_rngrls_cmdresult_bearing_t::azimuth">
									<name>azimuth</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
								<result order="4" id="mmp_rngrls_cmdresult_bearing_t::elevation">
									<name>elevation</name>
									<size>2</size>
									<description>tenths of a degree, or other overloaded meanings (tilt, depth, etc.)</description>
									<signed>1</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
				</cmd_list>
			</cmdsect>
			<cmdsect id="DATALOG">
				<name>DATALOG</name>
				<value>0x04</value>
				<description>Commands for Data Logger</description>
				<cmd_list count="13">
					<cmd operations="x" id="DATALOG::CLEAR">
						<name>CLEAR</name>
						<value>0x00</value>
						<description>Clears the data logger buffer</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_or_local_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query, or 0xFFFF to query the local modem</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="DATALOG::SIZE">
						<name>SIZE</name>
						<value>0x01</value>
						<description>Report the number of bytes in the data logger</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_remote_or_local_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>Address of remote modem to query, or 0xFFFF to query the local modem</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="6">
								<result order="0" id="mmp_datalog_cmdresult_size_t::size">
									<name>size</name>
									<size>4</size>
									<description>Number of bytes stores in the data logger</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_size_t::use_mb">
									<name>use_mb</name>
									<size>2</size>
									<description>If set to 1, the size is truncated to the nearest number of megabytes; if 0 the size is the actual number of bytes</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::READ_DATA">
						<name>READ_DATA</name>
						<value>0x02</value>
						<description>Read back the data logger buffer</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_datalog_read_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>remote modem address or 0xFFFF for local</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_read_t::number">
								<name>number</name>
								<size>2</size>
								<description>size in bytes, or page/sector number</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="variable">
								<result order="0" id="mmp_datalog_cmdresult_read_t::length">
									<name>length</name>
									<size>4</size>
									<description>number of bytes read</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_read_t::data">
									<name>data</name>
									<size>1</size>
									<description>data read [sizevar=length]</description>
									<signed>1</signed>
									<array_size varid="mmp_datalog_cmdresult_read_t::length" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::READ_PAGE">
						<name>READ_PAGE</name>
						<value>0x03</value>
						<description>Read back a 4 kbyte page</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_datalog_read_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>remote modem address or 0xFFFF for local</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_read_t::number">
								<name>number</name>
								<size>2</size>
								<description>size in bytes, or page/sector number</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="variable">
								<result order="0" id="mmp_datalog_cmdresult_read_t::length">
									<name>length</name>
									<size>4</size>
									<description>number of bytes read</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_read_t::data">
									<name>data</name>
									<size>1</size>
									<description>data read [sizevar=length]</description>
									<signed>1</signed>
									<array_size varid="mmp_datalog_cmdresult_read_t::length" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::READ_SECTOR">
						<name>READ_SECTOR</name>
						<value>0x04</value>
						<description>Read back a 256 byte sector</description>
						<parameter_list count="2" size="4">
							<parameter order="0" id="mmp_datalog_read_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>remote modem address or 0xFFFF for local</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_read_t::number">
								<name>number</name>
								<size>2</size>
								<description>size in bytes, or page/sector number</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="variable">
								<result order="0" id="mmp_datalog_cmdresult_read_t::length">
									<name>length</name>
									<size>4</size>
									<description>number of bytes read</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_read_t::data">
									<name>data</name>
									<size>1</size>
									<description>data read [sizevar=length]</description>
									<signed>1</signed>
									<array_size varid="mmp_datalog_cmdresult_read_t::length" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::WRITE_DATA">
						<name>WRITE_DATA</name>
						<value>0x05</value>
						<description>Write data in to the data logger</description>
						<parameter_list count="3" size="variable">
							<parameter order="0" id="mmp_datalog_write_t::modem_ID">
								<name>modem_ID</name>
								<size>2</size>
								<description>remote modem address or 0xFFFF for local</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_write_t::bytes">
								<name>bytes</name>
								<size>2</size>
								<description>Number of bytes to be written</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_datalog_write_t::data">
								<name>data</name>
								<size>1</size>
								<description>data to be written [sizevar=bytes]</description>
								<signed>1</signed>
								<array_size varid="mmp_datalog_write_t::bytes" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="2" size="4">
								<result order="0" id="mmp_datalog_cmdresult_write_data_t::bytes_writ">
									<name>bytes_writ</name>
									<size>2</size>
									<description>number of bytes written</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_write_data_t::status">
									<name>status</name>
									<size>2</size>
									<description>data left to read</description>
									<signed>1</signed>
									<enumeration_list count="5">
										<enumeration id="mmp_datalog_cmdresult_write_data_status_t::MMP_DATALOG_WRITE_ERR_DISABLED">
											<name>MMP_DATALOG_WRITE_ERR_DISABLED</name>
											<value>-4</value>
											<description>Data logger writes disabled due to incompatible file schema in flash</description>
										</enumeration>
										<enumeration id="mmp_datalog_cmdresult_write_data_status_t::MMP_DATALOG_WRITE_FILE_ERROR">
											<name>MMP_DATALOG_WRITE_FILE_ERROR</name>
											<value>-3</value>
											<description>Error trying to open/delete/access a file</description>
										</enumeration>
										<enumeration id="mmp_datalog_cmdresult_write_data_status_t::MMP_DATALOG_WRITE_ERR_DATALOG_FULL">
											<name>MMP_DATALOG_WRITE_ERR_DATALOG_FULL</name>
											<value>-2</value>
											<description>No more room left in data logger</description>
										</enumeration>
										<enumeration id="mmp_datalog_cmdresult_write_data_status_t::MMP_DATALOG_WRITE_ERR_STORE_TO_FLASH">
											<name>MMP_DATALOG_WRITE_ERR_STORE_TO_FLASH</name>
											<value>-1</value>
											<description>Unable to store to flash	</description>
										</enumeration>
										<enumeration id="mmp_datalog_cmdresult_write_data_status_t::MMP_DATALOG_WRITE_SUCCESSFUL">
											<name>MMP_DATALOG_WRITE_SUCCESSFUL</name>
											<value>0</value>
											<description>A successful write</description>
										</enumeration>
									</enumeration_list>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::SEEK">
						<name>SEEK</name>
						<value>0x06</value>
						<description>Set the read pointer to a specific location</description>
						<parameter_list count="1" size="4">
							<parameter order="0" id="mmp_datalog_seek_t::pointer">
								<name>pointer</name>
								<size>4</size>
								<description>position in bytes from start of logger</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
					</cmd>
					<cmd operations="x" id="DATALOG::TELL">
						<name>TELL</name>
						<value>0x07</value>
						<description>Report the position of the read pointer</description>
						<cmdresult>
							<result_list count="2" size="8">
								<result order="0" id="mmp_datalog_cmdresult_tell_t::position">
									<name>position</name>
									<size>4</size>
									<description>number of bytes read</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_tell_t::remaining">
									<name>remaining</name>
									<size>4</size>
									<description>data left to read</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::LIST">
						<name>LIST</name>
						<value>0x08</value>
						<description>Retrieve general information about the local or remote data logger</description>
						<cmdresult>
							<result_list count="7" size="20">
								<result order="0" id="mmp_datalog_cmdresult_list_t::byte_count_l">
									<name>byte_count_l</name>
									<size>4</size>
									<description>Low-order 32 bits of the number of bytes stored</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_list_t::byte_count_h">
									<name>byte_count_h</name>
									<size>1</size>
									<description>High-order 8 bits of the number of bytes stored</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_datalog_cmdresult_list_t::storeloc">
									<name>storeloc</name>
									<size>1</size>
									<description>Physical memory device being used to log data</description>
									<signed>0</signed>
									<enumeration_list count="2">
										<enumeration id="datalog_store_t::DLOG_STORE_INTERNAL">
											<name>DLOG_STORE_INTERNAL</name>
											<value>0</value>
											<description>On-board flash memory</description>
										</enumeration>
										<enumeration id="datalog_store_t::DLOG_STORE_SDHC">
											<name>DLOG_STORE_SDHC</name>
											<value>1</value>
											<description>External SDHC card</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="3" id="mmp_datalog_cmdresult_list_t::source_flags">
									<name>source_flags</name>
									<size>2</size>
									<description>Bit flags representing which data sources have data in the logger - the flags are defined as (1 &lt;&lt; source_enum)</description>
									<signed>0</signed>
									<enumeration_list count="10">
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P1">
											<name>DLOG_SRCFLAG_P1</name>
											<value>0x01</value>
											<description>Bit flag for Serial port 1</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P2">
											<name>DLOG_SRCFLAG_P2</name>
											<value>0x02</value>
											<description>Bit flag for Serial port 2</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AC">
											<name>DLOG_SRCFLAG_AC</name>
											<value>0x10</value>
											<description>Bit flag for Acoustic packets</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_XP">
											<name>DLOG_SRCFLAG_XP</name>
											<value>0x20</value>
											<description>Bit flag for Transponder activity</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DI">
											<name>DLOG_SRCFLAG_DI</name>
											<value>0x40</value>
											<description>Bit flag for Diagnostic information (internally generated)</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_MMP">
											<name>DLOG_SRCFLAG_MMP</name>
											<value>0x80</value>
											<description>Bit flag for Data inserted via MMP directive</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DEV">
											<name>DLOG_SRCFLAG_DEV</name>
											<value>0x100</value>
											<description>Bit flag for Data inserted via the /dev/logger interface</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AIN">
											<name>DLOG_SRCFLAG_AIN</name>
											<value>0x200</value>
											<description>Bit flag for Data from the analog input</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_TRUNC">
											<name>DLOG_SRCFLAG_TRUNC</name>
											<value>0x2000</value>
											<description>Bit flag indicating this record was truncated</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_RECOV">
											<name>DLOG_SRCFLAG_RECOV</name>
											<value>0x4000</value>
											<description>Bit flag indicating this record was recovered at boot</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="4" id="mmp_datalog_cmdresult_list_t::record_count">
									<name>record_count</name>
									<size>4</size>
									<description>Number of discrete records stored</description>
									<signed>0</signed>
								</result>
								<result order="5" id="mmp_datalog_cmdresult_list_t::first_rec_time">
									<name>first_rec_time</name>
									<size>4</size>
									<description>Time stamp of first record in logger (FAT32 format)</description>
									<signed>0</signed>
								</result>
								<result order="6" id="mmp_datalog_cmdresult_list_t::last_rec_time">
									<name>last_rec_time</name>
									<size>4</size>
									<description>Time stamp of the last record in logger (FAT32 format)</description>
									<signed>0</signed>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::FIND">
						<name>FIND</name>
						<value>0x09</value>
						<description>Find records in the local or remote data logger using the command line query syntax</description>
						<parameter_list count="2" size="variable">
							<parameter order="0" id="mmp_datalog_find_t::size">
								<name>size</name>
								<size>2</size>
								<description>Size of the query, in characters</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_find_t::query">
								<name>query</name>
								<size>1</size>
								<description>Arbitrary-length record query, using same syntax as would be used with &apos;dlfind&apos; command [sizevar=size]</description>
								<signed>1</signed>
								<array_size varid="mmp_datalog_find_t::size" multiplier="1">variable</array_size>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="5" size="variable">
								<result order="0" id="mmp_datalog_cmdresult_find_t::recno">
									<name>recno</name>
									<size>4</size>
									<description>Record number</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_find_t::time">
									<name>time</name>
									<size>4</size>
									<description>Timestamp of the record</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_datalog_cmdresult_find_t::source_flags">
									<name>source_flags</name>
									<size>2</size>
									<description>Bit flags representing the sources to retrieve info about - the flags are defined as (1 &lt;&lt; source_enum) 	</description>
									<signed>0</signed>
									<enumeration_list count="10">
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P1">
											<name>DLOG_SRCFLAG_P1</name>
											<value>0x01</value>
											<description>Bit flag for Serial port 1</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P2">
											<name>DLOG_SRCFLAG_P2</name>
											<value>0x02</value>
											<description>Bit flag for Serial port 2</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AC">
											<name>DLOG_SRCFLAG_AC</name>
											<value>0x10</value>
											<description>Bit flag for Acoustic packets</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_XP">
											<name>DLOG_SRCFLAG_XP</name>
											<value>0x20</value>
											<description>Bit flag for Transponder activity</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DI">
											<name>DLOG_SRCFLAG_DI</name>
											<value>0x40</value>
											<description>Bit flag for Diagnostic information (internally generated)</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_MMP">
											<name>DLOG_SRCFLAG_MMP</name>
											<value>0x80</value>
											<description>Bit flag for Data inserted via MMP directive</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DEV">
											<name>DLOG_SRCFLAG_DEV</name>
											<value>0x100</value>
											<description>Bit flag for Data inserted via the /dev/logger interface</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AIN">
											<name>DLOG_SRCFLAG_AIN</name>
											<value>0x200</value>
											<description>Bit flag for Data from the analog input</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_TRUNC">
											<name>DLOG_SRCFLAG_TRUNC</name>
											<value>0x2000</value>
											<description>Bit flag indicating this record was truncated</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_RECOV">
											<name>DLOG_SRCFLAG_RECOV</name>
											<value>0x4000</value>
											<description>Bit flag indicating this record was recovered at boot</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="3" id="mmp_datalog_cmdresult_find_t::size">
									<name>size</name>
									<size>2</size>
									<description>Size of the record</description>
									<signed>0</signed>
								</result>
								<result order="4" id="mmp_datalog_cmdresult_find_t::data">
									<name>data</name>
									<size>1</size>
									<description>record data (length contained in size parameter) [sizevar=size]</description>
									<signed>1</signed>
									<array_size varid="mmp_datalog_cmdresult_find_t::size" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::DUMP">
						<name>DUMP</name>
						<value>0x0A</value>
						<description>Dump the local or remote data logger based on byte offset and length (on all-source or per-source basis)</description>
						<parameter_list count="4" size="8">
							<parameter order="0" id="mmp_datalog_dump_t::byte_offset_l">
								<name>byte_offset_l</name>
								<size>4</size>
								<description>The 32 low-order bits of the byte offset (logged from the specified source) to begin output from</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_dump_t::byte_offset_h">
								<name>byte_offset_h</name>
								<size>1</size>
								<description>The 8 high-order bits of the byte offset (logged from the specified source) to begin output from</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_datalog_dump_t::source">
								<name>source</name>
								<size>1</size>
								<description>The source of the bytes to retrieve; use 0xFF to access bytes globally, ignoring source </description>
								<signed>0</signed>
								<enumeration_list count="12">
									<enumeration id="datalog_source_t::DLOG_SRC_P1">
										<name>DLOG_SRC_P1</name>
										<value>0</value>
										<description>Serial port 1</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_P2">
										<name>DLOG_SRC_P2</name>
										<value>1</value>
										<description>Serial port 2</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_AC">
										<name>DLOG_SRC_AC</name>
										<value>4</value>
										<description>Acoustic transmission data</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_XP">
										<name>DLOG_SRC_XP</name>
										<value>5</value>
										<description>Transponder data</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_DI">
										<name>DLOG_SRC_DI</name>
										<value>6</value>
										<description>Diagnostic data</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_MMP">
										<name>DLOG_SRC_MMP</name>
										<value>7</value>
										<description>Data inserted via MMP message</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_DEV">
										<name>DLOG_SRC_DEV</name>
										<value>8</value>
										<description>Data inserted via /dev/logger system device</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_AIN">
										<name>DLOG_SRC_AIN</name>
										<value>9</value>
										<description>Data from analog input</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_ALL">
										<name>DLOG_SRC_ALL</name>
										<value>0xFF</value>
										<description>Sentinel for any/all sources</description>
									</enumeration>
								</enumeration_list>
							</parameter>
							<parameter order="3" id="mmp_datalog_dump_t::byte_count">
								<name>byte_count</name>
								<size>2</size>
								<description>The number of bytes to request, up to 64K</description>
								<signed>0</signed>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="5" size="variable">
								<result order="0" id="mmp_datalog_cmdresult_dump_t::byte_offset_l">
									<name>byte_offset_l</name>
									<size>4</size>
									<description>Low-order 32 bits of the byte offset within the logger (referenced globally or per-source, depending on the source field)</description>
									<signed>0</signed>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_dump_t::byte_offset_h">
									<name>byte_offset_h</name>
									<size>1</size>
									<description>High-order 8 bits of the byte offset within the logger (referenced globally or per-source, depending on the source field)</description>
									<signed>0</signed>
								</result>
								<result order="2" id="mmp_datalog_cmdresult_dump_t::source">
									<name>source</name>
									<size>1</size>
									<description>The source of the dumped data (or 0xFF for ALL)</description>
									<signed>0</signed>
									<enumeration_list count="12">
										<enumeration id="datalog_source_t::DLOG_SRC_P1">
											<name>DLOG_SRC_P1</name>
											<value>0</value>
											<description>Serial port 1</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_P2">
											<name>DLOG_SRC_P2</name>
											<value>1</value>
											<description>Serial port 2</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_AC">
											<name>DLOG_SRC_AC</name>
											<value>4</value>
											<description>Acoustic transmission data</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_XP">
											<name>DLOG_SRC_XP</name>
											<value>5</value>
											<description>Transponder data</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_DI">
											<name>DLOG_SRC_DI</name>
											<value>6</value>
											<description>Diagnostic data</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_MMP">
											<name>DLOG_SRC_MMP</name>
											<value>7</value>
											<description>Data inserted via MMP message</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_DEV">
											<name>DLOG_SRC_DEV</name>
											<value>8</value>
											<description>Data inserted via /dev/logger system device</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_AIN">
											<name>DLOG_SRC_AIN</name>
											<value>9</value>
											<description>Data from analog input</description>
										</enumeration>
										<enumeration id="datalog_source_t::DLOG_SRC_ALL">
											<name>DLOG_SRC_ALL</name>
											<value>0xFF</value>
											<description>Sentinel for any/all sources</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="3" id="mmp_datalog_cmdresult_dump_t::length">
									<name>length</name>
									<size>2</size>
									<description>length of the data contained in the data field</description>
									<signed>0</signed>
								</result>
								<result order="4" id="mmp_datalog_cmdresult_dump_t::data">
									<name>data</name>
									<size>1</size>
									<description>Extracted data [sizevar=length]</description>
									<signed>1</signed>
									<array_size varid="mmp_datalog_cmdresult_dump_t::length" multiplier="1">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::SRCINFO">
						<name>SRCINFO</name>
						<value>0x0B</value>
						<description>Get information pertaining to one or more data sources in the logger (total bytes and number of records)</description>
						<parameter_list count="1" size="2">
							<parameter order="0" id="mmp_datalog_srcinfo_t::source_flags">
								<name>source_flags</name>
								<size>2</size>
								<description>Bit flags representing the sources to retrieve info about - the flags are defined as (1 &lt;&lt; source_enum) </description>
								<signed>0</signed>
								<enumeration_list count="10">
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P1">
										<name>DLOG_SRCFLAG_P1</name>
										<value>0x01</value>
										<description>Bit flag for Serial port 1</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P2">
										<name>DLOG_SRCFLAG_P2</name>
										<value>0x02</value>
										<description>Bit flag for Serial port 2</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AC">
										<name>DLOG_SRCFLAG_AC</name>
										<value>0x10</value>
										<description>Bit flag for Acoustic packets</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_XP">
										<name>DLOG_SRCFLAG_XP</name>
										<value>0x20</value>
										<description>Bit flag for Transponder activity</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DI">
										<name>DLOG_SRCFLAG_DI</name>
										<value>0x40</value>
										<description>Bit flag for Diagnostic information (internally generated)</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_MMP">
										<name>DLOG_SRCFLAG_MMP</name>
										<value>0x80</value>
										<description>Bit flag for Data inserted via MMP directive</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DEV">
										<name>DLOG_SRCFLAG_DEV</name>
										<value>0x100</value>
										<description>Bit flag for Data inserted via the /dev/logger interface</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AIN">
										<name>DLOG_SRCFLAG_AIN</name>
										<value>0x200</value>
										<description>Bit flag for Data from the analog input</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_TRUNC">
										<name>DLOG_SRCFLAG_TRUNC</name>
										<value>0x2000</value>
										<description>Bit flag indicating this record was truncated</description>
									</enumeration>
									<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_RECOV">
										<name>DLOG_SRCFLAG_RECOV</name>
										<value>0x4000</value>
										<description>Bit flag indicating this record was recovered at boot</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
						<cmdresult>
							<result_list count="4" size="variable">
								<result order="0" id="mmp_datalog_cmdresult_srcinfo_t::source_flags">
									<name>source_flags</name>
									<size>2</size>
									<description>Bit flags representing which data sources are being reported on - the flags are defined as (1 &lt;&lt; source_enum)</description>
									<signed>0</signed>
									<enumeration_list count="10">
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P1">
											<name>DLOG_SRCFLAG_P1</name>
											<value>0x01</value>
											<description>Bit flag for Serial port 1</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_P2">
											<name>DLOG_SRCFLAG_P2</name>
											<value>0x02</value>
											<description>Bit flag for Serial port 2</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AC">
											<name>DLOG_SRCFLAG_AC</name>
											<value>0x10</value>
											<description>Bit flag for Acoustic packets</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_XP">
											<name>DLOG_SRCFLAG_XP</name>
											<value>0x20</value>
											<description>Bit flag for Transponder activity</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DI">
											<name>DLOG_SRCFLAG_DI</name>
											<value>0x40</value>
											<description>Bit flag for Diagnostic information (internally generated)</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_MMP">
											<name>DLOG_SRCFLAG_MMP</name>
											<value>0x80</value>
											<description>Bit flag for Data inserted via MMP directive</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_DEV">
											<name>DLOG_SRCFLAG_DEV</name>
											<value>0x100</value>
											<description>Bit flag for Data inserted via the /dev/logger interface</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_AIN">
											<name>DLOG_SRCFLAG_AIN</name>
											<value>0x200</value>
											<description>Bit flag for Data from the analog input</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_TRUNC">
											<name>DLOG_SRCFLAG_TRUNC</name>
											<value>0x2000</value>
											<description>Bit flag indicating this record was truncated</description>
										</enumeration>
										<enumeration id="datalog_source_flag_t::DLOG_SRCFLAG_RECOV">
											<name>DLOG_SRCFLAG_RECOV</name>
											<value>0x4000</value>
											<description>Bit flag indicating this record was recovered at boot</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="1" id="mmp_datalog_cmdresult_srcinfo_t::storeloc">
									<name>storeloc</name>
									<size>1</size>
									<description>Physical memory device being used to log data</description>
									<signed>0</signed>
									<enumeration_list count="2">
										<enumeration id="datalog_store_t::DLOG_STORE_INTERNAL">
											<name>DLOG_STORE_INTERNAL</name>
											<value>0</value>
											<description>On-board flash memory</description>
										</enumeration>
										<enumeration id="datalog_store_t::DLOG_STORE_SDHC">
											<name>DLOG_STORE_SDHC</name>
											<value>1</value>
											<description>External SDHC card</description>
										</enumeration>
									</enumeration_list>
								</result>
								<result order="2" id="mmp_datalog_cmdresult_srcinfo_t::size">
									<name>size</name>
									<size>1</size>
									<description>Size in bytes of the source_counts[] array</description>
									<signed>0</signed>
								</result>
								<result order="3" id="mmp_datalog_cmdresult_srcinfo_t::source_counts">
									<name>source_counts</name>
									<size>2</size>
									<description>Variable length array - there are 2 32-bit ints + 2 8-bit ints for each source with data in the logger: layout contained in mmp_datalog_cmdresult_source_counts_t [sizevar=size]</description>
									<signed>0</signed>
									<array_size varid="mmp_datalog_cmdresult_srcinfo_t::size" multiplier="6">variable</array_size>
								</result>
							</result_list>
						</cmdresult>
					</cmd>
					<cmd operations="x" id="DATALOG::REMOTE_GETDLOGBLK">
						<name>REMOTE_GETDLOGBLK</name>
						<value>0x0C</value>
						<description>Request a block of up to 4K from a remote modem&apos;s data logger with bit flags indicating which cells are valid/corrupted</description>
						<parameter_list count="5" size="10">
							<parameter order="0" id="mmp_datalog_remote_getdlogblk_t::addr">
								<name>addr</name>
								<size>2</size>
								<description>Address of the remote modem from which the block is being requested</description>
								<signed>0</signed>
							</parameter>
							<parameter order="1" id="mmp_datalog_remote_getdlogblk_t::byte_count">
								<name>byte_count</name>
								<size>2</size>
								<description>The number of bytes to request, up to 4K</description>
								<signed>0</signed>
							</parameter>
							<parameter order="2" id="mmp_datalog_remote_getdlogblk_t::byte_offset_l">
								<name>byte_offset_l</name>
								<size>4</size>
								<description>The 32 low-order bits of the byte offset (logged from the specified source) to begin output from</description>
								<signed>0</signed>
							</parameter>
							<parameter order="3" id="mmp_datalog_remote_getdlogblk_t::byte_offset_h">
								<name>byte_offset_h</name>
								<size>1</size>
								<description>The 8 high-order bits of the byte offset (logged from the specified source) to begin output from </description>
								<signed>0</signed>
							</parameter>
							<parameter order="4" id="mmp_datalog_remote_getdlogblk_t::source">
								<name>source</name>
								<size>1</size>
								<description>The source of the bytes to retrieve; use 0xFF to access bytes globally, ignoring source </description>
								<signed>0</signed>
								<enumeration_list count="12">
									<enumeration id="datalog_source_t::DLOG_SRC_P1">
										<name>DLOG_SRC_P1</name>
										<value>0</value>
										<description>Serial port 1</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_P2">
										<name>DLOG_SRC_P2</name>
										<value>1</value>
										<description>Serial port 2</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_AC">
										<name>DLOG_SRC_AC</name>
										<value>4</value>
										<description>Acoustic transmission data</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_XP">
										<name>DLOG_SRC_XP</name>
										<value>5</value>
										<description>Transponder data</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_DI">
										<name>DLOG_SRC_DI</name>
										<value>6</value>
										<description>Diagnostic data</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_MMP">
										<name>DLOG_SRC_MMP</name>
										<value>7</value>
										<description>Data inserted via MMP message</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_DEV">
										<name>DLOG_SRC_DEV</name>
										<value>8</value>
										<description>Data inserted via /dev/logger system device</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_AIN">
										<name>DLOG_SRC_AIN</name>
										<value>9</value>
										<description>Data from analog input</description>
									</enumeration>
									<enumeration id="datalog_source_t::DLOG_SRC_ALL">
										<name>DLOG_SRC_ALL</name>
										<value>0xFF</value>
										<description>Sentinel for any/all sources</description>
									</enumeration>
								</enumeration_list>
							</parameter>
						</parameter_list>
					</cmd>
				</cmd_list>
			</cmdsect>
		</cmdsect_list>
	</parameter_groups>
</MMP>
